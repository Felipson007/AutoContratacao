import type { AriaInvalid, ButtonVariant, InputSize } from '../types';
import { ComputedRef } from 'vue';
/**
 * @param items must be a reactive object ex: reactive({ plain: toRef(plainBoolean, 'value')})
 * @returns
 */
declare const getClasses: (items: {
    plain?: boolean;
    button?: boolean;
    inline?: boolean;
    switch?: boolean;
    size?: InputSize;
}) => ComputedRef;
/**
 * @param items must be a reactive object ex: reactive({ plain: toRef(plainBoolean, 'value')})
 * @returns
 */
declare const getInputClasses: (items: {
    plain?: boolean;
    button?: boolean;
    state?: boolean;
}) => ComputedRef;
/**
 * @param items must be a reactive object ex: reactive({ plain: toRef(plainBoolean, 'value')})
 * @returns
 */
declare const getLabelClasses: (items: {
    plain?: boolean;
    button?: boolean;
    buttonVariant?: ButtonVariant;
    size?: InputSize;
}) => ComputedRef;
/**
 * @param items must be a reactive object ex: reactive({ plain: toRef(plainBoolean, 'value')})
 * @returns
 */
declare const getGroupAttr: (items: {
    required?: boolean;
    ariaInvalid?: AriaInvalid;
    state?: boolean;
}) => ComputedRef;
/**
 * @param items must be a reactive object ex: reactive({ plain: toRef(plainBoolean, 'value')})
 * @returns
 */
declare const getGroupClasses: (items: {
    validated?: boolean;
    buttons?: boolean;
    stacked?: boolean;
    size?: InputSize;
}) => ComputedRef;
/**
 * @param slots
 * @param nodeType
 * @param disabled
 * @returns
 */
declare const slotsToElements: (slots: Array<any>, nodeType: string, disabled: boolean) => {
    props: any;
    text: any;
}[];
/**
 * @param option
 * @param props
 * @returns
 */
declare const optionToElement: (option: any, props: any) => any;
/**
 * @param el
 * @param idx
 * @param props
 * @param computedName
 * @param computedId
 * @returns
 */
declare const bindGroupProps: (el: any, idx: number, props: any, computedName: ComputedRef, computedId: ComputedRef) => any;
export { getClasses, getInputClasses, getLabelClasses, getGroupAttr, getGroupClasses, slotsToElements, optionToElement, bindGroupProps, };
