import { Ref } from 'vue';
import type { ButtonVariant, InputSize } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    ariaLabel: {
        type: StringConstructor;
        required: false;
    };
    ariaLabelledBy: {
        type: StringConstructor;
        required: false;
    };
    form: {
        type: StringConstructor;
        required: false;
    };
    indeterminate: {
        type: null;
        required: false;
    };
    name: {
        type: StringConstructor;
        required: false;
    };
    id: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    autofocus: {
        type: null;
        required: false;
        default: boolean;
    };
    plain: {
        type: null;
        required: false;
        default: boolean;
    };
    button: {
        type: null;
        required: false;
        default: boolean;
    };
    switch: {
        type: null;
        required: false;
        default: boolean;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    buttonVariant: {
        type: null;
        required: false;
        default: string;
    };
    inline: {
        type: null;
        required: false;
        default: boolean;
    };
    required: {
        type: null;
        required: false;
        default: undefined;
    };
    size: {
        type: null;
        required: false;
        default: string;
    };
    state: {
        type: null;
        required: false;
        default: undefined;
    };
    uncheckedValue: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
        required: false;
        default: boolean;
    };
    value: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
        required: false;
        default: boolean;
    };
    modelValue: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
        required: false;
        default: undefined;
    };
}, {
    props: any;
    indeterminateBoolean: import("vue").ComputedRef<boolean | undefined>;
    autofocusBoolean: import("vue").ComputedRef<boolean>;
    plainBoolean: import("vue").ComputedRef<boolean>;
    buttonBoolean: import("vue").ComputedRef<boolean>;
    switchBoolean: import("vue").ComputedRef<boolean>;
    disabledBoolean: import("vue").ComputedRef<boolean>;
    inlineBoolean: import("vue").ComputedRef<boolean>;
    requiredBoolean: import("vue").ComputedRef<boolean | undefined>;
    stateBoolean: import("vue").ComputedRef<boolean | undefined>;
    emit: {
        (e: 'update:modelValue', value: unknown): void;
        (e: 'input', value: unknown): void;
        (e: 'change', value: unknown): void;
    };
    computedId: import("vue").ComputedRef<string>;
    input: Ref<HTMLElement>;
    isFocused: Ref<boolean>;
    localValue: import("vue").WritableComputedRef<boolean | unknown[] | Set<unknown> | undefined>;
    isChecked: import("vue").ComputedRef<boolean>;
    classesObject: {
        plain: boolean;
        button: boolean;
        inline: boolean;
        switch: boolean;
        size: InputSize;
        state: boolean | undefined;
        buttonVariant: ButtonVariant;
    };
    classes: import("vue").ComputedRef<any>;
    inputClasses: import("vue").ComputedRef<any>;
    labelClasses: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    ariaLabel: {
        type: StringConstructor;
        required: false;
    };
    ariaLabelledBy: {
        type: StringConstructor;
        required: false;
    };
    form: {
        type: StringConstructor;
        required: false;
    };
    indeterminate: {
        type: null;
        required: false;
    };
    name: {
        type: StringConstructor;
        required: false;
    };
    id: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    autofocus: {
        type: null;
        required: false;
        default: boolean;
    };
    plain: {
        type: null;
        required: false;
        default: boolean;
    };
    button: {
        type: null;
        required: false;
        default: boolean;
    };
    switch: {
        type: null;
        required: false;
        default: boolean;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    buttonVariant: {
        type: null;
        required: false;
        default: string;
    };
    inline: {
        type: null;
        required: false;
        default: boolean;
    };
    required: {
        type: null;
        required: false;
        default: undefined;
    };
    size: {
        type: null;
        required: false;
        default: string;
    };
    state: {
        type: null;
        required: false;
        default: undefined;
    };
    uncheckedValue: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
        required: false;
        default: boolean;
    };
    value: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
        required: false;
        default: boolean;
    };
    modelValue: {
        type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
        required: false;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    id: string;
    required: any;
    modelValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
    button: any;
    disabled: any;
    size: any;
    inline: any;
    state: any;
    autofocus: any;
    plain: any;
    switch: any;
    buttonVariant: any;
    uncheckedValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
    value: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
}>;
export default _sfc_main;
