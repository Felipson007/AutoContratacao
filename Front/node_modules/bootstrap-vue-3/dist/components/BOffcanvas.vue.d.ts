import { Offcanvas } from 'bootstrap';
declare const _sfc_main: import("vue").DefineComponent<{
    dismissLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    modelValue: {
        type: null;
        required: false;
        default: boolean;
    };
    bodyScrolling: {
        type: null;
        required: false;
        default: boolean;
    };
    backdrop: {
        type: null;
        required: false;
        default: boolean;
    };
    placement: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    noHeaderClose: {
        type: null;
        required: false;
        default: boolean;
    };
    noHeader: {
        type: null;
        required: false;
        default: boolean;
    };
}, {
    props: any;
    modelValueBoolean: import("vue").ComputedRef<boolean>;
    bodyScrollingBoolean: import("vue").ComputedRef<boolean>;
    backdropBoolean: import("vue").ComputedRef<boolean>;
    noHeaderCloseBoolean: import("vue").ComputedRef<boolean>;
    noHeaderBoolean: import("vue").ComputedRef<boolean>;
    emit: {
        (e: 'update:modelValue', value: boolean): void;
        (e: 'show'): void;
        (e: 'shown'): void;
        (e: 'hide'): void;
        (e: 'hidden'): void;
    };
    element: import("vue").Ref<HTMLElement | undefined>;
    instance: import("vue").Ref<Offcanvas | undefined>;
    show: () => void;
    hide: () => void;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    BCloseButton: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: (e: "click", value: MouseEvent) => void;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        whiteBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        type: any;
        ariaLabel: string;
        disabled: any;
        white: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    dismissLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    modelValue: {
        type: null;
        required: false;
        default: boolean;
    };
    bodyScrolling: {
        type: null;
        required: false;
        default: boolean;
    };
    backdrop: {
        type: null;
        required: false;
        default: boolean;
    };
    placement: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    noHeaderClose: {
        type: null;
        required: false;
        default: boolean;
    };
    noHeader: {
        type: null;
        required: false;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: any;
    dismissLabel: string;
    bodyScrolling: any;
    backdrop: any;
    placement: string;
    noHeaderClose: any;
    noHeader: any;
}>;
export default _sfc_main;
