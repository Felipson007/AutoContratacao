/// <reference types="node" />
declare const _default: {
    BAccordion: import("vue").DefineComponent<{
        flush: {
            type: null;
            required: false;
            default: boolean;
        };
        free: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
    }, {
        injectionKey: import("vue").InjectionKey<string>;
        props: any;
        computedId: import("vue").ComputedRef<string>;
        flushBoolean: import("vue").ComputedRef<boolean>;
        freeBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'accordion-flush': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        flush: {
            type: null;
            required: false;
            default: boolean;
        };
        free: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
    }>>, {
        flush: any;
        free: any;
    }>;
    BAccordionItem: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        visible: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        visibleBoolean: import("vue").ComputedRef<boolean>;
        computedId: import("vue").ComputedRef<string>;
        parent: string;
        BCollapse: import("vue").DefineComponent<{
            accordion: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            modelValue: {
                type: null;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            toggle: {
                type: null;
                required: false;
                default: boolean;
            };
            visible: {
                type: null;
                required: false;
                default: boolean;
            };
            isNav: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            modelValueBoolean: import("vue").ComputedRef<boolean>;
            toggleBoolean: import("vue").ComputedRef<boolean>;
            visibleBoolean: import("vue").ComputedRef<boolean>;
            isNavBoolean: import("vue").ComputedRef<boolean>;
            emit: {
                (e: "update:modelValue", value: boolean): void;
                (e: "show"): void;
                (e: "shown"): void;
                (e: "hide"): void;
                (e: "hidden"): void;
            };
            element: import("vue").Ref<HTMLElement | undefined>;
            instance: import("vue").Ref<import("bootstrap/js/dist/collapse").default | undefined>;
            classes: import("vue").ComputedRef<{
                show: boolean;
                'navbar-collapse': boolean;
            }>;
            close: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            accordion: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            modelValue: {
                type: null;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            toggle: {
                type: null;
                required: false;
                default: boolean;
            };
            visible: {
                type: null;
                required: false;
                default: boolean;
            };
            isNav: {
                type: null;
                required: false;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onShow?: ((...args: any[]) => any) | undefined;
            onShown?: ((...args: any[]) => any) | undefined;
            onHide?: ((...args: any[]) => any) | undefined;
            onHidden?: ((...args: any[]) => any) | undefined;
        }, {
            id: string;
            visible: any;
            modelValue: any;
            tag: string;
            toggle: any;
            isNav: any;
        }>;
        vBToggle: import("vue").Directive<HTMLElement, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        visible: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        visible: any;
    }>;
    BNavText: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
        };
    }>>, {}>;
    BAlert: import("vue").DefineComponent<{
        dismissLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        dismissible: {
            type: null;
            required: false;
            default: boolean;
        };
        fade: {
            type: null;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (BooleanConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
        show: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        dismissibleBoolean: import("vue").ComputedRef<boolean>;
        fadeBoolean: import("vue").ComputedRef<boolean>;
        showBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "closed"): void;
            (e: "close-count-down", value: number): void;
            (e: "update:modelValue", value: number | boolean): void;
        };
        element: import("vue").Ref<HTMLElement | null>;
        instance: import("vue").Ref<import("bootstrap/js/dist/alert").default | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            show: boolean;
            'alert-dismissible': boolean;
            fade: boolean;
        }>;
        _countDownTimeout: NodeJS.Timeout | undefined;
        parseCountDown: (value: number | boolean) => number;
        clearCountDownInterval: () => void;
        countDown: import("vue").Ref<number>;
        isAlertVisible: import("vue").ComputedRef<boolean>;
        parsedModelValue: import("vue").ComputedRef<boolean>;
        handleShowAndModelChanged: () => void;
        closeClicked: () => void;
        BCloseButton: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            emit: (e: "click", value: MouseEvent) => void;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            whiteBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                'btn-close-white': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            type: any;
            ariaLabel: string;
            disabled: any;
            white: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "closed" | "close-count-down")[], "update:modelValue" | "closed" | "close-count-down", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        dismissLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        dismissible: {
            type: null;
            required: false;
            default: boolean;
        };
        fade: {
            type: null;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (BooleanConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
        show: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClosed?: ((...args: any[]) => any) | undefined;
        "onClose-count-down"?: ((...args: any[]) => any) | undefined;
    }, {
        show: any;
        modelValue: number | boolean;
        dismissLabel: string;
        dismissible: any;
        fade: any;
        variant: any;
    }>;
    BAvatar: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        badge: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        badgeLeft: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeOffset: {
            type: StringConstructor;
            required: false;
        };
        badgeTop: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeVariant: {
            type: null;
            required: false;
            default: string;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonType: {
            type: null;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textVariant: {
            type: null;
            required: false;
            default: undefined;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        computeSize: (value: any) => string | null;
        props: any;
        badgeLeftBoolean: import("vue").ComputedRef<boolean>;
        badgeTopBoolean: import("vue").ComputedRef<boolean>;
        buttonBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        squareBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "click", value: MouseEvent): void;
            (e: "img-error", value: Event): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        SIZES: (string | null)[];
        FONT_SIZE_SCALE: number;
        BADGE_FONT_SIZE_SCALE: number;
        parentData: import("../types/components").BAvatarGroupParentData | null;
        computeContrastVariant: (colorVariant: import("../types/ColorVariant").default) => import("../types/ColorVariant").default;
        hasDefaultSlot: import("vue").ComputedRef<boolean>;
        hasBadgeSlot: import("vue").ComputedRef<boolean>;
        showBadge: import("vue").ComputedRef<string | boolean>;
        computedSize: import("vue").ComputedRef<string | null>;
        computedVariant: import("vue").ComputedRef<import("../types/ColorVariant").default>;
        computedRounded: import("vue").ComputedRef<string | boolean>;
        attrs: import("vue").ComputedRef<{
            type: import("../types/ButtonType").default | undefined;
            'aria-label': string | null;
            disabled: true | null;
        }>;
        badgeClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
        badgeText: import("vue").ComputedRef<string | false>;
        badgeTextClasses: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            badge: boolean;
            rounded: boolean;
            "rounded-circle": boolean;
            "rounded-0": boolean;
            "rounded-1": boolean;
            "rounded-3": boolean;
            "rounded-top": boolean;
            "rounded-bottom": boolean;
            "rounded-start": boolean;
            "rounded-end": boolean;
            btn: boolean;
        }>;
        textClasses: import("vue").ComputedRef<string>;
        badgeStyle: import("vue").ComputedRef<import("vue").StyleValue>;
        fontStyle: import("vue").ComputedRef<import("vue").StyleValue>;
        marginStyle: import("vue").ComputedRef<{
            marginLeft: string;
            marginRight: string;
        } | {
            marginLeft?: undefined;
            marginRight?: undefined;
        }>;
        tag: import("vue").ComputedRef<"button" | "span">;
        tagStyle: import("vue").ComputedRef<{
            width: string | null;
            height: string | null;
            marginLeft: string;
            marginRight: string;
        } | {
            width: string | null;
            height: string | null;
            marginLeft?: undefined;
            marginRight?: undefined;
        }>;
        clicked: (e: MouseEvent) => void;
        onImgError: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "img-error")[], "click" | "img-error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        badge: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        badgeLeft: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeOffset: {
            type: StringConstructor;
            required: false;
        };
        badgeTop: {
            type: null;
            required: false;
            default: boolean;
        };
        badgeVariant: {
            type: null;
            required: false;
            default: string;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonType: {
            type: null;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        icon: {
            type: StringConstructor;
            required: false;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textVariant: {
            type: null;
            required: false;
            default: undefined;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onImg-error"?: ((...args: any[]) => any) | undefined;
    }, {
        variant: any;
        button: any;
        disabled: any;
        alt: string;
        badge: string | boolean;
        badgeLeft: any;
        badgeTop: any;
        badgeVariant: any;
        buttonType: any;
        rounded: string | boolean;
        square: any;
        textVariant: any;
    }>;
    BAvatarGroup: import("vue").DefineComponent<{
        overlap: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BAvatarGroupParentData>;
        props: any;
        squareBoolean: import("vue").ComputedRef<boolean>;
        computedSize: import("vue").ComputedRef<string | null>;
        computeOverlap: (value: any) => number;
        overlapScale: import("vue").ComputedRef<number>;
        paddingStyle: import("vue").ComputedRef<import("vue").StyleValue>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        overlap: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        square: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
        rounded: string | boolean;
        square: any;
        overlap: string | number;
    }>;
    BNavForm: import("vue").DefineComponent<{
        role: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: null;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: null;
            required: false;
            default: boolean;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        emit: (e: "submit", value: Event) => void;
        submitted: (e: Event) => void;
        attrs: import("vue").ComputedRef<{
            floating: import("../types/Booleanish").default;
            role: string | undefined;
            id: string | undefined;
            novalidate: import("../types/Booleanish").default;
            validated: import("../types/Booleanish").default;
        }>;
        BForm: import("vue").DefineComponent<{
            id: {
                type: StringConstructor;
                required: false;
            };
            floating: {
                type: null;
                required: false;
                default: boolean;
            };
            novalidate: {
                type: null;
                required: false;
                default: boolean;
            };
            validated: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            floatingBoolean: import("vue").ComputedRef<boolean>;
            novalidateBoolean: import("vue").ComputedRef<boolean>;
            validatedBoolean: import("vue").ComputedRef<boolean>;
            emit: (e: "submit", value: Event) => void;
            classes: import("vue").ComputedRef<{
                'form-floating': boolean;
                'was-validated': boolean;
            }>;
            submitted: (e: Event) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: StringConstructor;
                required: false;
            };
            floating: {
                type: null;
                required: false;
                default: boolean;
            };
            novalidate: {
                type: null;
                required: false;
                default: boolean;
            };
            validated: {
                type: null;
                required: false;
                default: boolean;
            };
        }>> & {
            onSubmit?: ((...args: any[]) => any) | undefined;
        }, {
            floating: any;
            novalidate: any;
            validated: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        role: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: null;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: null;
            required: false;
            default: boolean;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
    }>> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
    }, {
        floating: any;
        novalidate: any;
        validated: any;
    }>;
    BBadge: import("vue").DefineComponent<{
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
        pill: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: string;
        };
        textIndicator: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        dotIndicator: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: import("../types/Booleanish").default | import("../types/ColorVariant").default;
            active: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            'text-dark': boolean;
            'rounded-pill': boolean;
            'position-absolute top-0 start-100 translate-middle': boolean;
            'p-2 border border-light rounded-circle': boolean;
            'text-decoration-none': boolean;
        }>;
        props: {};
        computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
        pill: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: string;
        };
        textIndicator: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        dotIndicator: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
    }>>, {
        replace: import("../types/Booleanish").default;
        tag: string;
        variant: import("../types/ColorVariant").default;
        disabled: import("../types/Booleanish").default;
        exact: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        pill: import("../types/Booleanish").default;
        textIndicator: import("../types/Booleanish").default;
        dotIndicator: import("../types/Booleanish").default;
    }>;
    BBreadcrumb: import("vue").DefineComponent<{
        items: {
            type: ArrayConstructor;
            required: false;
        };
    }, {
        props: any;
        breadcrumb: import("../composables/useBreadcrumb").UseBreadcrumbI;
        breadcrumbItemObjects: import("vue").ComputedRef<import("../types").BreadcrumbItemObject[]>;
        BBreadcrumbItem: import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            ariaCurrent: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            props: {};
            liClasses: import("vue").ComputedRef<{
                active: boolean;
            }>;
            computedTag: import("vue").ComputedRef<"span" | import("vue").DefineComponent<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }, {
                tag: import("vue").ComputedRef<string>;
                routerAttr: import("vue").ComputedRef<{
                    to: import("vue-router").RouteLocationRaw;
                    href: string;
                    target: import("../types/LinkTarget").default;
                    rel: string | null;
                    tabindex: unknown;
                    'aria-disabled': string | null;
                }>;
                link: import("vue").Ref<HTMLElement>;
                clicked: (e: MouseEvent) => void;
                activeBoolean: import("vue").ComputedRef<boolean>;
                appendBoolean: import("vue").ComputedRef<boolean>;
                disabledBoolean: import("vue").ComputedRef<boolean>;
                replaceBoolean: import("vue").ComputedRef<boolean>;
                exactBoolean: import("vue").ComputedRef<boolean>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
            }, {
                replace: import("../types/Booleanish").default;
                disabled: import("../types/Booleanish").default;
                exact: import("../types/Booleanish").default;
                active: import("../types/Booleanish").default;
                activeClass: string;
                append: import("../types/Booleanish").default;
                event: string | unknown[];
                exactActiveClass: string;
                rel: string;
                routerComponentName: string;
                routerTag: string;
                target: import("../types/LinkTarget").default;
                to: import("vue-router").RouteLocationRaw;
            }>>;
            computedAriaCurrent: import("vue").ComputedRef<string | undefined>;
            clicked: (e: MouseEvent) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            ariaCurrent: {
                type: StringConstructor;
                default: string;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
            ariaCurrent: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        items: {
            type: ArrayConstructor;
            required: false;
        };
    }>>, {}>;
    BBreadcrumbItem: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        ariaCurrent: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        props: {};
        liClasses: import("vue").ComputedRef<{
            active: boolean;
        }>;
        computedTag: import("vue").ComputedRef<"span" | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        computedAriaCurrent: import("vue").ComputedRef<string | undefined>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        ariaCurrent: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        replace: import("../types/Booleanish").default;
        disabled: import("../types/Booleanish").default;
        exact: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        ariaCurrent: string;
    }>;
    BButton: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<import("../types/ButtonType").default>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<import("../types/ButtonVariant").default>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            active: boolean;
            'rounded-pill': boolean;
            'rounded-0': boolean;
            disabled: boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            'aria-disabled': boolean | null;
            'aria-pressed': boolean | null;
            autocomplete: string | null;
            disabled: boolean | null;
            href: string | undefined;
            rel: string | null | undefined;
            role: string | null;
            target: import("../types/LinkTarget").default | null;
            type: import("../types/ButtonType").default | null;
            to: import("vue-router").RouteLocationRaw | null;
            append: import("../types/Booleanish").default | null;
            activeClass: string | null;
            event: string | unknown[] | null;
            exact: import("../types/Booleanish").default | null;
            exactActiveClass: string | null;
            replace: import("../types/Booleanish").default | null;
            routerComponentName: string | null;
            routerTag: string | null;
        }>;
        computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        clicked: (e: MouseEvent) => void;
        loadingBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<import("../types/ButtonType").default>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<import("../types/ButtonVariant").default>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
    }, {
        replace: import("../types/Booleanish").default;
        type: import("../types/ButtonType").default;
        tag: string;
        variant: import("../types/ButtonVariant").default;
        disabled: import("../types/Booleanish").default;
        size: import("../types/InputSize").default;
        exact: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        event: string | unknown[];
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        routerTag: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        pill: import("../types/Booleanish").default;
        pressed: import("../types/Booleanish").default;
        squared: import("../types/Booleanish").default;
        loading: import("../types/Booleanish").default;
        loadingMode: "fill" | "inline";
    }>;
    BButtonGroup: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        verticalBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'btn-group': boolean;
            'btn-group-vertical': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        tag: string;
        ariaLabel: string;
        vertical: any;
    }>;
    BButtonToolbar: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        justify: {
            type: null;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        justifyBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'justify-content-between': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        justify: {
            type: null;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        ariaLabel: string;
        justify: any;
        role: string;
    }>;
    BCard: import("vue").DefineComponent<{
        align: {
            type: null;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: null;
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        footer: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: null;
            required: false;
        };
        footerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: null;
            required: false;
        };
        headerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBottom: {
            type: null;
            required: false;
            default: boolean;
        };
        imgEnd: {
            type: null;
            required: false;
            default: boolean;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        imgLeft: {
            type: null;
            required: false;
            default: boolean;
        };
        imgRight: {
            type: null;
            required: false;
            default: boolean;
        };
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgStart: {
            type: null;
            required: false;
            default: boolean;
        };
        imgTop: {
            type: null;
            required: false;
            default: boolean;
        };
        imgWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        noBody: {
            type: null;
            required: false;
            default: boolean;
        };
        overlay: {
            type: null;
            required: false;
            default: boolean;
        };
        subtitle: {
            type: StringConstructor;
            required: false;
        };
        subtitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subtitleTextVariant: {
            type: null;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        imgBottomBoolean: import("vue").ComputedRef<boolean>;
        imgEndBoolean: import("vue").ComputedRef<boolean>;
        imgLeftBoolean: import("vue").ComputedRef<boolean>;
        imgRightBoolean: import("vue").ComputedRef<boolean>;
        imgStartBoolean: import("vue").ComputedRef<boolean>;
        noBodyBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'flex-row': boolean;
            'flex-row-reverse': boolean;
        }>;
        headerAttrs: import("vue").ComputedRef<{
            bgVariant: import("../types/ColorVariant").default | undefined;
            borderVariant: import("../types/ColorVariant").default | undefined;
            html: string;
            tag: string;
            textVariant: import("../types/TextColorVariant").default | undefined;
        }>;
        bodyAttrs: import("vue").ComputedRef<{
            overlay: import("../types/Booleanish").default;
            bodyBgVariant: import("../types/ColorVariant").default | undefined;
            bodyTag: string;
            bodyTextVariant: import("../types/TextColorVariant").default | undefined;
            subtitle: string | undefined;
            subtitleTag: string;
            subtitleTextVariant: import("../types/TextColorVariant").default;
            title: string | undefined;
            titleTag: string;
        }>;
        footerAttrs: import("vue").ComputedRef<{
            bgVariant: import("../types/ColorVariant").default | undefined;
            borderVariant: import("../types/ColorVariant").default | undefined;
            html: string;
            tag: string;
            textVariant: import("../types/TextColorVariant").default | undefined;
        }>;
        imgAttr: import("vue").ComputedRef<{
            src: string | undefined;
            alt: string | undefined;
            height: string | number | undefined;
            width: string | number | undefined;
            bottom: import("../types/Booleanish").default;
            end: import("../types/Booleanish").default;
            left: import("../types/Booleanish").default;
            right: import("../types/Booleanish").default;
            start: import("../types/Booleanish").default;
            top: import("../types/Booleanish").default;
        }>;
        BCardImg: import("vue").DefineComponent<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
            };
            bottom: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            top: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }, {
            props: any;
            emit: (e: "load", value: Event) => void;
            bottomBoolean: import("vue").ComputedRef<boolean>;
            endBoolean: import("vue").ComputedRef<boolean>;
            leftBoolean: import("vue").ComputedRef<boolean>;
            rightBoolean: import("vue").ComputedRef<boolean>;
            startBoolean: import("vue").ComputedRef<boolean>;
            topBoolean: import("vue").ComputedRef<boolean>;
            baseClass: import("vue").ComputedRef<"card-img-top" | "card-img-right" | "card-img-bottom" | "card-img-left" | "card-img">;
            attrs: import("vue").ComputedRef<{
                alt: string | undefined;
                height: string | number | undefined;
                src: string | undefined;
                lazy: import("../types/Booleanish").default;
                width: string | number | undefined;
                blank: import("../types/Booleanish").default;
                blankColor: string | undefined;
                sizes: string | string[] | undefined;
                srcset: string | string[] | undefined;
            }>;
            classes: import("vue").ComputedRef<string[]>;
            BImg: import("vue").DefineComponent<{
                alt: {
                    type: StringConstructor;
                    required: false;
                };
                blank: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                blankColor: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                block: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                center: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluid: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                lazy: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluidGrow: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                height: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                left: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                start: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                right: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                end: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                rounded: {
                    type: (StringConstructor | BooleanConstructor)[];
                    required: false;
                    default: boolean;
                };
                sizes: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                src: {
                    type: StringConstructor;
                    required: false;
                };
                srcset: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                thumbnail: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
            }, {
                props: any;
                emit: (e: "load", value: Event) => void;
                lazyBoolean: import("vue").ComputedRef<boolean>;
                blankBoolean: import("vue").ComputedRef<boolean>;
                blockBoolean: import("vue").ComputedRef<boolean>;
                centerBoolean: import("vue").ComputedRef<boolean>;
                fluidBoolean: import("vue").ComputedRef<boolean>;
                fluidGrowBoolean: import("vue").ComputedRef<boolean>;
                leftBoolean: import("vue").ComputedRef<boolean>;
                startBoolean: import("vue").ComputedRef<boolean>;
                rightBoolean: import("vue").ComputedRef<boolean>;
                endBoolean: import("vue").ComputedRef<boolean>;
                thumbnailBoolean: import("vue").ComputedRef<boolean>;
                BLANK_TEMPLATE: string;
                makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
                computedSrcset: import("vue").ComputedRef<string | undefined>;
                computedSizes: import("vue").ComputedRef<string | undefined>;
                computedDimentions: import("vue").ComputedRef<{
                    height: number | undefined;
                    width: number | undefined;
                }>;
                computedBlankImgSrc: import("vue").ComputedRef<string>;
                attrs: import("vue").ComputedRef<{
                    src: string | undefined;
                    alt: string | undefined;
                    width: number | undefined;
                    height: number | undefined;
                    srcset: string | undefined;
                    sizes: string | undefined;
                    loading: string;
                }>;
                alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                    'img-thumbnail': boolean;
                    'img-fluid': boolean;
                    'w-100': boolean;
                    rounded: boolean;
                    'd-block': boolean;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                alt: {
                    type: StringConstructor;
                    required: false;
                };
                blank: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                blankColor: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                block: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                center: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluid: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                lazy: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluidGrow: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                height: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                left: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                start: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                right: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                end: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                rounded: {
                    type: (StringConstructor | BooleanConstructor)[];
                    required: false;
                    default: boolean;
                };
                sizes: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                src: {
                    type: StringConstructor;
                    required: false;
                };
                srcset: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                thumbnail: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
            }>> & {
                onLoad?: ((...args: any[]) => any) | undefined;
            }, {
                rounded: string | boolean;
                left: any;
                right: any;
                center: any;
                end: any;
                start: any;
                block: any;
                blank: any;
                blankColor: string;
                lazy: any;
                fluid: any;
                fluidGrow: any;
                thumbnail: any;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
            };
            bottom: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            top: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }>> & {
            onLoad?: ((...args: any[]) => any) | undefined;
        }, {
            top: any;
            bottom: any;
            left: any;
            right: any;
            end: any;
            start: any;
            blank: any;
            lazy: any;
        }>;
        BCardHeader: import("vue").DefineComponent<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }, {
            BCardHeadFoot: import("vue").DefineComponent<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }, {
                props: any;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
        BCardBody: import("vue").DefineComponent<{
            bodyBgVariant: {
                type: null;
                required: false;
            };
            bodyTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            bodyTextVariant: {
                type: null;
                required: false;
            };
            overlay: {
                type: null;
                required: false;
                default: boolean;
            };
            subtitle: {
                type: StringConstructor;
                required: false;
            };
            subtitleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            subtitleTextVariant: {
                type: null;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            titleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
        }, {
            props: any;
            overlayBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                'card-img-overlay': boolean;
            }>;
            BCardTitle: import("vue").DefineComponent<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
            }>>, {
                tag: string;
            }>;
            BCardSubtitle: import("vue").DefineComponent<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                    default: string;
                };
            }, {
                props: any;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                    default: string;
                };
            }>>, {
                tag: string;
                textVariant: any;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            bodyBgVariant: {
                type: null;
                required: false;
            };
            bodyTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            bodyTextVariant: {
                type: null;
                required: false;
            };
            overlay: {
                type: null;
                required: false;
                default: boolean;
            };
            subtitle: {
                type: StringConstructor;
                required: false;
            };
            subtitleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            subtitleTextVariant: {
                type: null;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            titleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
        }>>, {
            overlay: any;
            bodyTag: string;
            subtitleTag: string;
            titleTag: string;
        }>;
        BCardFooter: import("vue").DefineComponent<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }, {
            BCardHeadFoot: import("vue").DefineComponent<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }, {
                props: any;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: null;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: null;
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        footer: {
            type: StringConstructor;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: null;
            required: false;
        };
        footerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: null;
            required: false;
        };
        headerHtml: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBottom: {
            type: null;
            required: false;
            default: boolean;
        };
        imgEnd: {
            type: null;
            required: false;
            default: boolean;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        imgLeft: {
            type: null;
            required: false;
            default: boolean;
        };
        imgRight: {
            type: null;
            required: false;
            default: boolean;
        };
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgStart: {
            type: null;
            required: false;
            default: boolean;
        };
        imgTop: {
            type: null;
            required: false;
            default: boolean;
        };
        imgWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        noBody: {
            type: null;
            required: false;
            default: boolean;
        };
        overlay: {
            type: null;
            required: false;
            default: boolean;
        };
        subtitle: {
            type: StringConstructor;
            required: false;
        };
        subtitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subtitleTextVariant: {
            type: null;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        overlay: any;
        bodyTag: string;
        footerHtml: string;
        footerTag: string;
        headerHtml: string;
        headerTag: string;
        imgBottom: any;
        imgEnd: any;
        imgLeft: any;
        imgRight: any;
        imgStart: any;
        imgTop: any;
        noBody: any;
        subtitleTag: string;
        subtitleTextVariant: any;
        titleTag: string;
        bodyText: string;
    }>;
    BCardBody: import("vue").DefineComponent<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        overlay: {
            type: null;
            required: false;
            default: boolean;
        };
        subtitle: {
            type: StringConstructor;
            required: false;
        };
        subtitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subtitleTextVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
    }, {
        props: any;
        overlayBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'card-img-overlay': boolean;
        }>;
        BCardTitle: import("vue").DefineComponent<{
            text: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            tag: string;
        }>;
        BCardSubtitle: import("vue").DefineComponent<{
            text: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
                default: string;
            };
        }>>, {
            tag: string;
            textVariant: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        overlay: {
            type: null;
            required: false;
            default: boolean;
        };
        subtitle: {
            type: StringConstructor;
            required: false;
        };
        subtitleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        subtitleTextVariant: {
            type: null;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
    }>>, {
        overlay: any;
        bodyTag: string;
        subtitleTag: string;
        titleTag: string;
    }>;
    BCardFooter: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        html: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
    }, {
        BCardHeadFoot: import("vue").DefineComponent<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        html: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
    }>;
    BCardGroup: import("vue").DefineComponent<{
        columns: {
            type: null;
            required: false;
            default: boolean;
        };
        deck: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        columnsBoolean: import("vue").ComputedRef<boolean>;
        deckBoolean: import("vue").ComputedRef<boolean>;
        cardTypeClass: import("vue").ComputedRef<"card-deck" | "card-columns" | "card-group">;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        columns: {
            type: null;
            required: false;
            default: boolean;
        };
        deck: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        columns: any;
        deck: any;
    }>;
    BCardHeader: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        html: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
    }, {
        BCardHeadFoot: import("vue").DefineComponent<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            html: {
                type: StringConstructor;
                required: false;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
        };
        bgVariant: {
            type: null;
            required: false;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        html: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
    }>;
    BCardImg: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
        };
        blank: {
            type: null;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
        };
        bottom: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: null;
            required: false;
            default: boolean;
        };
        start: {
            type: null;
            required: false;
            default: boolean;
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        top: {
            type: null;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }, {
        props: any;
        emit: (e: "load", value: Event) => void;
        bottomBoolean: import("vue").ComputedRef<boolean>;
        endBoolean: import("vue").ComputedRef<boolean>;
        leftBoolean: import("vue").ComputedRef<boolean>;
        rightBoolean: import("vue").ComputedRef<boolean>;
        startBoolean: import("vue").ComputedRef<boolean>;
        topBoolean: import("vue").ComputedRef<boolean>;
        baseClass: import("vue").ComputedRef<"card-img-top" | "card-img-right" | "card-img-bottom" | "card-img-left" | "card-img">;
        attrs: import("vue").ComputedRef<{
            alt: string | undefined;
            height: string | number | undefined;
            src: string | undefined;
            lazy: import("../types/Booleanish").default;
            width: string | number | undefined;
            blank: import("../types/Booleanish").default;
            blankColor: string | undefined;
            sizes: string | string[] | undefined;
            srcset: string | string[] | undefined;
        }>;
        classes: import("vue").ComputedRef<string[]>;
        BImg: import("vue").DefineComponent<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            block: {
                type: null;
                required: false;
                default: boolean;
            };
            center: {
                type: null;
                required: false;
                default: boolean;
            };
            fluid: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            fluidGrow: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            rounded: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            thumbnail: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }, {
            props: any;
            emit: (e: "load", value: Event) => void;
            lazyBoolean: import("vue").ComputedRef<boolean>;
            blankBoolean: import("vue").ComputedRef<boolean>;
            blockBoolean: import("vue").ComputedRef<boolean>;
            centerBoolean: import("vue").ComputedRef<boolean>;
            fluidBoolean: import("vue").ComputedRef<boolean>;
            fluidGrowBoolean: import("vue").ComputedRef<boolean>;
            leftBoolean: import("vue").ComputedRef<boolean>;
            startBoolean: import("vue").ComputedRef<boolean>;
            rightBoolean: import("vue").ComputedRef<boolean>;
            endBoolean: import("vue").ComputedRef<boolean>;
            thumbnailBoolean: import("vue").ComputedRef<boolean>;
            BLANK_TEMPLATE: string;
            makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
            computedSrcset: import("vue").ComputedRef<string | undefined>;
            computedSizes: import("vue").ComputedRef<string | undefined>;
            computedDimentions: import("vue").ComputedRef<{
                height: number | undefined;
                width: number | undefined;
            }>;
            computedBlankImgSrc: import("vue").ComputedRef<string>;
            attrs: import("vue").ComputedRef<{
                src: string | undefined;
                alt: string | undefined;
                width: number | undefined;
                height: number | undefined;
                srcset: string | undefined;
                sizes: string | undefined;
                loading: string;
            }>;
            alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                'img-thumbnail': boolean;
                'img-fluid': boolean;
                'w-100': boolean;
                rounded: boolean;
                'd-block': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            block: {
                type: null;
                required: false;
                default: boolean;
            };
            center: {
                type: null;
                required: false;
                default: boolean;
            };
            fluid: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            fluidGrow: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            rounded: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            thumbnail: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }>> & {
            onLoad?: ((...args: any[]) => any) | undefined;
        }, {
            rounded: string | boolean;
            left: any;
            right: any;
            center: any;
            end: any;
            start: any;
            block: any;
            blank: any;
            blankColor: string;
            lazy: any;
            fluid: any;
            fluidGrow: any;
            thumbnail: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
        };
        blank: {
            type: null;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
        };
        bottom: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: null;
            required: false;
            default: boolean;
        };
        start: {
            type: null;
            required: false;
            default: boolean;
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        top: {
            type: null;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }>> & {
        onLoad?: ((...args: any[]) => any) | undefined;
    }, {
        top: any;
        bottom: any;
        left: any;
        right: any;
        end: any;
        start: any;
        blank: any;
        lazy: any;
    }>;
    BCardSubtitle: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        textVariant: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        textVariant: any;
    }>;
    BCardText: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BCardTitle: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BCarousel: import("vue").DefineComponent<{
        startingSlide: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: StringConstructor;
            required: false;
        };
        imgWidth: {
            type: StringConstructor;
            required: false;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        controls: {
            type: null;
            required: false;
            default: boolean;
        };
        indicators: {
            type: null;
            required: false;
            default: boolean;
        };
        interval: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        noTouch: {
            type: null;
            required: false;
            default: boolean;
        };
        noWrap: {
            type: null;
            required: false;
            default: boolean;
        };
        controlsPrevText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        controlsNextText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        indicatorsButtonLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BCarouselParentData>;
        props: any;
        controlsBoolean: import("vue").ComputedRef<boolean>;
        indicatorsBoolean: import("vue").ComputedRef<boolean>;
        noTouchBoolean: import("vue").ComputedRef<boolean>;
        noWrapBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "sliding-start", value: Event): void;
            (e: "sliding-end", value: Event): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/carousel").default | undefined>;
        computedId: import("vue").ComputedRef<string>;
        slides: import("vue").Ref<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("sliding-start" | "sliding-end")[], "sliding-start" | "sliding-end", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        startingSlide: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: StringConstructor;
            required: false;
        };
        imgWidth: {
            type: StringConstructor;
            required: false;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        controls: {
            type: null;
            required: false;
            default: boolean;
        };
        indicators: {
            type: null;
            required: false;
            default: boolean;
        };
        interval: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        noTouch: {
            type: null;
            required: false;
            default: boolean;
        };
        noWrap: {
            type: null;
            required: false;
            default: boolean;
        };
        controlsPrevText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        controlsNextText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        indicatorsButtonLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onSliding-start"?: ((...args: any[]) => any) | undefined;
        "onSliding-end"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: number;
        startingSlide: number;
        controls: any;
        indicators: any;
        interval: number;
        noTouch: any;
        noWrap: any;
        controlsPrevText: string;
        controlsNextText: string;
        indicatorsButtonLabel: string;
    }>;
    BCarouselSlide: import("vue").DefineComponent<{
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        imgWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        interval: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionHtml: {
            type: StringConstructor;
            required: false;
        };
        captionTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentVisibleUp: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBlank: {
            type: null;
            required: false;
            default: boolean;
        };
        imgBlankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textHtml: {
            type: StringConstructor;
            required: false;
        };
        textTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        activeBoolean: import("vue").ComputedRef<boolean>;
        imgBlankBoolean: import("vue").ComputedRef<boolean>;
        parentData: import("../types/components").BCarouselParentData;
        img: import("vue").ComputedRef<string | true | undefined>;
        computedAttr: import("vue").ComputedRef<{
            background: string;
        }>;
        computedContentClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'd-none': boolean;
        }>;
        parentWidth: import("vue").ComputedRef<string | undefined>;
        parentHeight: import("vue").ComputedRef<string | undefined>;
        BImg: import("vue").DefineComponent<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            block: {
                type: null;
                required: false;
                default: boolean;
            };
            center: {
                type: null;
                required: false;
                default: boolean;
            };
            fluid: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            fluidGrow: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            rounded: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            thumbnail: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }, {
            props: any;
            emit: (e: "load", value: Event) => void;
            lazyBoolean: import("vue").ComputedRef<boolean>;
            blankBoolean: import("vue").ComputedRef<boolean>;
            blockBoolean: import("vue").ComputedRef<boolean>;
            centerBoolean: import("vue").ComputedRef<boolean>;
            fluidBoolean: import("vue").ComputedRef<boolean>;
            fluidGrowBoolean: import("vue").ComputedRef<boolean>;
            leftBoolean: import("vue").ComputedRef<boolean>;
            startBoolean: import("vue").ComputedRef<boolean>;
            rightBoolean: import("vue").ComputedRef<boolean>;
            endBoolean: import("vue").ComputedRef<boolean>;
            thumbnailBoolean: import("vue").ComputedRef<boolean>;
            BLANK_TEMPLATE: string;
            makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
            computedSrcset: import("vue").ComputedRef<string | undefined>;
            computedSizes: import("vue").ComputedRef<string | undefined>;
            computedDimentions: import("vue").ComputedRef<{
                height: number | undefined;
                width: number | undefined;
            }>;
            computedBlankImgSrc: import("vue").ComputedRef<string>;
            attrs: import("vue").ComputedRef<{
                src: string | undefined;
                alt: string | undefined;
                width: number | undefined;
                height: number | undefined;
                srcset: string | undefined;
                sizes: string | undefined;
                loading: string;
            }>;
            alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                'img-thumbnail': boolean;
                'img-fluid': boolean;
                'w-100': boolean;
                rounded: boolean;
                'd-block': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            block: {
                type: null;
                required: false;
                default: boolean;
            };
            center: {
                type: null;
                required: false;
                default: boolean;
            };
            fluid: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            fluidGrow: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            rounded: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            thumbnail: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }>> & {
            onLoad?: ((...args: any[]) => any) | undefined;
        }, {
            rounded: string | boolean;
            left: any;
            right: any;
            center: any;
            end: any;
            start: any;
            block: any;
            blank: any;
            blankColor: string;
            lazy: any;
            fluid: any;
            fluidGrow: any;
            thumbnail: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        imgWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        interval: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        background: {
            type: StringConstructor;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionHtml: {
            type: StringConstructor;
            required: false;
        };
        captionTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        contentVisibleUp: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        imgAlt: {
            type: StringConstructor;
            required: false;
        };
        imgBlank: {
            type: null;
            required: false;
            default: boolean;
        };
        imgBlankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textHtml: {
            type: StringConstructor;
            required: false;
        };
        textTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        active: any;
        captionTag: string;
        contentTag: string;
        imgBlank: any;
        imgBlankColor: string;
        textTag: string;
    }>;
    BCloseButton: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: (e: "click", value: MouseEvent) => void;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        whiteBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        type: any;
        ariaLabel: string;
        disabled: any;
        white: any;
    }>;
    BCol: import("vue").DefineComponent<{
        alignSelf: {
            type: import("vue").PropType<"auto" | import("../types/Alignment").default.Vertical>;
            default: null;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        order: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        col: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            col: boolean;
        }>;
        classList: import("vue").ComputedRef<string[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alignSelf: {
            type: import("vue").PropType<"auto" | import("../types/Alignment").default.Vertical>;
            default: null;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        order: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
        col: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            default: null;
        };
    }>>, {
        tag: string;
        alignSelf: "auto" | import("../types/Alignment").default.Vertical;
        order: string | number;
        offset: string | number;
        col: import("../types/Booleanish").default;
        cols: string | number;
    }>;
    BCollapse: import("vue").DefineComponent<{
        accordion: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggle: {
            type: null;
            required: false;
            default: boolean;
        };
        visible: {
            type: null;
            required: false;
            default: boolean;
        };
        isNav: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        modelValueBoolean: import("vue").ComputedRef<boolean>;
        toggleBoolean: import("vue").ComputedRef<boolean>;
        visibleBoolean: import("vue").ComputedRef<boolean>;
        isNavBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "update:modelValue", value: boolean): void;
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
        };
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/collapse").default | undefined>;
        classes: import("vue").ComputedRef<{
            show: boolean;
            'navbar-collapse': boolean;
        }>;
        close: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        accordion: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggle: {
            type: null;
            required: false;
            default: boolean;
        };
        visible: {
            type: null;
            required: false;
            default: boolean;
        };
        isNav: {
            type: null;
            required: false;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
    }, {
        id: string;
        visible: any;
        modelValue: any;
        tag: string;
        toggle: any;
        isNav: any;
    }>;
    BContainer: import("vue").DefineComponent<{
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        fluid: {
            type: import("vue").PropType<boolean | import("../types/Breakpoint").default>;
            default: boolean;
        };
        toast: {
            type: ObjectConstructor;
        };
        position: {
            type: import("vue").PropType<import("../types/Position").default>;
            required: false;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        fluid: {
            type: import("vue").PropType<boolean | import("../types/Breakpoint").default>;
            default: boolean;
        };
        toast: {
            type: ObjectConstructor;
        };
        position: {
            type: import("vue").PropType<import("../types/Position").default>;
            required: false;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        tag: string;
        fluid: boolean | import("../types/Breakpoint").default;
        gutterX: string;
        gutterY: string;
    }>;
    BDropdown: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        menuClass: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        splitClass: {
            type: null;
            required: false;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: null;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        boundary: {
            type: null;
            required: false;
            default: string;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        isNav: {
            type: null;
            required: false;
            default: boolean;
        };
        dropup: {
            type: null;
            required: false;
            default: boolean;
        };
        dropright: {
            type: null;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: null;
            required: false;
            default: boolean;
        };
        noFlip: {
            type: null;
            required: false;
            default: boolean;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        popperOpts: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        split: {
            type: null;
            required: false;
            default: boolean;
        };
        splitButtonType: {
            type: null;
            required: false;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        noCaret: {
            type: null;
            required: false;
            default: boolean;
        };
        toggleText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        blockBoolean: import("vue").ComputedRef<boolean>;
        darkBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        dropupBoolean: import("vue").ComputedRef<boolean>;
        droprightBoolean: import("vue").ComputedRef<boolean>;
        isNavBoolean: import("vue").ComputedRef<boolean>;
        dropleftBoolean: import("vue").ComputedRef<boolean>;
        rightBoolean: import("vue").ComputedRef<boolean>;
        splitBoolean: import("vue").ComputedRef<boolean>;
        noCaretBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
            (e: "click", event: MouseEvent): void;
            (e: "toggle"): void;
        };
        parent: import("vue").Ref<HTMLElement | undefined>;
        dropdown: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/dropdown").default | undefined>;
        computedId: import("vue").ComputedRef<string>;
        onSplitClick: (event: MouseEvent) => void;
        classes: import("vue").ComputedRef<{
            'd-grid': boolean;
            'd-flex': boolean;
        }>;
        buttonClasses: import("vue").ComputedRef<{
            'nav-link': boolean;
            'dropdown-toggle': boolean;
            'dropdown-toggle-no-caret': boolean;
            'w-100': boolean;
        }>;
        dropdownMenuClasses: import("vue").ComputedRef<{
            'dropdown-menu-dark': boolean;
            'dropdown-menu-end': boolean;
        }>;
        buttonAttr: import("vue").ComputedRef<{
            'data-bs-toggle': string | undefined;
            'aria-expanded': boolean | undefined;
            ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
            href: string | undefined;
        }>;
        splitAttr: import("vue").ComputedRef<{
            ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
        }>;
        hide: () => void;
        BButton: import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            rel: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
                default: string;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../types/ButtonType").default>;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            loading: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            loadingMode: {
                type: import("vue").PropType<"fill" | "inline">;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                active: boolean;
                'rounded-pill': boolean;
                'rounded-0': boolean;
                disabled: boolean;
            }>;
            attrs: import("vue").ComputedRef<{
                'aria-disabled': boolean | null;
                'aria-pressed': boolean | null;
                autocomplete: string | null;
                disabled: boolean | null;
                href: string | undefined;
                rel: string | null | undefined;
                role: string | null;
                target: import("../types/LinkTarget").default | null;
                type: import("../types/ButtonType").default | null;
                to: import("vue-router").RouteLocationRaw | null;
                append: import("../types/Booleanish").default | null;
                activeClass: string | null;
                event: string | unknown[] | null;
                exact: import("../types/Booleanish").default | null;
                exactActiveClass: string | null;
                replace: import("../types/Booleanish").default | null;
                routerComponentName: string | null;
                routerTag: string | null;
            }>;
            computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }, {
                tag: import("vue").ComputedRef<string>;
                routerAttr: import("vue").ComputedRef<{
                    to: import("vue-router").RouteLocationRaw;
                    href: string;
                    target: import("../types/LinkTarget").default;
                    rel: string | null;
                    tabindex: unknown;
                    'aria-disabled': string | null;
                }>;
                link: import("vue").Ref<HTMLElement>;
                clicked: (e: MouseEvent) => void;
                activeBoolean: import("vue").ComputedRef<boolean>;
                appendBoolean: import("vue").ComputedRef<boolean>;
                disabledBoolean: import("vue").ComputedRef<boolean>;
                replaceBoolean: import("vue").ComputedRef<boolean>;
                exactBoolean: import("vue").ComputedRef<boolean>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
            }, {
                replace: import("../types/Booleanish").default;
                disabled: import("../types/Booleanish").default;
                exact: import("../types/Booleanish").default;
                active: import("../types/Booleanish").default;
                activeClass: string;
                append: import("../types/Booleanish").default;
                event: string | unknown[];
                exactActiveClass: string;
                rel: string;
                routerComponentName: string;
                routerTag: string;
                target: import("../types/LinkTarget").default;
                to: import("vue-router").RouteLocationRaw;
            }>>;
            clicked: (e: MouseEvent) => void;
            loadingBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            rel: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
                default: string;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../types/ButtonType").default>;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            loading: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            loadingMode: {
                type: import("vue").PropType<"fill" | "inline">;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            type: import("../types/ButtonType").default;
            tag: string;
            variant: import("../types/ButtonVariant").default;
            disabled: import("../types/Booleanish").default;
            size: import("../types/InputSize").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
            pill: import("../types/Booleanish").default;
            pressed: import("../types/Booleanish").default;
            squared: import("../types/Booleanish").default;
            loading: import("../types/Booleanish").default;
            loadingMode: "fill" | "inline";
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "toggle" | "click")[], "show" | "shown" | "hide" | "hidden" | "toggle" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        menuClass: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        splitClass: {
            type: null;
            required: false;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: null;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        boundary: {
            type: null;
            required: false;
            default: string;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        isNav: {
            type: null;
            required: false;
            default: boolean;
        };
        dropup: {
            type: null;
            required: false;
            default: boolean;
        };
        dropright: {
            type: null;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: null;
            required: false;
            default: boolean;
        };
        noFlip: {
            type: null;
            required: false;
            default: boolean;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        popperOpts: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        split: {
            type: null;
            required: false;
            default: boolean;
        };
        splitButtonType: {
            type: null;
            required: false;
            default: string;
        };
        splitHref: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        noCaret: {
            type: null;
            required: false;
            default: boolean;
        };
        toggleText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        onToggle?: ((...args: any[]) => any) | undefined;
    }, {
        split: any;
        isNav: any;
        variant: any;
        dark: any;
        disabled: any;
        right: any;
        block: any;
        offset: string | number;
        role: string;
        autoClose: string | boolean;
        boundary: any;
        dropup: any;
        dropright: any;
        dropleft: any;
        noFlip: any;
        popperOpts: Record<string, any>;
        splitButtonType: any;
        splitHref: string;
        noCaret: any;
        toggleText: string;
    }>;
    BDropdownDivider: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BDropdownForm: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    BDropdownGroup: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        ariaDescribedby: {
            type: StringConstructor;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerClass: {
            type: null;
            required: false;
            default: undefined;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerVariant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        headerId: import("vue").ComputedRef<string | undefined>;
        headerRole: import("vue").ComputedRef<"heading" | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        ariaDescribedby: {
            type: StringConstructor;
            required: false;
        };
        header: {
            type: StringConstructor;
            required: false;
        };
        headerClass: {
            type: null;
            required: false;
            default: undefined;
        };
        headerTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerVariant: {
            type: null;
            required: false;
        };
    }>>, {
        headerClass: any;
        headerTag: string;
    }>;
    BDropdownHeader: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
    BDropdownItem: import("vue").DefineComponent<{
        href: {
            type: StringConstructor;
            required: false;
        };
        linkClass: {
            type: null;
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        activeBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        emit: (e: "click", value: MouseEvent) => void;
        attrs: {
            [x: string]: unknown;
        };
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            active: boolean;
            disabled: boolean;
        }>;
        tag: import("vue").ComputedRef<"button" | "a" | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        componentAttrs: import("vue").ComputedRef<{
            activeClass?: string | undefined;
            disabled: boolean;
            'aria-current': string | null;
            href: string | null | undefined;
            rel: string;
            type: string | null;
            target: import("../types/LinkTarget").default;
        }>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        href: {
            type: StringConstructor;
            required: false;
        };
        linkClass: {
            type: null;
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: any;
        active: any;
        rel: string;
        target: any;
    }>;
    BDropdownItemButton: import("vue").DefineComponent<{
        buttonClass: {
            type: null;
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        activeBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        emit: (e: "click", value: MouseEvent) => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            disabled: boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            disabled: boolean;
        }>;
        clicked: (e: MouseEvent) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        buttonClass: {
            type: null;
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: any;
        active: any;
        activeClass: string;
    }>;
    BDropdownText: import("vue").DefineComponent<{
        text: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        text: string;
    }>;
    BForm: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: null;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: null;
            required: false;
            default: boolean;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        floatingBoolean: import("vue").ComputedRef<boolean>;
        novalidateBoolean: import("vue").ComputedRef<boolean>;
        validatedBoolean: import("vue").ComputedRef<boolean>;
        emit: (e: "submit", value: Event) => void;
        classes: import("vue").ComputedRef<{
            'form-floating': boolean;
            'was-validated': boolean;
        }>;
        submitted: (e: Event) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "submit"[], "submit", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        floating: {
            type: null;
            required: false;
            default: boolean;
        };
        novalidate: {
            type: null;
            required: false;
            default: boolean;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
    }>> & {
        onSubmit?: ((...args: any[]) => any) | undefined;
    }, {
        floating: any;
        novalidate: any;
        validated: any;
    }>;
    BFormCheckbox: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        indeterminate: {
            type: null;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        switch: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
            default: string;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        uncheckedValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: undefined;
        };
    }, {
        props: any;
        indeterminateBoolean: import("vue").ComputedRef<boolean | undefined>;
        autofocusBoolean: import("vue").ComputedRef<boolean>;
        plainBoolean: import("vue").ComputedRef<boolean>;
        buttonBoolean: import("vue").ComputedRef<boolean>;
        switchBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        inlineBoolean: import("vue").ComputedRef<boolean>;
        requiredBoolean: import("vue").ComputedRef<boolean | undefined>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        emit: {
            (e: "update:modelValue", value: unknown): void;
            (e: "input", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        computedId: import("vue").ComputedRef<string>;
        input: import("vue").Ref<HTMLElement>;
        isFocused: import("vue").Ref<boolean>;
        localValue: import("vue").WritableComputedRef<boolean | unknown[] | Set<unknown> | undefined>;
        isChecked: import("vue").ComputedRef<boolean>;
        classesObject: {
            plain: boolean;
            button: boolean;
            inline: boolean;
            switch: boolean;
            size: import("../types/InputSize").default;
            state: boolean | undefined;
            buttonVariant: import("../types/ButtonVariant").default;
        };
        classes: import("vue").ComputedRef<any>;
        inputClasses: import("vue").ComputedRef<any>;
        labelClasses: import("vue").ComputedRef<any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        indeterminate: {
            type: null;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        switch: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
            default: string;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        uncheckedValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
            required: false;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        id: string;
        required: any;
        modelValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
        button: any;
        disabled: any;
        size: any;
        inline: any;
        state: any;
        autofocus: any;
        plain: any;
        switch: any;
        buttonVariant: any;
        uncheckedValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
        value: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
    }>;
    BFormCheckboxGroup: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        ariaInvalid: {
            type: null;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        size: {
            type: null;
            required: false;
        };
        stacked: {
            type: null;
            required: false;
            default: boolean;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        switches: {
            type: null;
            required: false;
            default: boolean;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        autofocusBoolean: import("vue").ComputedRef<boolean>;
        buttonsBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        plainBoolean: import("vue").ComputedRef<boolean>;
        requiredBoolean: import("vue").ComputedRef<boolean>;
        stackedBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        switchesBoolean: import("vue").ComputedRef<boolean>;
        validatedBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "input", value: (string | number | Record<string, unknown>)[]): void;
            (e: "update:modelValue", value: (string | number | Record<string, unknown>)[]): void;
            (e: "change", value: (string | number | Record<string, unknown>)[]): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        slotsName: string;
        computedId: import("vue").ComputedRef<string>;
        computedName: import("vue").ComputedRef<string>;
        localValue: import("vue").WritableComputedRef<(string | number | Record<string, unknown>)[]>;
        checkboxList: import("vue").ComputedRef<any[]>;
        classesObject: {
            required: boolean;
            ariaInvalid: import("../types/AriaInvalid").default;
            state: boolean | undefined;
            validated: boolean;
            buttons: boolean;
            stacked: boolean;
            size: import("../types/Size").default;
        };
        attrs: import("vue").ComputedRef<any>;
        classes: import("vue").ComputedRef<any>;
        BFormCheckbox: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            indeterminate: {
                type: null;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            autofocus: {
                type: null;
                required: false;
                default: boolean;
            };
            plain: {
                type: null;
                required: false;
                default: boolean;
            };
            button: {
                type: null;
                required: false;
                default: boolean;
            };
            switch: {
                type: null;
                required: false;
                default: boolean;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: null;
                required: false;
                default: boolean;
            };
            required: {
                type: null;
                required: false;
                default: undefined;
            };
            size: {
                type: null;
                required: false;
                default: string;
            };
            state: {
                type: null;
                required: false;
                default: undefined;
            };
            uncheckedValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: undefined;
            };
        }, {
            props: any;
            indeterminateBoolean: import("vue").ComputedRef<boolean | undefined>;
            autofocusBoolean: import("vue").ComputedRef<boolean>;
            plainBoolean: import("vue").ComputedRef<boolean>;
            buttonBoolean: import("vue").ComputedRef<boolean>;
            switchBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            inlineBoolean: import("vue").ComputedRef<boolean>;
            requiredBoolean: import("vue").ComputedRef<boolean | undefined>;
            stateBoolean: import("vue").ComputedRef<boolean | undefined>;
            emit: {
                (e: "update:modelValue", value: unknown): void;
                (e: "input", value: unknown): void;
                (e: "change", value: unknown): void;
            };
            computedId: import("vue").ComputedRef<string>;
            input: import("vue").Ref<HTMLElement>;
            isFocused: import("vue").Ref<boolean>;
            localValue: import("vue").WritableComputedRef<boolean | unknown[] | Set<unknown> | undefined>;
            isChecked: import("vue").ComputedRef<boolean>;
            classesObject: {
                plain: boolean;
                button: boolean;
                inline: boolean;
                switch: boolean;
                size: import("../types/InputSize").default;
                state: boolean | undefined;
                buttonVariant: import("../types/ButtonVariant").default;
            };
            classes: import("vue").ComputedRef<any>;
            inputClasses: import("vue").ComputedRef<any>;
            labelClasses: import("vue").ComputedRef<any>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            indeterminate: {
                type: null;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            autofocus: {
                type: null;
                required: false;
                default: boolean;
            };
            plain: {
                type: null;
                required: false;
                default: boolean;
            };
            button: {
                type: null;
                required: false;
                default: boolean;
            };
            switch: {
                type: null;
                required: false;
                default: boolean;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: null;
                required: false;
                default: boolean;
            };
            required: {
                type: null;
                required: false;
                default: undefined;
            };
            size: {
                type: null;
                required: false;
                default: string;
            };
            state: {
                type: null;
                required: false;
                default: undefined;
            };
            uncheckedValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor | SetConstructor)[];
                required: false;
                default: undefined;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onInput?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
        }, {
            id: string;
            required: any;
            modelValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
            button: any;
            disabled: any;
            size: any;
            inline: any;
            state: any;
            autofocus: any;
            plain: any;
            switch: any;
            buttonVariant: any;
            uncheckedValue: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
            value: string | number | boolean | unknown[] | Record<string, any> | Set<unknown>;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        ariaInvalid: {
            type: null;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        size: {
            type: null;
            required: false;
        };
        stacked: {
            type: null;
            required: false;
            default: boolean;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        switches: {
            type: null;
            required: false;
            default: boolean;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: any;
        modelValue: unknown[];
        disabled: any;
        validated: any;
        state: any;
        autofocus: any;
        plain: any;
        buttonVariant: any;
        ariaInvalid: any;
        buttons: any;
        disabledField: string;
        htmlField: string;
        options: unknown[];
        stacked: any;
        switches: any;
        textField: string;
        valueField: string;
    }>;
    BFormFloatingLabel: import("vue").DefineComponent<{
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
    }>>, {}>;
    BFormGroup: import("vue").DefineComponent<{
        contentCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        description: {
            type: StringConstructor[];
            required: false;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        feedbackAriaLive: {
            type: StringConstructor;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        invalidFeedback: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelAlign: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        labelCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        labelSize: {
            type: StringConstructor;
            required: false;
        };
        labelSrOnly: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        state: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: null;
        };
        tooltip: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        validFeedback: {
            type: StringConstructor;
            required: false;
        };
        validated: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        floating: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
    }, {
        disabledBoolean: import("vue").ComputedRef<boolean>;
        labelSrOnlyBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean>;
        tooltipBoolean: import("vue").ComputedRef<boolean>;
        validatedBoolean: import("vue").ComputedRef<boolean>;
        floatingBoolean: import("vue").ComputedRef<boolean>;
        ariaDescribedby: string | null;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "true" | "false" | "grammar" | "spelling" | undefined>;
        contentColProps: import("vue").ComputedRef<any>;
        isHorizontal: import("vue").ComputedRef<boolean>;
        labelAlignClasses: import("vue").ComputedRef<string[]>;
        labelColProps: import("vue").ComputedRef<any>;
        onLegendClick: (event: MouseEvent) => void;
        stateClass: import("vue").ComputedRef<"is-valid" | "is-invalid" | null>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        contentCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        contentColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        description: {
            type: StringConstructor[];
            required: false;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        feedbackAriaLive: {
            type: StringConstructor;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        invalidFeedback: {
            type: StringConstructor;
            required: false;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelAlign: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelAlignXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelClass: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
        labelCols: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsLg: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsMd: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsSm: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelColsXl: {
            type: (StringConstructor | BooleanConstructor | NumberConstructor)[];
            required: false;
        };
        labelFor: {
            type: StringConstructor;
            required: false;
        };
        labelSize: {
            type: StringConstructor;
            required: false;
        };
        labelSrOnly: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        state: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: null;
        };
        tooltip: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        validFeedback: {
            type: StringConstructor;
            required: false;
        };
        validated: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        floating: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
    }>>, {
        disabled: import("../types/Booleanish").default;
        tooltip: import("../types/Booleanish").default;
        floating: import("../types/Booleanish").default;
        validated: import("../types/Booleanish").default;
        state: import("../types/Booleanish").default;
        feedbackAriaLive: string;
        labelSrOnly: import("../types/Booleanish").default;
    }>;
    BFormInput: import("vue").DefineComponent<{
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        min: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        step: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        type: {
            type: import("vue").PropType<import("../types/InputType").default>;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaInvalid: {
            type: import("vue").PropType<import("../types/AriaInvalid").default>;
            default: undefined;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'form-range': boolean;
            'form-control': boolean;
            'form-control-color': boolean;
            'form-control-plaintext': boolean;
            'is-valid': boolean;
            'is-invalid': boolean;
        }>;
        localType: import("vue").ComputedRef<import("../types/InputType").default>;
        input: import("vue").Ref<HTMLInputElement | undefined>;
        computedId: import("vue").ComputedRef<string>;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "true" | "false" | "grammar" | "spelling" | undefined>;
        onInput: (evt: Event) => void;
        onChange: (evt: Event) => void;
        onBlur: (evt: FocusEvent) => void;
        focus: () => void;
        blur: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change" | "blur")[], "update:modelValue" | "input" | "change" | "blur", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        min: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        step: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        type: {
            type: import("vue").PropType<import("../types/InputType").default>;
            default: string;
            validator: (value: string) => boolean;
        };
        ariaInvalid: {
            type: import("vue").PropType<import("../types/AriaInvalid").default>;
            default: undefined;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
    }, {
        number: boolean;
        trim: boolean;
        required: boolean;
        type: import("../types/InputType").default;
        modelValue: string | number;
        disabled: boolean;
        plaintext: boolean;
        lazy: boolean;
        state: boolean | null | undefined;
        autofocus: boolean;
        ariaInvalid: import("../types/AriaInvalid").default;
        lazyFormatter: boolean;
        readonly: boolean;
    }>;
    BFormInvalidFeedback: import("vue").DefineComponent<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        forceShowBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        tooltipBoolean: import("vue").ComputedRef<boolean>;
        computedShow: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'd-block': boolean;
            'invalid-feedback': boolean;
            'invalid-tooltip': boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            id: string | undefined;
            role: string | undefined;
            'aria-live': string | undefined;
            'aria-atomic': string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        tag: string;
        tooltip: any;
        forceShow: any;
        state: any;
    }>;
    BFormRadio: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        switch: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        autofocusBoolean: import("vue").ComputedRef<boolean>;
        plainBoolean: import("vue").ComputedRef<boolean>;
        buttonBoolean: import("vue").ComputedRef<boolean>;
        switchBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        inlineBoolean: import("vue").ComputedRef<boolean>;
        requiredBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        emit: {
            (e: "input", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
            (e: "change", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
            (e: "update:modelValue", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
        };
        computedId: import("vue").ComputedRef<string>;
        input: import("vue").Ref<HTMLElement>;
        isFocused: import("vue").Ref<boolean>;
        localValue: import("vue").WritableComputedRef<unknown>;
        isChecked: import("vue").ComputedRef<unknown>;
        classesObject: {
            plain: boolean;
            button: boolean;
            inline: boolean;
            switch: boolean;
            size: import("../types/InputSize").default | undefined;
            state: boolean | undefined;
            buttonVariant: import("../types/ButtonVariant").default;
        };
        classes: import("vue").ComputedRef<any>;
        inputClasses: import("vue").ComputedRef<any>;
        labelClasses: import("vue").ComputedRef<any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
        };
        ariaLabelledBy: {
            type: StringConstructor;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: undefined;
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        switch: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        inline: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        value: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
            required: false;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: any;
        modelValue: string | number | boolean | unknown[] | Record<string, any>;
        button: any;
        disabled: any;
        inline: any;
        state: any;
        autofocus: any;
        plain: any;
        switch: any;
        buttonVariant: any;
        value: string | number | boolean | Record<string, any>;
    }>;
    BFormRadioGroup: import("vue").DefineComponent<{
        size: {
            type: null;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
        ariaInvalid: {
            type: null;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        stacked: {
            type: null;
            required: false;
            default: boolean;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        autofocusBoolean: import("vue").ComputedRef<boolean>;
        buttonsBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        plainBoolean: import("vue").ComputedRef<boolean>;
        requiredBoolean: import("vue").ComputedRef<boolean>;
        stackedBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        validatedBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "input", value: unknown): void;
            (e: "update:modelValue", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        slotsName: string;
        computedId: import("vue").ComputedRef<string>;
        computedName: import("vue").ComputedRef<string>;
        localValue: import("vue").WritableComputedRef<string | number | boolean | unknown[] | Record<string, unknown>>;
        checkboxList: import("vue").ComputedRef<any[]>;
        classesObject: {
            required: boolean;
            ariaInvalid: import("../types/AriaInvalid").default;
            state: boolean | undefined;
            validated: boolean;
            buttons: boolean;
            stacked: boolean;
            size: import("../types/Size").default;
        };
        attrs: import("vue").ComputedRef<any>;
        classes: import("vue").ComputedRef<any>;
        BFormRadio: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            autofocus: {
                type: null;
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
                required: false;
                default: undefined;
            };
            plain: {
                type: null;
                required: false;
                default: boolean;
            };
            button: {
                type: null;
                required: false;
                default: boolean;
            };
            switch: {
                type: null;
                required: false;
                default: boolean;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: null;
                required: false;
                default: boolean;
            };
            required: {
                type: null;
                required: false;
                default: boolean;
            };
            state: {
                type: null;
                required: false;
                default: undefined;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            autofocusBoolean: import("vue").ComputedRef<boolean>;
            plainBoolean: import("vue").ComputedRef<boolean>;
            buttonBoolean: import("vue").ComputedRef<boolean>;
            switchBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            inlineBoolean: import("vue").ComputedRef<boolean>;
            requiredBoolean: import("vue").ComputedRef<boolean>;
            stateBoolean: import("vue").ComputedRef<boolean | undefined>;
            emit: {
                (e: "input", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
                (e: "change", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
                (e: "update:modelValue", value: string | number | boolean | unknown[] | Record<string, unknown>): void;
            };
            computedId: import("vue").ComputedRef<string>;
            input: import("vue").Ref<HTMLElement>;
            isFocused: import("vue").Ref<boolean>;
            localValue: import("vue").WritableComputedRef<unknown>;
            isChecked: import("vue").ComputedRef<unknown>;
            classesObject: {
                plain: boolean;
                button: boolean;
                inline: boolean;
                switch: boolean;
                size: import("../types/InputSize").default | undefined;
                state: boolean | undefined;
                buttonVariant: import("../types/ButtonVariant").default;
            };
            classes: import("vue").ComputedRef<any>;
            inputClasses: import("vue").ComputedRef<any>;
            labelClasses: import("vue").ComputedRef<any>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
            };
            ariaLabelledBy: {
                type: StringConstructor;
                required: false;
            };
            form: {
                type: StringConstructor;
                required: false;
            };
            id: {
                type: StringConstructor;
                required: false;
            };
            name: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            autofocus: {
                type: null;
                required: false;
                default: boolean;
            };
            modelValue: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
                required: false;
                default: undefined;
            };
            plain: {
                type: null;
                required: false;
                default: boolean;
            };
            button: {
                type: null;
                required: false;
                default: boolean;
            };
            switch: {
                type: null;
                required: false;
                default: boolean;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            buttonVariant: {
                type: null;
                required: false;
                default: string;
            };
            inline: {
                type: null;
                required: false;
                default: boolean;
            };
            required: {
                type: null;
                required: false;
                default: boolean;
            };
            state: {
                type: null;
                required: false;
                default: undefined;
            };
            value: {
                type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor)[];
                required: false;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onInput?: ((...args: any[]) => any) | undefined;
            onChange?: ((...args: any[]) => any) | undefined;
        }, {
            required: any;
            modelValue: string | number | boolean | unknown[] | Record<string, any>;
            button: any;
            disabled: any;
            inline: any;
            state: any;
            autofocus: any;
            plain: any;
            switch: any;
            buttonVariant: any;
            value: string | number | boolean | Record<string, any>;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        size: {
            type: null;
            required: false;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        modelValue: {
            type: (StringConstructor | BooleanConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
        ariaInvalid: {
            type: null;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonVariant: {
            type: null;
            required: false;
            default: string;
        };
        buttons: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        stacked: {
            type: null;
            required: false;
            default: boolean;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        validated: {
            type: null;
            required: false;
            default: boolean;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: any;
        modelValue: string | number | boolean | unknown[] | Record<string, any>;
        disabled: any;
        validated: any;
        state: any;
        autofocus: any;
        plain: any;
        buttonVariant: any;
        ariaInvalid: any;
        buttons: any;
        disabledField: string;
        htmlField: string;
        options: unknown[];
        stacked: any;
        textField: string;
        valueField: string;
    }>;
    BFormRow: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BFormSelect: import("vue").DefineComponent<{
        ariaInvalid: {
            type: null;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        labelField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        multiple: {
            type: null;
            required: false;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        optionsField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        selectSize: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        size: {
            type: null;
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: (StringConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
    }, {
        props: any;
        autofocusBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        multipleBoolean: import("vue").ComputedRef<boolean>;
        plainBoolean: import("vue").ComputedRef<boolean>;
        requiredBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        emit: {
            (e: "input", value: unknown): void;
            (e: "update:modelValue", value: unknown): void;
            (e: "change", value: unknown): void;
        };
        input: import("vue").Ref<HTMLElement | undefined>;
        computedId: import("vue").ComputedRef<string>;
        handleAutofocus: () => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | undefined;
            'form-control': boolean;
            'form-select': boolean;
            'is-valid': boolean;
            'is-invalid': boolean;
        }>;
        computedSelectSize: import("vue").ComputedRef<number | undefined>;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "true" | "false" | "grammar" | "spelling" | undefined>;
        formOptions: import("vue").ComputedRef<any>;
        localValue: import("vue").WritableComputedRef<any>;
        focus: () => void;
        blur: () => void;
        BFormSelectOption: import("vue").DefineComponent<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            disabledBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            disabled: any;
        }>;
        BFormSelectOptionGroup: import("vue").DefineComponent<{
            label: {
                type: StringConstructor;
                required: false;
            };
            disabledField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            htmlField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: (ObjectConstructor | ArrayConstructor)[];
                required: false;
                default: () => never[];
            };
            textField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            valueField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {
            props: any;
            formOptions: import("vue").ComputedRef<any>;
            BFormSelectOption: import("vue").DefineComponent<{
                value: {
                    type: null;
                    required: false;
                };
                disabled: {
                    type: null;
                    required: false;
                    default: boolean;
                };
            }, {
                props: any;
                disabledBoolean: import("vue").ComputedRef<boolean>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                value: {
                    type: null;
                    required: false;
                };
                disabled: {
                    type: null;
                    required: false;
                    default: boolean;
                };
            }>>, {
                disabled: any;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
            };
            disabledField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            htmlField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            options: {
                type: (ObjectConstructor | ArrayConstructor)[];
                required: false;
                default: () => never[];
            };
            textField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            valueField: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            disabledField: string;
            htmlField: string;
            options: unknown[] | Record<string, any>;
            textField: string;
            valueField: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change")[], "update:modelValue" | "input" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaInvalid: {
            type: null;
            required: false;
            default: undefined;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        labelField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        multiple: {
            type: null;
            required: false;
            default: boolean;
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        optionsField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        plain: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        selectSize: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        size: {
            type: null;
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: (StringConstructor | ObjectConstructor | NumberConstructor | ArrayConstructor)[];
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        required: any;
        modelValue: string | number | unknown[] | Record<string, any>;
        disabled: any;
        multiple: any;
        state: any;
        autofocus: any;
        plain: any;
        ariaInvalid: any;
        disabledField: string;
        htmlField: string;
        options: unknown[] | Record<string, any>;
        textField: string;
        valueField: string;
        labelField: string;
        optionsField: string;
        selectSize: number;
    }>;
    BFormSelectOption: import("vue").DefineComponent<{
        value: {
            type: null;
            required: false;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        disabledBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        value: {
            type: null;
            required: false;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        disabled: any;
    }>;
    BFormSelectOptionGroup: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
            required: false;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        formOptions: import("vue").ComputedRef<any>;
        BFormSelectOption: import("vue").DefineComponent<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            disabledBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            value: {
                type: null;
                required: false;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            disabled: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
        };
        disabledField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        htmlField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        options: {
            type: (ObjectConstructor | ArrayConstructor)[];
            required: false;
            default: () => never[];
        };
        textField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        valueField: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        disabledField: string;
        htmlField: string;
        options: unknown[] | Record<string, any>;
        textField: string;
        valueField: string;
    }>;
    BFormText: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        inline: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textVariant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        inlineBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'form-text': boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            id: string | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        inline: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        textVariant: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        textVariant: any;
        inline: any;
    }>;
    BFormTextarea: import("vue").DefineComponent<{
        noResize: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        rows: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        wrap: {
            type: StringConstructor;
            default: string;
        };
        ariaInvalid: {
            type: import("vue").PropType<import("../types/AriaInvalid").default>;
            default: undefined;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        input: import("vue").Ref<HTMLInputElement | undefined>;
        computedId: import("vue").ComputedRef<string>;
        computedAriaInvalid: import("vue").ComputedRef<boolean | "true" | "false" | "grammar" | "spelling" | undefined>;
        onInput: (evt: Event) => void;
        onChange: (evt: Event) => void;
        onBlur: (evt: FocusEvent) => void;
        focus: () => void;
        blur: () => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'form-control': boolean;
            'form-control-plaintext': boolean;
            'is-valid': boolean;
            'is-invalid': boolean;
        }>;
        computedStyles: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "change" | "blur")[], "update:modelValue" | "input" | "change" | "blur", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        noResize: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        rows: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        wrap: {
            type: StringConstructor;
            default: string;
        };
        ariaInvalid: {
            type: import("vue").PropType<import("../types/AriaInvalid").default>;
            default: undefined;
        };
        autocomplete: {
            type: StringConstructor;
            required: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        form: {
            type: StringConstructor;
            required: boolean;
        };
        formatter: {
            type: FunctionConstructor;
            required: boolean;
        };
        id: {
            type: StringConstructor;
            required: boolean;
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        lazyFormatter: {
            type: BooleanConstructor;
            default: boolean;
        };
        list: {
            type: StringConstructor;
            required: boolean;
        };
        modelValue: {
            type: import("vue").PropType<string | number>;
            default: string;
        };
        name: {
            type: StringConstructor;
            required: boolean;
        };
        number: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: boolean;
        };
        plaintext: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        required: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: import("vue").PropType<import("../types/Size").default>;
            required: boolean;
        };
        state: {
            type: import("vue").PropType<boolean | null | undefined>;
            default: null;
        };
        trim: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
    }, {
        number: boolean;
        trim: boolean;
        required: boolean;
        modelValue: string | number;
        disabled: boolean;
        wrap: string;
        plaintext: boolean;
        lazy: boolean;
        state: boolean | null | undefined;
        autofocus: boolean;
        ariaInvalid: import("../types/AriaInvalid").default;
        lazyFormatter: boolean;
        readonly: boolean;
        noResize: import("../types/Booleanish").default;
        rows: string | number;
    }>;
    BFormTag: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        noRemove: {
            type: null;
            required: false;
            default: boolean;
        };
        pill: {
            type: null;
            required: false;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        noRemoveBoolean: import("vue").ComputedRef<boolean>;
        pillBoolean: import("vue").ComputedRef<boolean>;
        emit: (e: "remove", value?: import("vue").VNodeNormalizedChildren | undefined) => void;
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        tagText: import("vue").ComputedRef<string>;
        computedId: import("vue").ComputedRef<string>;
        taglabelId: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<(string | {
            'text-dark': boolean;
            'rounded-pill': boolean;
            disabled: boolean;
        })[]>;
        BCloseButton: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            emit: (e: "click", value: MouseEvent) => void;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            whiteBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                'btn-close-white': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            type: any;
            ariaLabel: string;
            disabled: any;
            white: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        noRemove: {
            type: null;
            required: false;
            default: boolean;
        };
        pill: {
            type: null;
            required: false;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onRemove?: ((...args: any[]) => any) | undefined;
    }, {
        tag: string;
        variant: any;
        disabled: any;
        pill: any;
        noRemove: any;
        removeLabel: string;
    }>;
    BFormTags: import("vue").DefineComponent<{
        addButtonText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        addButtonVariant: {
            type: null;
            required: false;
            default: string;
        };
        addOnChange: {
            type: null;
            required: false;
            default: boolean;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        duplicateTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        inputAttrs: {
            type: ObjectConstructor;
            required: false;
        };
        inputClass: {
            type: null;
            required: false;
        };
        inputId: {
            type: StringConstructor;
            required: false;
        };
        inputType: {
            type: null;
            required: false;
            default: string;
        };
        invalidTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        limit: {
            type: NumberConstructor;
            required: false;
        };
        limitTagsText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        noAddOnEnter: {
            type: null;
            required: false;
            default: boolean;
        };
        noOuterFocus: {
            type: null;
            required: false;
            default: boolean;
        };
        noTagRemove: {
            type: null;
            required: false;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        removeOnDelete: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        separator: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
        };
        tagClass: {
            type: null;
            required: false;
        };
        tagPills: {
            type: null;
            required: false;
            default: boolean;
        };
        tagRemoveLabel: {
            type: StringConstructor;
            required: false;
        };
        tagRemovedLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tagValidator: {
            type: FunctionConstructor;
            required: false;
            default: () => boolean;
        };
        tagVariant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        addOnChangeBoolean: import("vue").ComputedRef<boolean>;
        autofocusBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        noAddOnEnterBoolean: import("vue").ComputedRef<boolean>;
        noOuterFocusBoolean: import("vue").ComputedRef<boolean>;
        noTagRemoveBoolean: import("vue").ComputedRef<boolean>;
        removeOnDeleteBoolean: import("vue").ComputedRef<boolean>;
        requiredBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        tagPillsBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "update:modelValue", value: string[]): void;
            (e: "input", value: string[]): void;
            (e: "tag-state", ...args: string[][]): void;
            (e: "focus", value: FocusEvent): void;
            (e: "focusin", value: FocusEvent): void;
            (e: "focusout", value: FocusEvent): void;
            (e: "blur", value: FocusEvent): void;
        };
        input: import("vue").Ref<HTMLInputElement | null>;
        computedId: import("vue").ComputedRef<string>;
        _inputId: import("vue").ComputedRef<string>;
        tags: import("vue").Ref<string[]>;
        inputValue: import("vue").Ref<string>;
        shouldRemoveOnDelete: import("vue").Ref<boolean>;
        focus: import("vue").Ref<boolean>;
        lastRemovedTag: import("vue").Ref<string>;
        validTags: import("vue").Ref<string[]>;
        invalidTags: import("vue").Ref<string[]>;
        duplicateTags: import("vue").Ref<string[]>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            disabled: boolean;
            focus: boolean;
            'is-invalid': boolean;
            'is-valid': boolean;
        }>;
        isDuplicate: import("vue").ComputedRef<boolean>;
        isInvalid: import("vue").ComputedRef<boolean>;
        isLimitReached: import("vue").ComputedRef<boolean>;
        disableAddButton: import("vue").ComputedRef<boolean>;
        checkAutofocus: () => void;
        onFocusin: (e: FocusEvent) => void;
        onFocus: (e: FocusEvent) => void;
        onBlur: (e: FocusEvent) => void;
        onInput: (e: string | Event) => void;
        onChange: (e: Event) => void;
        onKeydown: (e: KeyboardEvent) => void;
        addTag: (tag?: string | undefined) => void;
        removeTag: (tag?: import("vue").VNodeNormalizedChildren | undefined) => void;
        slotAttrs: import("vue").ComputedRef<{
            addButtonText: string;
            addButtonVariant: import("../types/ButtonVariant").default;
            addTag: (tag?: string | undefined) => void;
            disableAddButton: import("vue").ComputedRef<boolean>;
            disabled: boolean;
            duplicateTagText: string;
            duplicateTags: import("vue").Ref<string[]>;
            form: string | undefined;
            inputAttrs: {
                disabled: boolean;
                form: string | undefined;
                id: import("vue").ComputedRef<string>;
                value: import("vue").Ref<string>;
            };
            inputHandlers: {
                input: (e: string | Event) => void;
                keydown: (e: KeyboardEvent) => void;
                change: (e: Event) => void;
            };
            inputId: import("vue").ComputedRef<string>;
            inputType: import("../types/InputType").default;
            invalidTagText: string;
            invalidTags: import("vue").Ref<string[]>;
            isDuplicate: import("vue").ComputedRef<boolean>;
            isInvalid: import("vue").ComputedRef<boolean>;
            isLimitReached: import("vue").ComputedRef<boolean>;
            limitTagsText: string;
            limit: number | undefined;
            noTagRemove: boolean;
            placeholder: string;
            removeTag: (tag?: import("vue").VNodeNormalizedChildren | undefined) => void;
            required: boolean;
            separator: string | unknown[] | undefined;
            size: import("../types/InputSize").default | undefined;
            state: boolean | undefined;
            tagClass: import("../types/ClassValue").default | undefined;
            tagPills: boolean;
            tagRemoveLabel: string | undefined;
            tagVariant: import("../types/ColorVariant").default;
            tags: import("vue").Ref<string[]>;
        }>;
        BFormTag: import("vue").DefineComponent<{
            id: {
                type: StringConstructor;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            noRemove: {
                type: null;
                required: false;
                default: boolean;
            };
            pill: {
                type: null;
                required: false;
                default: boolean;
            };
            removeLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            noRemoveBoolean: import("vue").ComputedRef<boolean>;
            pillBoolean: import("vue").ComputedRef<boolean>;
            emit: (e: "remove", value?: import("vue").VNodeNormalizedChildren | undefined) => void;
            slots: Readonly<{
                [name: string]: import("vue").Slot | undefined;
            }>;
            tagText: import("vue").ComputedRef<string>;
            computedId: import("vue").ComputedRef<string>;
            taglabelId: import("vue").ComputedRef<string>;
            classes: import("vue").ComputedRef<(string | {
                'text-dark': boolean;
                'rounded-pill': boolean;
                disabled: boolean;
            })[]>;
            BCloseButton: import("vue").DefineComponent<{
                ariaLabel: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                disabled: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                white: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                type: {
                    type: null;
                    required: false;
                    default: string;
                };
            }, {
                props: any;
                emit: (e: "click", value: MouseEvent) => void;
                disabledBoolean: import("vue").ComputedRef<boolean>;
                whiteBoolean: import("vue").ComputedRef<boolean>;
                classes: import("vue").ComputedRef<{
                    'btn-close-white': boolean;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                ariaLabel: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                disabled: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                white: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                type: {
                    type: null;
                    required: false;
                    default: string;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
            }, {
                type: any;
                ariaLabel: string;
                disabled: any;
                white: any;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: StringConstructor;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            noRemove: {
                type: null;
                required: false;
                default: boolean;
            };
            pill: {
                type: null;
                required: false;
                default: boolean;
            };
            removeLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onRemove?: ((...args: any[]) => any) | undefined;
        }, {
            tag: string;
            variant: any;
            disabled: any;
            pill: any;
            noRemove: any;
            removeLabel: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "blur" | "tag-state" | "focus" | "focusin" | "focusout")[], "update:modelValue" | "input" | "blur" | "focus" | "tag-state" | "focusin" | "focusout", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        addButtonText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        addButtonVariant: {
            type: null;
            required: false;
            default: string;
        };
        addOnChange: {
            type: null;
            required: false;
            default: boolean;
        };
        autofocus: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        duplicateTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        inputAttrs: {
            type: ObjectConstructor;
            required: false;
        };
        inputClass: {
            type: null;
            required: false;
        };
        inputId: {
            type: StringConstructor;
            required: false;
        };
        inputType: {
            type: null;
            required: false;
            default: string;
        };
        invalidTagText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        form: {
            type: StringConstructor;
            required: false;
        };
        limit: {
            type: NumberConstructor;
            required: false;
        };
        limitTagsText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        name: {
            type: StringConstructor;
            required: false;
        };
        noAddOnEnter: {
            type: null;
            required: false;
            default: boolean;
        };
        noOuterFocus: {
            type: null;
            required: false;
            default: boolean;
        };
        noTagRemove: {
            type: null;
            required: false;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        removeOnDelete: {
            type: null;
            required: false;
            default: boolean;
        };
        required: {
            type: null;
            required: false;
            default: boolean;
        };
        separator: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        size: {
            type: null;
            required: false;
        };
        tagClass: {
            type: null;
            required: false;
        };
        tagPills: {
            type: null;
            required: false;
            default: boolean;
        };
        tagRemoveLabel: {
            type: StringConstructor;
            required: false;
        };
        tagRemovedLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tagValidator: {
            type: FunctionConstructor;
            required: false;
            default: () => boolean;
        };
        tagVariant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onInput?: ((...args: any[]) => any) | undefined;
        onBlur?: ((...args: any[]) => any) | undefined;
        "onTag-state"?: ((...args: any[]) => any) | undefined;
        onFocus?: ((...args: any[]) => any) | undefined;
        onFocusin?: ((...args: any[]) => any) | undefined;
        onFocusout?: ((...args: any[]) => any) | undefined;
    }, {
        required: any;
        modelValue: unknown[];
        disabled: any;
        state: any;
        autofocus: any;
        placeholder: string;
        addButtonText: string;
        addButtonVariant: any;
        addOnChange: any;
        duplicateTagText: string;
        inputType: any;
        invalidTagText: string;
        limitTagsText: string;
        noAddOnEnter: any;
        noOuterFocus: any;
        noTagRemove: any;
        removeOnDelete: any;
        tagPills: any;
        tagRemovedLabel: string;
        tagValidator: Function;
        tagVariant: any;
    }>;
    BFormValidFeedback: import("vue").DefineComponent<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        forceShowBoolean: import("vue").ComputedRef<boolean>;
        stateBoolean: import("vue").ComputedRef<boolean | undefined>;
        tooltipBoolean: import("vue").ComputedRef<boolean>;
        computedShow: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'd-block': boolean;
            'valid-feedback': boolean;
            'valid-tooltip': boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            id: string | null;
            role: string | null;
            'aria-live': string | null;
            'aria-atomic': string | null;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLive: {
            type: StringConstructor;
            required: false;
        };
        forceShow: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        state: {
            type: null;
            required: false;
            default: undefined;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tooltip: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        tag: string;
        tooltip: any;
        forceShow: any;
        state: any;
    }>;
    BImg: import("vue").DefineComponent<{
        alt: {
            type: StringConstructor;
            required: false;
        };
        blank: {
            type: null;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        center: {
            type: null;
            required: false;
            default: boolean;
        };
        fluid: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        fluidGrow: {
            type: null;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: null;
            required: false;
            default: boolean;
        };
        start: {
            type: null;
            required: false;
            default: boolean;
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        thumbnail: {
            type: null;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }, {
        props: any;
        emit: (e: "load", value: Event) => void;
        lazyBoolean: import("vue").ComputedRef<boolean>;
        blankBoolean: import("vue").ComputedRef<boolean>;
        blockBoolean: import("vue").ComputedRef<boolean>;
        centerBoolean: import("vue").ComputedRef<boolean>;
        fluidBoolean: import("vue").ComputedRef<boolean>;
        fluidGrowBoolean: import("vue").ComputedRef<boolean>;
        leftBoolean: import("vue").ComputedRef<boolean>;
        startBoolean: import("vue").ComputedRef<boolean>;
        rightBoolean: import("vue").ComputedRef<boolean>;
        endBoolean: import("vue").ComputedRef<boolean>;
        thumbnailBoolean: import("vue").ComputedRef<boolean>;
        BLANK_TEMPLATE: string;
        makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
        computedSrcset: import("vue").ComputedRef<string | undefined>;
        computedSizes: import("vue").ComputedRef<string | undefined>;
        computedDimentions: import("vue").ComputedRef<{
            height: number | undefined;
            width: number | undefined;
        }>;
        computedBlankImgSrc: import("vue").ComputedRef<string>;
        attrs: import("vue").ComputedRef<{
            src: string | undefined;
            alt: string | undefined;
            width: number | undefined;
            height: number | undefined;
            srcset: string | undefined;
            sizes: string | undefined;
            loading: string;
        }>;
        alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'img-thumbnail': boolean;
            'img-fluid': boolean;
            'w-100': boolean;
            rounded: boolean;
            'd-block': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        alt: {
            type: StringConstructor;
            required: false;
        };
        blank: {
            type: null;
            required: false;
            default: boolean;
        };
        blankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        block: {
            type: null;
            required: false;
            default: boolean;
        };
        center: {
            type: null;
            required: false;
            default: boolean;
        };
        fluid: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        fluidGrow: {
            type: null;
            required: false;
            default: boolean;
        };
        height: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        left: {
            type: null;
            required: false;
            default: boolean;
        };
        start: {
            type: null;
            required: false;
            default: boolean;
        };
        right: {
            type: null;
            required: false;
            default: boolean;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        sizes: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        src: {
            type: StringConstructor;
            required: false;
        };
        srcset: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
        thumbnail: {
            type: null;
            required: false;
            default: boolean;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
    }>> & {
        onLoad?: ((...args: any[]) => any) | undefined;
    }, {
        rounded: string | boolean;
        left: any;
        right: any;
        center: any;
        end: any;
        start: any;
        block: any;
        blank: any;
        blankColor: string;
        lazy: any;
        fluid: any;
        fluidGrow: any;
        thumbnail: any;
    }>;
    BInputGroup: import("vue").DefineComponent<{
        append: {
            type: StringConstructor;
            required: false;
        };
        appendHtml: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        prepend: {
            type: StringConstructor;
            required: false;
        };
        prependHtml: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<{
            'input-group-sm': boolean;
            'input-group-lg': boolean;
        }>;
        hasAppend: import("vue").ComputedRef<boolean>;
        hasPrepend: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        append: {
            type: StringConstructor;
            required: false;
        };
        appendHtml: {
            type: StringConstructor;
            required: false;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        prepend: {
            type: StringConstructor;
            required: false;
        };
        prependHtml: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
    }>;
    BInputGroupAddon: import("vue").DefineComponent<{
        isText: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        isTextBoolean: import("vue").ComputedRef<boolean>;
        BInputGroupText: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
        }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        isText: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        isText: any;
    }>;
    BInputGroupAppend: import("vue").DefineComponent<{
        isText: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        BInputGroupAddon: import("vue").DefineComponent<{
            isText: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            isTextBoolean: import("vue").ComputedRef<boolean>;
            BInputGroupText: import("vue").DefineComponent<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                text: {
                    type: StringConstructor;
                    required: false;
                };
            }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                text: {
                    type: StringConstructor;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            isText: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            isText: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        isText: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        isText: any;
    }>;
    BInputGroupPrepend: import("vue").DefineComponent<{
        isText: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        BInputGroupAddon: import("vue").DefineComponent<{
            isText: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            isTextBoolean: import("vue").ComputedRef<boolean>;
            BInputGroupText: import("vue").DefineComponent<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                text: {
                    type: StringConstructor;
                    required: false;
                };
            }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                text: {
                    type: StringConstructor;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            isText: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            isText: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        isText: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        isText: any;
    }>;
    BInputGroupText: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
    }>>, {
        tag: string;
    }>;
    BLink: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        tag: import("vue").ComputedRef<string>;
        routerAttr: import("vue").ComputedRef<{
            to: import("vue-router").RouteLocationRaw;
            href: string;
            target: import("../types/LinkTarget").default;
            rel: string | null;
            tabindex: unknown;
            'aria-disabled': string | null;
        }>;
        link: import("vue").Ref<HTMLElement>;
        clicked: (e: MouseEvent) => void;
        activeBoolean: import("vue").ComputedRef<boolean>;
        appendBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        replaceBoolean: import("vue").ComputedRef<boolean>;
        exactBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        replace: import("../types/Booleanish").default;
        disabled: import("../types/Booleanish").default;
        exact: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        event: string | unknown[];
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        routerTag: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
    }>;
    BListGroup: import("vue").DefineComponent<{
        flush: {
            type: null;
            required: false;
            default: boolean;
        };
        horizontal: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        numbered: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BListGroupParentData>;
        props: any;
        flushBoolean: import("vue").ComputedRef<boolean>;
        numberedBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'list-group-flush': boolean;
            'list-group-horizontal': boolean;
            'list-group-numbered': boolean;
        }>;
        computedTag: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        flush: {
            type: null;
            required: false;
            default: boolean;
        };
        horizontal: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        numbered: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        flush: any;
        tag: string;
        horizontal: string | boolean;
        numbered: any;
    }>;
    BListGroupItem: import("vue").DefineComponent<{
        action: {
            type: null;
            required: false;
            default: boolean;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        to: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        actionBoolean: import("vue").ComputedRef<boolean>;
        activeBoolean: import("vue").ComputedRef<boolean>;
        buttonBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        attrs: {
            [x: string]: unknown;
        };
        parentData: import("../types/components").BListGroupParentData | null;
        link: import("vue").ComputedRef<boolean>;
        tagComputed: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'list-group-item-action': boolean;
            active: boolean;
            disabled: boolean;
        }>;
        computedAttrs: import("vue").ComputedRef<{
            type?: string | undefined;
            disabled?: boolean | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        action: {
            type: null;
            required: false;
            default: boolean;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        button: {
            type: null;
            required: false;
            default: boolean;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: null;
            required: false;
            default: string;
        };
        to: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
        button: any;
        disabled: any;
        active: any;
        target: any;
        action: any;
    }>;
    BModal: import("vue").DefineComponent<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: null;
            required: false;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        busy: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonSize: {
            type: null;
            required: false;
            default: string;
        };
        cancelDisabled: {
            type: null;
            required: false;
            default: boolean;
        };
        cancelTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        cancelVariant: {
            type: null;
            required: false;
            default: string;
        };
        centered: {
            type: null;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: null;
            required: false;
        };
        dialogClass: {
            type: null;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: null;
            required: false;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        fullscreen: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: null;
            required: false;
        };
        headerCloseLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerCloseWhite: {
            type: null;
            required: false;
            default: boolean;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        hideBackdrop: {
            type: null;
            required: false;
            default: boolean;
        };
        hideFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        hideHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        hideHeaderClose: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        modalClass: {
            type: null;
            required: false;
        };
        modelValue: {
            type: null;
            required: false;
            default: boolean;
        };
        noCloseOnBackdrop: {
            type: null;
            required: false;
            default: boolean;
        };
        noCloseOnEsc: {
            type: null;
            required: false;
            default: boolean;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        noFocus: {
            type: null;
            required: false;
            default: boolean;
        };
        okDisabled: {
            type: null;
            required: false;
            default: boolean;
        };
        okOnly: {
            type: null;
            required: false;
            default: boolean;
        };
        okTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        okVariant: {
            type: null;
            required: false;
            default: string;
        };
        scrollable: {
            type: null;
            required: false;
            default: boolean;
        };
        show: {
            type: null;
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleClass: {
            type: StringConstructor;
            required: false;
        };
        titleSrOnly: {
            type: null;
            required: false;
            default: boolean;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        busyBoolean: import("vue").ComputedRef<boolean>;
        lazyBoolean: import("vue").ComputedRef<boolean>;
        cancelDisabledBoolean: import("vue").ComputedRef<boolean>;
        centeredBoolean: import("vue").ComputedRef<boolean>;
        headerCloseWhiteBoolean: import("vue").ComputedRef<boolean>;
        hideBackdropBoolean: import("vue").ComputedRef<boolean>;
        hideFooterBoolean: import("vue").ComputedRef<boolean>;
        hideHeaderBoolean: import("vue").ComputedRef<boolean>;
        hideHeaderCloseBoolean: import("vue").ComputedRef<boolean>;
        modelValueBoolean: import("vue").ComputedRef<boolean>;
        noCloseOnBackdropBoolean: import("vue").ComputedRef<boolean>;
        noCloseOnEscBoolean: import("vue").ComputedRef<boolean>;
        noFadeBoolean: import("vue").ComputedRef<boolean>;
        noFocusBoolean: import("vue").ComputedRef<boolean>;
        okDisabledBoolean: import("vue").ComputedRef<boolean>;
        okOnlyBoolean: import("vue").ComputedRef<boolean>;
        scrollableBoolean: import("vue").ComputedRef<boolean>;
        showBoolean: import("vue").ComputedRef<boolean>;
        titleSrOnlyBoolean: import("vue").ComputedRef<boolean>;
        lazyLoadCompleted: import("vue").Ref<boolean>;
        computedId: import("vue").ComputedRef<string>;
        emit: {
            (e: "update:modelValue", value: boolean): void;
            (e: "show", value: Event): void;
            (e: "shown", value: Event): void;
            (e: "hide", value: Event): void;
            (e: "hidden", value: Event): void;
            (e: "hide-prevented", value: Event): void;
            (e: "ok"): void;
            (e: "cancel"): void;
        };
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/modal").default | undefined>;
        modalClasses: import("vue").ComputedRef<(import("../types/ClassValue").default | undefined)[]>;
        modalDialogClasses: import("vue").ComputedRef<(import("../types/ClassValue").default | undefined)[]>;
        computedBodyClasses: import("vue").ComputedRef<(string | (string | Record<string, boolean | null | undefined>)[] | Record<string, boolean | null | undefined> | {
            [x: string]: import("../types/ColorVariant").default | undefined;
        } | undefined)[]>;
        computedHeaderClasses: import("vue").ComputedRef<(string | (string | Record<string, boolean | null | undefined>)[] | Record<string, boolean | null | undefined> | {
            [x: string]: import("../types/ColorVariant").default | undefined;
        } | undefined)[]>;
        computedFooterClasses: import("vue").ComputedRef<(string | (string | Record<string, boolean | null | undefined>)[] | Record<string, boolean | null | undefined> | {
            [x: string]: import("../types/ColorVariant").default | undefined;
        } | undefined)[]>;
        computedTitleClasses: import("vue").ComputedRef<(string | {
            "visually-hidden": boolean;
        } | undefined)[]>;
        disableCancel: import("vue").ComputedRef<boolean>;
        disableOk: import("vue").ComputedRef<boolean>;
        modalShowed: (e: Event) => void;
        modalHided: (e: Event) => void;
        modalShow: (e: Event) => void;
        modalHide: (e: Event) => void;
        show: () => void;
        hide: () => void;
        getInstance: () => import("bootstrap/js/dist/modal").default;
        BButton: import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            rel: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
                default: string;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../types/ButtonType").default>;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            loading: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            loadingMode: {
                type: import("vue").PropType<"fill" | "inline">;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                active: boolean;
                'rounded-pill': boolean;
                'rounded-0': boolean;
                disabled: boolean;
            }>;
            attrs: import("vue").ComputedRef<{
                'aria-disabled': boolean | null;
                'aria-pressed': boolean | null;
                autocomplete: string | null;
                disabled: boolean | null;
                href: string | undefined;
                rel: string | null | undefined;
                role: string | null;
                target: import("../types/LinkTarget").default | null;
                type: import("../types/ButtonType").default | null;
                to: import("vue-router").RouteLocationRaw | null;
                append: import("../types/Booleanish").default | null;
                activeClass: string | null;
                event: string | unknown[] | null;
                exact: import("../types/Booleanish").default | null;
                exactActiveClass: string | null;
                replace: import("../types/Booleanish").default | null;
                routerComponentName: string | null;
                routerTag: string | null;
            }>;
            computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }, {
                tag: import("vue").ComputedRef<string>;
                routerAttr: import("vue").ComputedRef<{
                    to: import("vue-router").RouteLocationRaw;
                    href: string;
                    target: import("../types/LinkTarget").default;
                    rel: string | null;
                    tabindex: unknown;
                    'aria-disabled': string | null;
                }>;
                link: import("vue").Ref<HTMLElement>;
                clicked: (e: MouseEvent) => void;
                activeBoolean: import("vue").ComputedRef<boolean>;
                appendBoolean: import("vue").ComputedRef<boolean>;
                disabledBoolean: import("vue").ComputedRef<boolean>;
                replaceBoolean: import("vue").ComputedRef<boolean>;
                exactBoolean: import("vue").ComputedRef<boolean>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                href: {
                    type: StringConstructor;
                };
                rel: {
                    type: StringConstructor;
                    default: null;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
            }, {
                replace: import("../types/Booleanish").default;
                disabled: import("../types/Booleanish").default;
                exact: import("../types/Booleanish").default;
                active: import("../types/Booleanish").default;
                activeClass: string;
                append: import("../types/Booleanish").default;
                event: string | unknown[];
                exactActiveClass: string;
                rel: string;
                routerComponentName: string;
                routerTag: string;
                target: import("../types/LinkTarget").default;
                to: import("vue-router").RouteLocationRaw;
            }>>;
            clicked: (e: MouseEvent) => void;
            loadingBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            href: {
                type: StringConstructor;
                required: false;
            };
            pill: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            pressed: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            rel: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: import("vue").PropType<import("../types/InputSize").default>;
                default: string;
            };
            squared: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            type: {
                type: import("vue").PropType<import("../types/ButtonType").default>;
                default: string;
            };
            variant: {
                type: import("vue").PropType<import("../types/ButtonVariant").default>;
                default: string;
            };
            loading: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            loadingMode: {
                type: import("vue").PropType<"fill" | "inline">;
                default: string;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
            "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            type: import("../types/ButtonType").default;
            tag: string;
            variant: import("../types/ButtonVariant").default;
            disabled: import("../types/Booleanish").default;
            size: import("../types/InputSize").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
            pill: import("../types/Booleanish").default;
            pressed: import("../types/Booleanish").default;
            squared: import("../types/Booleanish").default;
            loading: import("../types/Booleanish").default;
            loadingMode: "fill" | "inline";
        }>;
        BCloseButton: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            emit: (e: "click", value: MouseEvent) => void;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            whiteBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                'btn-close-white': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            type: any;
            ariaLabel: string;
            disabled: any;
            white: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "ok" | "cancel")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden" | "hide-prevented" | "ok" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bodyBgVariant: {
            type: null;
            required: false;
        };
        bodyClass: {
            type: null;
            required: false;
        };
        bodyTextVariant: {
            type: null;
            required: false;
        };
        busy: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonSize: {
            type: null;
            required: false;
            default: string;
        };
        cancelDisabled: {
            type: null;
            required: false;
            default: boolean;
        };
        cancelTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        cancelVariant: {
            type: null;
            required: false;
            default: string;
        };
        centered: {
            type: null;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: null;
            required: false;
        };
        dialogClass: {
            type: null;
            required: false;
        };
        footerBgVariant: {
            type: null;
            required: false;
        };
        footerBorderVariant: {
            type: null;
            required: false;
        };
        footerClass: {
            type: null;
            required: false;
        };
        footerTextVariant: {
            type: null;
            required: false;
        };
        fullscreen: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        headerBgVariant: {
            type: null;
            required: false;
        };
        headerBorderVariant: {
            type: null;
            required: false;
        };
        headerClass: {
            type: null;
            required: false;
        };
        headerCloseLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        headerCloseWhite: {
            type: null;
            required: false;
            default: boolean;
        };
        headerTextVariant: {
            type: null;
            required: false;
        };
        hideBackdrop: {
            type: null;
            required: false;
            default: boolean;
        };
        hideFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        hideHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        hideHeaderClose: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        modalClass: {
            type: null;
            required: false;
        };
        modelValue: {
            type: null;
            required: false;
            default: boolean;
        };
        noCloseOnBackdrop: {
            type: null;
            required: false;
            default: boolean;
        };
        noCloseOnEsc: {
            type: null;
            required: false;
            default: boolean;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        noFocus: {
            type: null;
            required: false;
            default: boolean;
        };
        okDisabled: {
            type: null;
            required: false;
            default: boolean;
        };
        okOnly: {
            type: null;
            required: false;
            default: boolean;
        };
        okTitle: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        okVariant: {
            type: null;
            required: false;
            default: string;
        };
        scrollable: {
            type: null;
            required: false;
            default: boolean;
        };
        show: {
            type: null;
            required: false;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        titleClass: {
            type: StringConstructor;
            required: false;
        };
        titleSrOnly: {
            type: null;
            required: false;
            default: boolean;
        };
        titleTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onOk?: ((...args: any[]) => any) | undefined;
        "onHide-prevented"?: ((...args: any[]) => any) | undefined;
    }, {
        show: any;
        modelValue: any;
        titleTag: string;
        lazy: any;
        busy: any;
        buttonSize: any;
        cancelDisabled: any;
        cancelTitle: string;
        cancelVariant: any;
        centered: any;
        fullscreen: string | boolean;
        headerCloseLabel: string;
        headerCloseWhite: any;
        hideBackdrop: any;
        hideFooter: any;
        hideHeader: any;
        hideHeaderClose: any;
        noCloseOnBackdrop: any;
        noCloseOnEsc: any;
        noFade: any;
        noFocus: any;
        okDisabled: any;
        okOnly: any;
        okTitle: string;
        okVariant: any;
        scrollable: any;
        titleSrOnly: any;
    }>;
    BNav: import("vue").DefineComponent<{
        align: {
            type: null;
            required: false;
        };
        cardHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        fill: {
            type: null;
            required: false;
            default: boolean;
        };
        justified: {
            type: null;
            required: false;
            default: boolean;
        };
        pills: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tabs: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        cardHeaderBoolean: import("vue").ComputedRef<boolean>;
        fillBoolean: import("vue").ComputedRef<boolean>;
        justifiedBoolean: import("vue").ComputedRef<boolean>;
        pillsBoolean: import("vue").ComputedRef<boolean>;
        smallBoolean: import("vue").ComputedRef<boolean>;
        tabsBoolean: import("vue").ComputedRef<boolean>;
        verticalBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'nav-tabs': boolean;
            'nav-pills': boolean;
            'card-header-tabs': boolean;
            'card-header-pills': boolean;
            'flex-column': boolean;
            'nav-fill': boolean;
            'nav-justified': boolean;
            small: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: null;
            required: false;
        };
        cardHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        fill: {
            type: null;
            required: false;
            default: boolean;
        };
        justified: {
            type: null;
            required: false;
            default: boolean;
        };
        pills: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tabs: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        small: any;
        fill: any;
        tag: string;
        vertical: any;
        cardHeader: any;
        justified: any;
        pills: any;
        tabs: any;
    }>;
    BNavbar: import("vue").DefineComponent<{
        fixed: {
            type: StringConstructor;
            required: false;
        };
        print: {
            type: null;
            required: false;
            default: boolean;
        };
        sticky: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggleable: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
        container: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: string;
        };
    }, {
        props: any;
        printBoolean: import("vue").ComputedRef<boolean>;
        darkBoolean: import("vue").ComputedRef<boolean>;
        computedRole: import("vue").ComputedRef<"navigation" | undefined>;
        computedNavbarExpand: import("vue").ComputedRef<string | undefined>;
        containerClass: import("vue").ComputedRef<"container-fluid" | "container" | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'd-print': boolean;
            'navbar-dark': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        fixed: {
            type: StringConstructor;
            required: false;
        };
        print: {
            type: null;
            required: false;
            default: boolean;
        };
        sticky: {
            type: StringConstructor;
            required: false;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        toggleable: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
        container: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: string;
        };
    }>>, {
        tag: string;
        dark: any;
        print: any;
        toggleable: string | boolean;
        container: string | boolean;
    }>;
    BNavbarBrand: import("vue").DefineComponent<{
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }, {
        props: {};
        computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
    }>>, {
        replace: import("../types/Booleanish").default;
        tag: string;
        disabled: import("../types/Booleanish").default;
        exact: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
    }>;
    BNavbarNav: import("vue").DefineComponent<{
        align: {
            type: null;
            required: false;
        };
        fill: {
            type: null;
            required: false;
            default: boolean;
        };
        justified: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        fillBoolean: import("vue").ComputedRef<boolean>;
        justifiedBoolean: import("vue").ComputedRef<boolean>;
        smallBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'nav-fill': boolean;
            'nav-justified': boolean;
            small: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: null;
            required: false;
        };
        fill: {
            type: null;
            required: false;
            default: boolean;
        };
        justified: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>>, {
        small: any;
        fill: any;
        tag: string;
        justified: any;
    }>;
    BNavbarToggle: import("vue").DefineComponent<{
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
    }, {
        props: any;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        emit: (e: "click", value: MouseEvent) => void;
        attrs: import("vue").ComputedRef<{
            disabled: boolean;
            'aria-label': string;
        }>;
        classes: import("vue").ComputedRef<{
            disabled: boolean;
        }>;
        onClick: (e: MouseEvent) => void;
        vBToggle: import("vue").Directive<HTMLElement, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        target: {
            type: (StringConstructor | ArrayConstructor)[];
            required: false;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        disabled: any;
        label: string;
    }>;
    BNavItem: import("vue").DefineComponent<{
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        disabledBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>>, {
        replace: import("../types/Booleanish").default;
        disabled: import("../types/Booleanish").default;
        exact: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
    }>;
    BNavItemDropdown: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        offset: {
            type: StringConstructor;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        left: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        noCaret: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        BDropdown: import("vue").DefineComponent<{
            id: {
                type: StringConstructor;
                required: false;
            };
            menuClass: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            splitClass: {
                type: null;
                required: false;
            };
            splitVariant: {
                type: null;
                required: false;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
            toggleClass: {
                type: null;
                required: false;
            };
            autoClose: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            block: {
                type: null;
                required: false;
                default: boolean;
            };
            boundary: {
                type: null;
                required: false;
                default: string;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            isNav: {
                type: null;
                required: false;
                default: boolean;
            };
            dropup: {
                type: null;
                required: false;
                default: boolean;
            };
            dropright: {
                type: null;
                required: false;
                default: boolean;
            };
            dropleft: {
                type: null;
                required: false;
                default: boolean;
            };
            noFlip: {
                type: null;
                required: false;
                default: boolean;
            };
            offset: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            popperOpts: {
                type: ObjectConstructor;
                required: false;
                default: () => {};
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            split: {
                type: null;
                required: false;
                default: boolean;
            };
            splitButtonType: {
                type: null;
                required: false;
                default: string;
            };
            splitHref: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            noCaret: {
                type: null;
                required: false;
                default: boolean;
            };
            toggleText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            blockBoolean: import("vue").ComputedRef<boolean>;
            darkBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            dropupBoolean: import("vue").ComputedRef<boolean>;
            droprightBoolean: import("vue").ComputedRef<boolean>;
            isNavBoolean: import("vue").ComputedRef<boolean>;
            dropleftBoolean: import("vue").ComputedRef<boolean>;
            rightBoolean: import("vue").ComputedRef<boolean>;
            splitBoolean: import("vue").ComputedRef<boolean>;
            noCaretBoolean: import("vue").ComputedRef<boolean>;
            emit: {
                (e: "show"): void;
                (e: "shown"): void;
                (e: "hide"): void;
                (e: "hidden"): void;
                (e: "click", event: MouseEvent): void;
                (e: "toggle"): void;
            };
            parent: import("vue").Ref<HTMLElement | undefined>;
            dropdown: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
            instance: import("vue").Ref<import("bootstrap/js/dist/dropdown").default | undefined>;
            computedId: import("vue").ComputedRef<string>;
            onSplitClick: (event: MouseEvent) => void;
            classes: import("vue").ComputedRef<{
                'd-grid': boolean;
                'd-flex': boolean;
            }>;
            buttonClasses: import("vue").ComputedRef<{
                'nav-link': boolean;
                'dropdown-toggle': boolean;
                'dropdown-toggle-no-caret': boolean;
                'w-100': boolean;
            }>;
            dropdownMenuClasses: import("vue").ComputedRef<{
                'dropdown-menu-dark': boolean;
                'dropdown-menu-end': boolean;
            }>;
            buttonAttr: import("vue").ComputedRef<{
                'data-bs-toggle': string | undefined;
                'aria-expanded': boolean | undefined;
                ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
                href: string | undefined;
            }>;
            splitAttr: import("vue").ComputedRef<{
                ref: import("vue").Ref<import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
            }>;
            hide: () => void;
            BButton: import("vue").DefineComponent<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                href: {
                    type: StringConstructor;
                    required: false;
                };
                pill: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                pressed: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                rel: {
                    type: StringConstructor;
                    default: undefined;
                };
                size: {
                    type: import("vue").PropType<import("../types/InputSize").default>;
                    default: string;
                };
                squared: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                type: {
                    type: import("vue").PropType<import("../types/ButtonType").default>;
                    default: string;
                };
                variant: {
                    type: import("vue").PropType<import("../types/ButtonVariant").default>;
                    default: string;
                };
                loading: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                loadingMode: {
                    type: import("vue").PropType<"fill" | "inline">;
                    default: string;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }, {
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                    active: boolean;
                    'rounded-pill': boolean;
                    'rounded-0': boolean;
                    disabled: boolean;
                }>;
                attrs: import("vue").ComputedRef<{
                    'aria-disabled': boolean | null;
                    'aria-pressed': boolean | null;
                    autocomplete: string | null;
                    disabled: boolean | null;
                    href: string | undefined;
                    rel: string | null | undefined;
                    role: string | null;
                    target: import("../types/LinkTarget").default | null;
                    type: import("../types/ButtonType").default | null;
                    to: import("vue-router").RouteLocationRaw | null;
                    append: import("../types/Booleanish").default | null;
                    activeClass: string | null;
                    event: string | unknown[] | null;
                    exact: import("../types/Booleanish").default | null;
                    exactActiveClass: string | null;
                    replace: import("../types/Booleanish").default | null;
                    routerComponentName: string | null;
                    routerTag: string | null;
                }>;
                computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
                    active: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    append: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    disabled: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    event: {
                        type: (StringConstructor | ArrayConstructor)[];
                        default: string;
                    };
                    exact: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    href: {
                        type: StringConstructor;
                    };
                    rel: {
                        type: StringConstructor;
                        default: null;
                    };
                    replace: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    routerComponentName: {
                        type: StringConstructor;
                        default: string;
                    };
                    routerTag: {
                        type: StringConstructor;
                        default: string;
                    };
                    target: {
                        type: import("vue").PropType<import("../types/LinkTarget").default>;
                        default: string;
                    };
                    to: {
                        type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                        default: null;
                    };
                }, {
                    tag: import("vue").ComputedRef<string>;
                    routerAttr: import("vue").ComputedRef<{
                        to: import("vue-router").RouteLocationRaw;
                        href: string;
                        target: import("../types/LinkTarget").default;
                        rel: string | null;
                        tabindex: unknown;
                        'aria-disabled': string | null;
                    }>;
                    link: import("vue").Ref<HTMLElement>;
                    clicked: (e: MouseEvent) => void;
                    activeBoolean: import("vue").ComputedRef<boolean>;
                    appendBoolean: import("vue").ComputedRef<boolean>;
                    disabledBoolean: import("vue").ComputedRef<boolean>;
                    replaceBoolean: import("vue").ComputedRef<boolean>;
                    exactBoolean: import("vue").ComputedRef<boolean>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    active: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    activeClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    append: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    disabled: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    event: {
                        type: (StringConstructor | ArrayConstructor)[];
                        default: string;
                    };
                    exact: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    exactActiveClass: {
                        type: StringConstructor;
                        default: string;
                    };
                    href: {
                        type: StringConstructor;
                    };
                    rel: {
                        type: StringConstructor;
                        default: null;
                    };
                    replace: {
                        type: import("vue").PropType<import("../types/Booleanish").default>;
                        default: boolean;
                    };
                    routerComponentName: {
                        type: StringConstructor;
                        default: string;
                    };
                    routerTag: {
                        type: StringConstructor;
                        default: string;
                    };
                    target: {
                        type: import("vue").PropType<import("../types/LinkTarget").default>;
                        default: string;
                    };
                    to: {
                        type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                        default: null;
                    };
                }>> & {
                    onClick?: ((...args: any[]) => any) | undefined;
                }, {
                    replace: import("../types/Booleanish").default;
                    disabled: import("../types/Booleanish").default;
                    exact: import("../types/Booleanish").default;
                    active: import("../types/Booleanish").default;
                    activeClass: string;
                    append: import("../types/Booleanish").default;
                    event: string | unknown[];
                    exactActiveClass: string;
                    rel: string;
                    routerComponentName: string;
                    routerTag: string;
                    target: import("../types/LinkTarget").default;
                    to: import("vue-router").RouteLocationRaw;
                }>>;
                clicked: (e: MouseEvent) => void;
                loadingBoolean: import("vue").ComputedRef<boolean>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                active: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                disabled: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                href: {
                    type: StringConstructor;
                    required: false;
                };
                pill: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                pressed: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                rel: {
                    type: StringConstructor;
                    default: undefined;
                };
                size: {
                    type: import("vue").PropType<import("../types/InputSize").default>;
                    default: string;
                };
                squared: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                tag: {
                    type: StringConstructor;
                    default: string;
                };
                target: {
                    type: import("vue").PropType<import("../types/LinkTarget").default>;
                    default: string;
                };
                type: {
                    type: import("vue").PropType<import("../types/ButtonType").default>;
                    default: string;
                };
                variant: {
                    type: import("vue").PropType<import("../types/ButtonVariant").default>;
                    default: string;
                };
                loading: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                loadingMode: {
                    type: import("vue").PropType<"fill" | "inline">;
                    default: string;
                };
                activeClass: {
                    type: StringConstructor;
                    default: string;
                };
                append: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                event: {
                    type: (StringConstructor | ArrayConstructor)[];
                    default: string;
                };
                exact: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                exactActiveClass: {
                    type: StringConstructor;
                    default: string;
                };
                replace: {
                    type: import("vue").PropType<import("../types/Booleanish").default>;
                    default: boolean;
                };
                routerComponentName: {
                    type: StringConstructor;
                    default: string;
                };
                routerTag: {
                    type: StringConstructor;
                    default: string;
                };
                to: {
                    type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                    default: null;
                };
            }>> & {
                onClick?: ((...args: any[]) => any) | undefined;
                "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
            }, {
                replace: import("../types/Booleanish").default;
                type: import("../types/ButtonType").default;
                tag: string;
                variant: import("../types/ButtonVariant").default;
                disabled: import("../types/Booleanish").default;
                size: import("../types/InputSize").default;
                exact: import("../types/Booleanish").default;
                active: import("../types/Booleanish").default;
                activeClass: string;
                append: import("../types/Booleanish").default;
                event: string | unknown[];
                exactActiveClass: string;
                rel: string;
                routerComponentName: string;
                routerTag: string;
                target: import("../types/LinkTarget").default;
                to: import("vue-router").RouteLocationRaw;
                pill: import("../types/Booleanish").default;
                pressed: import("../types/Booleanish").default;
                squared: import("../types/Booleanish").default;
                loading: import("../types/Booleanish").default;
                loadingMode: "fill" | "inline";
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "toggle" | "click")[], "show" | "shown" | "hide" | "hidden" | "toggle" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            id: {
                type: StringConstructor;
                required: false;
            };
            menuClass: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            splitClass: {
                type: null;
                required: false;
            };
            splitVariant: {
                type: null;
                required: false;
            };
            text: {
                type: StringConstructor;
                required: false;
            };
            toggleClass: {
                type: null;
                required: false;
            };
            autoClose: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            block: {
                type: null;
                required: false;
                default: boolean;
            };
            boundary: {
                type: null;
                required: false;
                default: string;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            isNav: {
                type: null;
                required: false;
                default: boolean;
            };
            dropup: {
                type: null;
                required: false;
                default: boolean;
            };
            dropright: {
                type: null;
                required: false;
                default: boolean;
            };
            dropleft: {
                type: null;
                required: false;
                default: boolean;
            };
            noFlip: {
                type: null;
                required: false;
                default: boolean;
            };
            offset: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            popperOpts: {
                type: ObjectConstructor;
                required: false;
                default: () => {};
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            split: {
                type: null;
                required: false;
                default: boolean;
            };
            splitButtonType: {
                type: null;
                required: false;
                default: string;
            };
            splitHref: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            noCaret: {
                type: null;
                required: false;
                default: boolean;
            };
            toggleText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onShow?: ((...args: any[]) => any) | undefined;
            onShown?: ((...args: any[]) => any) | undefined;
            onHide?: ((...args: any[]) => any) | undefined;
            onHidden?: ((...args: any[]) => any) | undefined;
            onClick?: ((...args: any[]) => any) | undefined;
            onToggle?: ((...args: any[]) => any) | undefined;
        }, {
            split: any;
            isNav: any;
            variant: any;
            dark: any;
            disabled: any;
            right: any;
            block: any;
            offset: string | number;
            role: string;
            autoClose: string | boolean;
            boundary: any;
            dropup: any;
            dropright: any;
            dropleft: any;
            noFlip: any;
            popperOpts: Record<string, any>;
            splitButtonType: any;
            splitHref: string;
            noCaret: any;
            toggleText: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        text: {
            type: StringConstructor;
            required: false;
        };
        toggleClass: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        offset: {
            type: StringConstructor;
            required: false;
        };
        autoClose: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropleft: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropright: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        dropup: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        right: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        left: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        split: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        splitVariant: {
            type: null;
            required: false;
        };
        noCaret: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        split: boolean;
        variant: any;
        dark: boolean;
        left: string | boolean;
        right: boolean;
        autoClose: string | boolean;
        dropup: boolean;
        dropright: boolean;
        dropleft: boolean;
        noCaret: boolean;
    }>;
    BOffcanvas: import("vue").DefineComponent<{
        dismissLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: null;
            required: false;
            default: boolean;
        };
        bodyScrolling: {
            type: null;
            required: false;
            default: boolean;
        };
        backdrop: {
            type: null;
            required: false;
            default: boolean;
        };
        placement: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        noHeaderClose: {
            type: null;
            required: false;
            default: boolean;
        };
        noHeader: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        modelValueBoolean: import("vue").ComputedRef<boolean>;
        bodyScrollingBoolean: import("vue").ComputedRef<boolean>;
        backdropBoolean: import("vue").ComputedRef<boolean>;
        noHeaderCloseBoolean: import("vue").ComputedRef<boolean>;
        noHeaderBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "update:modelValue", value: boolean): void;
            (e: "show"): void;
            (e: "shown"): void;
            (e: "hide"): void;
            (e: "hidden"): void;
        };
        element: import("vue").Ref<HTMLElement | undefined>;
        instance: import("vue").Ref<import("bootstrap/js/dist/offcanvas").default | undefined>;
        show: () => void;
        hide: () => void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
        BCloseButton: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            emit: (e: "click", value: MouseEvent) => void;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            whiteBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                'btn-close-white': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            type: any;
            ariaLabel: string;
            disabled: any;
            white: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "show" | "shown" | "hide" | "hidden")[], "update:modelValue" | "show" | "shown" | "hide" | "hidden", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        dismissLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        modelValue: {
            type: null;
            required: false;
            default: boolean;
        };
        bodyScrolling: {
            type: null;
            required: false;
            default: boolean;
        };
        backdrop: {
            type: null;
            required: false;
            default: boolean;
        };
        placement: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        noHeaderClose: {
            type: null;
            required: false;
            default: boolean;
        };
        noHeader: {
            type: null;
            required: false;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: any;
        dismissLabel: string;
        bodyScrolling: any;
        backdrop: any;
        placement: string;
        noHeaderClose: any;
        noHeader: any;
    }>;
    BOverlay: import("vue").DefineComponent<{
        bgColor: {
            type: StringConstructor;
            required: false;
        };
        blur: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        fixed: {
            type: null;
            required: false;
            default: boolean;
        };
        noCenter: {
            type: null;
            required: false;
            default: boolean;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        noWrap: {
            type: null;
            required: false;
            default: boolean;
        };
        opacity: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        overlayTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        show: {
            type: null;
            required: false;
            default: boolean;
        };
        spinnerSmall: {
            type: null;
            required: false;
            default: boolean;
        };
        spinnerType: {
            type: null;
            required: false;
            default: string;
        };
        spinnerVariant: {
            type: null;
            required: false;
        };
        variant: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        wrapTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
    }, {
        props: any;
        emit: {
            (e: "click", value: MouseEvent): void;
            (e: "hidden"): void;
            (e: "shown"): void;
        };
        positionStyles: {
            top: number;
            left: number;
            bottom: number;
            right: number;
        };
        fixedBoolean: import("vue").ComputedRef<boolean>;
        noCenterBoolean: import("vue").ComputedRef<boolean>;
        noFadeBoolean: import("vue").ComputedRef<boolean>;
        noWrapBoolean: import("vue").ComputedRef<boolean>;
        showBoolean: import("vue").ComputedRef<boolean>;
        spinnerSmallBoolean: import("vue").ComputedRef<boolean>;
        computedRounded: import("vue").ComputedRef<string>;
        computedVariant: import("vue").ComputedRef<string>;
        computedAriaBusy: import("vue").ComputedRef<"true" | null>;
        spinnerAttrs: import("vue").ComputedRef<{
            type: import("../types/SpinnerType").default;
            variant: import("../types/ColorVariant").default | undefined;
            small: boolean;
        }>;
        overlayStyles: import("vue").ComputedRef<{
            zIndex: string | number;
            top: number;
            left: number;
            bottom: number;
            right: number;
        }>;
        overlayClasses: import("vue").ComputedRef<(string | {
            'position-absolute': boolean;
            'position-fixed': boolean;
        })[]>;
        blurClasses: import("vue").ComputedRef<string[]>;
        blurStyles: import("vue").ComputedRef<{
            opacity: string | number;
            backgroundColor: string | undefined;
            backdropFilter: string | undefined;
            top: number;
            left: number;
            bottom: number;
            right: number;
        }>;
        spinWrapperStyles: import("vue").ComputedRef<{
            top: number;
            left: number;
            bottom: number;
            right: number;
        } | {
            top: string;
            left: string;
            transform: string;
        }>;
        BTransition: import("vue").DefineComponent<{
            appear: {
                type: null;
                required: false;
                default: boolean;
            };
            mode: {
                type: null;
                required: false;
            };
            noFade: {
                type: null;
                required: false;
                default: boolean;
            };
            transProps: {
                type: ObjectConstructor;
                required: false;
            };
        }, {
            props: any;
            appearBoolean: import("vue").ComputedRef<boolean>;
            noFadeBoolean: import("vue").ComputedRef<boolean>;
            fadeProperties: import("vue").ComputedRef<{
                name: string;
                enterActiveClass: string;
                enterToClass: string;
                leaveActiveClass: string;
                leaveToClass: string;
                enterFromClass: string;
                leaveFromClass: string;
            }>;
            baseProperties: import("vue").ComputedRef<{
                name: string;
                enterActiveClass: string;
                enterToClass: string;
                leaveActiveClass: string;
                leaveToClass: string;
                enterFromClass: string;
                leaveFromClass: string;
                mode: import("../types/TransitionMode").default | undefined;
                css: boolean;
            }>;
            computedAttrs: import("vue").ComputedRef<{
                name: string;
                enterActiveClass: string;
                enterToClass: string;
                leaveActiveClass: string;
                leaveToClass: string;
                enterFromClass: string;
                leaveFromClass: string;
                mode: import("../types/TransitionMode").default | undefined;
                css: boolean;
            } | {
                appear: boolean;
                appearActiveClass: string;
                appearToClass: string;
                name: string;
                enterActiveClass: string;
                enterToClass: string;
                leaveActiveClass: string;
                leaveToClass: string;
                enterFromClass: string;
                leaveFromClass: string;
                mode: import("../types/TransitionMode").default | undefined;
                css: boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            appear: {
                type: null;
                required: false;
                default: boolean;
            };
            mode: {
                type: null;
                required: false;
            };
            noFade: {
                type: null;
                required: false;
                default: boolean;
            };
            transProps: {
                type: ObjectConstructor;
                required: false;
            };
        }>>, {
            noFade: any;
            appear: any;
        }>;
        BSpinner: import("vue").DefineComponent<{
            label: {
                type: StringConstructor;
                required: false;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            smallBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                'spinner-border': boolean;
                'spinner-border-sm': boolean;
                'spinner-grow': boolean;
                'spinner-grow-sm': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }>>, {
            small: any;
            type: any;
            tag: string;
            role: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("shown" | "hidden" | "click")[], "shown" | "hidden" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bgColor: {
            type: StringConstructor;
            required: false;
        };
        blur: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        fixed: {
            type: null;
            required: false;
            default: boolean;
        };
        noCenter: {
            type: null;
            required: false;
            default: boolean;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        noWrap: {
            type: null;
            required: false;
            default: boolean;
        };
        opacity: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        overlayTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        rounded: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        show: {
            type: null;
            required: false;
            default: boolean;
        };
        spinnerSmall: {
            type: null;
            required: false;
            default: boolean;
        };
        spinnerType: {
            type: null;
            required: false;
            default: string;
        };
        spinnerVariant: {
            type: null;
            required: false;
        };
        variant: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        wrapTag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        zIndex: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
    }>> & {
        onShown?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        fixed: any;
        show: any;
        variant: string;
        rounded: string | boolean;
        opacity: string | number;
        zIndex: string | number;
        noWrap: any;
        blur: string;
        noFade: any;
        noCenter: any;
        overlayTag: string;
        spinnerSmall: any;
        spinnerType: any;
        wrapTag: string;
    }>;
    BPagination: import("vue").DefineComponent<{
        align: {
            type: import("vue").PropType<import("../types/Alignment").default>;
            default: string;
        };
        ariaControls: {
            type: StringConstructor;
            required: false;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        ellipsisClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        ellipsisText: {
            type: StringConstructor;
            default: string;
        };
        firstClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        firstNumber: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        firstText: {
            type: StringConstructor;
            default: string;
        };
        hideEllipsis: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        hideGotoEndButtons: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        labelFirstPage: {
            type: StringConstructor;
            default: string;
        };
        labelLastPage: {
            type: StringConstructor;
            default: string;
        };
        labelNextPage: {
            type: StringConstructor;
            default: string;
        };
        labelPage: {
            type: StringConstructor;
            default: string;
        };
        labelPrevPage: {
            type: StringConstructor;
            default: string;
        };
        lastClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        lastNumber: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        lastText: {
            type: StringConstructor;
            default: string;
        };
        limit: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        nextClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        nextText: {
            type: StringConstructor;
            default: string;
        };
        pageClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        perPage: {
            type: NumberConstructor;
            default: number;
        };
        pills: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        prevClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        prevText: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
            required: false;
        };
        totalRows: {
            type: NumberConstructor;
            default: number;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "page-click")[], "update:modelValue" | "page-click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: import("vue").PropType<import("../types/Alignment").default>;
            default: string;
        };
        ariaControls: {
            type: StringConstructor;
            required: false;
        };
        ariaLabel: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        ellipsisClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        ellipsisText: {
            type: StringConstructor;
            default: string;
        };
        firstClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        firstNumber: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        firstText: {
            type: StringConstructor;
            default: string;
        };
        hideEllipsis: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        hideGotoEndButtons: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        labelFirstPage: {
            type: StringConstructor;
            default: string;
        };
        labelLastPage: {
            type: StringConstructor;
            default: string;
        };
        labelNextPage: {
            type: StringConstructor;
            default: string;
        };
        labelPage: {
            type: StringConstructor;
            default: string;
        };
        labelPrevPage: {
            type: StringConstructor;
            default: string;
        };
        lastClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        lastNumber: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        lastText: {
            type: StringConstructor;
            default: string;
        };
        limit: {
            type: NumberConstructor;
            default: number;
        };
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        nextClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        nextText: {
            type: StringConstructor;
            default: string;
        };
        pageClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        perPage: {
            type: NumberConstructor;
            default: number;
        };
        pills: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        prevClass: {
            type: (StringConstructor | ArrayConstructor)[];
            default: () => never[];
        };
        prevText: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<import("../types/InputSize").default>;
            required: false;
        };
        totalRows: {
            type: NumberConstructor;
            default: number;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        "onPage-click"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: number;
        ariaLabel: string;
        disabled: import("../types/Booleanish").default;
        align: import("../types/Alignment").default;
        limit: number;
        pills: import("../types/Booleanish").default;
        ellipsisClass: string | unknown[];
        ellipsisText: string;
        firstClass: string | unknown[];
        firstNumber: import("../types/Booleanish").default;
        firstText: string;
        hideEllipsis: import("../types/Booleanish").default;
        hideGotoEndButtons: import("../types/Booleanish").default;
        labelFirstPage: string;
        labelLastPage: string;
        labelNextPage: string;
        labelPage: string;
        labelPrevPage: string;
        lastClass: string | unknown[];
        lastNumber: import("../types/Booleanish").default;
        lastText: string;
        nextClass: string | unknown[];
        nextText: string;
        pageClass: string | unknown[];
        perPage: number;
        prevClass: string | unknown[];
        prevText: string;
        totalRows: number;
    }>;
    BPlaceholder: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        widthString: import("vue").ComputedRef<string | undefined>;
        colsString: import("vue").ComputedRef<string | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
        computedStyle: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
    }>;
    BPlaceholderButton: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
        animation: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        computedClasses: import("vue").ComputedRef<string[]>;
        computedAttrs: import("vue").ComputedRef<{
            animation: import("../types/PlaceholderAnimation").default | undefined;
            width: string | number | undefined;
            cols: string | number | undefined;
            tag: string;
        }>;
        BPlaceholder: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            animation: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            widthString: import("vue").ComputedRef<string | undefined>;
            colsString: import("vue").ComputedRef<string | undefined>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
            }>;
            computedStyle: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            animation: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        width: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        cols: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
        animation: {
            type: null;
            required: false;
        };
    }>>, {
        tag: string;
        variant: any;
    }>;
    BPlaceholderCard: import("vue").DefineComponent<{
        noHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        headerWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        headerVariant: {
            type: null;
            required: false;
        };
        headerAnimation: {
            type: null;
            required: false;
        };
        headerSize: {
            type: null;
            required: false;
        };
        noFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        footerWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        footerVariant: {
            type: null;
            required: false;
        };
        footerAnimation: {
            type: null;
            required: false;
        };
        footerSize: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        noButton: {
            type: null;
            required: false;
            default: boolean;
        };
        imgBottom: {
            type: null;
            required: false;
            default: boolean;
        };
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgBlankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        noImg: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        noButtonBoolean: import("vue").ComputedRef<boolean>;
        noHeaderBoolean: import("vue").ComputedRef<boolean>;
        noFooterBoolean: import("vue").ComputedRef<boolean>;
        noImgBoolean: import("vue").ComputedRef<boolean>;
        imgBottomBoolean: import("vue").ComputedRef<boolean>;
        headerAttrs: import("vue").ComputedRef<{
            width: string | number;
            variant: import("../types/ColorVariant").default | undefined;
            animation: import("../types/PlaceholderAnimation").default | undefined;
            size: import("../types/PlaceholderSize").default | undefined;
        }>;
        footerAttrs: import("vue").ComputedRef<{
            width: string | number;
            animation: import("../types/PlaceholderAnimation").default | undefined;
            size: import("../types/PlaceholderSize").default | undefined;
            variant: import("../types/ColorVariant").default | undefined;
        }>;
        imgAttrs: import("vue").ComputedRef<{
            blank: boolean;
            blankColor: string;
            height: string | number | undefined;
            src: string | undefined;
            top: boolean;
            bottom: boolean;
        }>;
        BCard: import("vue").DefineComponent<{
            align: {
                type: null;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            bodyBgVariant: {
                type: null;
                required: false;
            };
            bodyClass: {
                type: null;
                required: false;
            };
            bodyTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            bodyTextVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            footer: {
                type: StringConstructor;
                required: false;
            };
            footerBgVariant: {
                type: null;
                required: false;
            };
            footerBorderVariant: {
                type: null;
                required: false;
            };
            footerClass: {
                type: null;
                required: false;
            };
            footerHtml: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            footerTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            footerTextVariant: {
                type: null;
                required: false;
            };
            header: {
                type: StringConstructor;
                required: false;
            };
            headerBgVariant: {
                type: null;
                required: false;
            };
            headerBorderVariant: {
                type: null;
                required: false;
            };
            headerClass: {
                type: null;
                required: false;
            };
            headerHtml: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            headerTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            headerTextVariant: {
                type: null;
                required: false;
            };
            imgAlt: {
                type: StringConstructor;
                required: false;
            };
            imgBottom: {
                type: null;
                required: false;
                default: boolean;
            };
            imgEnd: {
                type: null;
                required: false;
                default: boolean;
            };
            imgHeight: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            imgLeft: {
                type: null;
                required: false;
                default: boolean;
            };
            imgRight: {
                type: null;
                required: false;
                default: boolean;
            };
            imgSrc: {
                type: StringConstructor;
                required: false;
            };
            imgStart: {
                type: null;
                required: false;
                default: boolean;
            };
            imgTop: {
                type: null;
                required: false;
                default: boolean;
            };
            imgWidth: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            noBody: {
                type: null;
                required: false;
                default: boolean;
            };
            overlay: {
                type: null;
                required: false;
                default: boolean;
            };
            subtitle: {
                type: StringConstructor;
                required: false;
            };
            subtitleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            subtitleTextVariant: {
                type: null;
                required: false;
                default: string;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            titleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            bodyText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }, {
            props: any;
            imgBottomBoolean: import("vue").ComputedRef<boolean>;
            imgEndBoolean: import("vue").ComputedRef<boolean>;
            imgLeftBoolean: import("vue").ComputedRef<boolean>;
            imgRightBoolean: import("vue").ComputedRef<boolean>;
            imgStartBoolean: import("vue").ComputedRef<boolean>;
            noBodyBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                'flex-row': boolean;
                'flex-row-reverse': boolean;
            }>;
            headerAttrs: import("vue").ComputedRef<{
                bgVariant: import("../types/ColorVariant").default | undefined;
                borderVariant: import("../types/ColorVariant").default | undefined;
                html: string;
                tag: string;
                textVariant: import("../types/TextColorVariant").default | undefined;
            }>;
            bodyAttrs: import("vue").ComputedRef<{
                overlay: import("../types/Booleanish").default;
                bodyBgVariant: import("../types/ColorVariant").default | undefined;
                bodyTag: string;
                bodyTextVariant: import("../types/TextColorVariant").default | undefined;
                subtitle: string | undefined;
                subtitleTag: string;
                subtitleTextVariant: import("../types/TextColorVariant").default;
                title: string | undefined;
                titleTag: string;
            }>;
            footerAttrs: import("vue").ComputedRef<{
                bgVariant: import("../types/ColorVariant").default | undefined;
                borderVariant: import("../types/ColorVariant").default | undefined;
                html: string;
                tag: string;
                textVariant: import("../types/TextColorVariant").default | undefined;
            }>;
            imgAttr: import("vue").ComputedRef<{
                src: string | undefined;
                alt: string | undefined;
                height: string | number | undefined;
                width: string | number | undefined;
                bottom: import("../types/Booleanish").default;
                end: import("../types/Booleanish").default;
                left: import("../types/Booleanish").default;
                right: import("../types/Booleanish").default;
                start: import("../types/Booleanish").default;
                top: import("../types/Booleanish").default;
            }>;
            BCardImg: import("vue").DefineComponent<{
                alt: {
                    type: StringConstructor;
                    required: false;
                };
                blank: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                blankColor: {
                    type: StringConstructor;
                    required: false;
                };
                bottom: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                lazy: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                height: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                left: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                start: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                right: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                end: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                sizes: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                src: {
                    type: StringConstructor;
                    required: false;
                };
                srcset: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                top: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
            }, {
                props: any;
                emit: (e: "load", value: Event) => void;
                bottomBoolean: import("vue").ComputedRef<boolean>;
                endBoolean: import("vue").ComputedRef<boolean>;
                leftBoolean: import("vue").ComputedRef<boolean>;
                rightBoolean: import("vue").ComputedRef<boolean>;
                startBoolean: import("vue").ComputedRef<boolean>;
                topBoolean: import("vue").ComputedRef<boolean>;
                baseClass: import("vue").ComputedRef<"card-img-top" | "card-img-right" | "card-img-bottom" | "card-img-left" | "card-img">;
                attrs: import("vue").ComputedRef<{
                    alt: string | undefined;
                    height: string | number | undefined;
                    src: string | undefined;
                    lazy: import("../types/Booleanish").default;
                    width: string | number | undefined;
                    blank: import("../types/Booleanish").default;
                    blankColor: string | undefined;
                    sizes: string | string[] | undefined;
                    srcset: string | string[] | undefined;
                }>;
                classes: import("vue").ComputedRef<string[]>;
                BImg: import("vue").DefineComponent<{
                    alt: {
                        type: StringConstructor;
                        required: false;
                    };
                    blank: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    blankColor: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    block: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    center: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    fluid: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    lazy: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    fluidGrow: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    height: {
                        type: (StringConstructor | NumberConstructor)[];
                        required: false;
                    };
                    left: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    start: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    right: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    end: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    rounded: {
                        type: (StringConstructor | BooleanConstructor)[];
                        required: false;
                        default: boolean;
                    };
                    sizes: {
                        type: (StringConstructor | ArrayConstructor)[];
                        required: false;
                    };
                    src: {
                        type: StringConstructor;
                        required: false;
                    };
                    srcset: {
                        type: (StringConstructor | ArrayConstructor)[];
                        required: false;
                    };
                    thumbnail: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    width: {
                        type: (StringConstructor | NumberConstructor)[];
                        required: false;
                    };
                }, {
                    props: any;
                    emit: (e: "load", value: Event) => void;
                    lazyBoolean: import("vue").ComputedRef<boolean>;
                    blankBoolean: import("vue").ComputedRef<boolean>;
                    blockBoolean: import("vue").ComputedRef<boolean>;
                    centerBoolean: import("vue").ComputedRef<boolean>;
                    fluidBoolean: import("vue").ComputedRef<boolean>;
                    fluidGrowBoolean: import("vue").ComputedRef<boolean>;
                    leftBoolean: import("vue").ComputedRef<boolean>;
                    startBoolean: import("vue").ComputedRef<boolean>;
                    rightBoolean: import("vue").ComputedRef<boolean>;
                    endBoolean: import("vue").ComputedRef<boolean>;
                    thumbnailBoolean: import("vue").ComputedRef<boolean>;
                    BLANK_TEMPLATE: string;
                    makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
                    computedSrcset: import("vue").ComputedRef<string | undefined>;
                    computedSizes: import("vue").ComputedRef<string | undefined>;
                    computedDimentions: import("vue").ComputedRef<{
                        height: number | undefined;
                        width: number | undefined;
                    }>;
                    computedBlankImgSrc: import("vue").ComputedRef<string>;
                    attrs: import("vue").ComputedRef<{
                        src: string | undefined;
                        alt: string | undefined;
                        width: number | undefined;
                        height: number | undefined;
                        srcset: string | undefined;
                        sizes: string | undefined;
                        loading: string;
                    }>;
                    alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
                    classes: import("vue").ComputedRef<{
                        [x: string]: boolean;
                        'img-thumbnail': boolean;
                        'img-fluid': boolean;
                        'w-100': boolean;
                        rounded: boolean;
                        'd-block': boolean;
                    }>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    alt: {
                        type: StringConstructor;
                        required: false;
                    };
                    blank: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    blankColor: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    block: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    center: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    fluid: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    lazy: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    fluidGrow: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    height: {
                        type: (StringConstructor | NumberConstructor)[];
                        required: false;
                    };
                    left: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    start: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    right: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    end: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    rounded: {
                        type: (StringConstructor | BooleanConstructor)[];
                        required: false;
                        default: boolean;
                    };
                    sizes: {
                        type: (StringConstructor | ArrayConstructor)[];
                        required: false;
                    };
                    src: {
                        type: StringConstructor;
                        required: false;
                    };
                    srcset: {
                        type: (StringConstructor | ArrayConstructor)[];
                        required: false;
                    };
                    thumbnail: {
                        type: null;
                        required: false;
                        default: boolean;
                    };
                    width: {
                        type: (StringConstructor | NumberConstructor)[];
                        required: false;
                    };
                }>> & {
                    onLoad?: ((...args: any[]) => any) | undefined;
                }, {
                    rounded: string | boolean;
                    left: any;
                    right: any;
                    center: any;
                    end: any;
                    start: any;
                    block: any;
                    blank: any;
                    blankColor: string;
                    lazy: any;
                    fluid: any;
                    fluidGrow: any;
                    thumbnail: any;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                alt: {
                    type: StringConstructor;
                    required: false;
                };
                blank: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                blankColor: {
                    type: StringConstructor;
                    required: false;
                };
                bottom: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                lazy: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                height: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                left: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                start: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                right: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                end: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                sizes: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                src: {
                    type: StringConstructor;
                    required: false;
                };
                srcset: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                top: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
            }>> & {
                onLoad?: ((...args: any[]) => any) | undefined;
            }, {
                top: any;
                bottom: any;
                left: any;
                right: any;
                end: any;
                start: any;
                blank: any;
                lazy: any;
            }>;
            BCardHeader: import("vue").DefineComponent<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }, {
                BCardHeadFoot: import("vue").DefineComponent<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    bgVariant: {
                        type: null;
                        required: false;
                    };
                    borderVariant: {
                        type: null;
                        required: false;
                    };
                    html: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    textVariant: {
                        type: null;
                        required: false;
                    };
                }, {
                    props: any;
                    classes: import("vue").ComputedRef<{
                        [x: string]: boolean;
                    }>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    bgVariant: {
                        type: null;
                        required: false;
                    };
                    borderVariant: {
                        type: null;
                        required: false;
                    };
                    html: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    textVariant: {
                        type: null;
                        required: false;
                    };
                }>>, {
                    tag: string;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
            BCardBody: import("vue").DefineComponent<{
                bodyBgVariant: {
                    type: null;
                    required: false;
                };
                bodyTag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                bodyTextVariant: {
                    type: null;
                    required: false;
                };
                overlay: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                subtitle: {
                    type: StringConstructor;
                    required: false;
                };
                subtitleTag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                subtitleTextVariant: {
                    type: null;
                    required: false;
                };
                title: {
                    type: StringConstructor;
                    required: false;
                };
                titleTag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                text: {
                    type: StringConstructor;
                    required: false;
                };
            }, {
                props: any;
                overlayBoolean: import("vue").ComputedRef<boolean>;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                    'card-img-overlay': boolean;
                }>;
                BCardTitle: import("vue").DefineComponent<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                }>>, {
                    tag: string;
                }>;
                BCardSubtitle: import("vue").DefineComponent<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    textVariant: {
                        type: null;
                        required: false;
                        default: string;
                    };
                }, {
                    props: any;
                    classes: import("vue").ComputedRef<{
                        [x: string]: boolean;
                    }>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    textVariant: {
                        type: null;
                        required: false;
                        default: string;
                    };
                }>>, {
                    tag: string;
                    textVariant: any;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                bodyBgVariant: {
                    type: null;
                    required: false;
                };
                bodyTag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                bodyTextVariant: {
                    type: null;
                    required: false;
                };
                overlay: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                subtitle: {
                    type: StringConstructor;
                    required: false;
                };
                subtitleTag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                subtitleTextVariant: {
                    type: null;
                    required: false;
                };
                title: {
                    type: StringConstructor;
                    required: false;
                };
                titleTag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                text: {
                    type: StringConstructor;
                    required: false;
                };
            }>>, {
                overlay: any;
                bodyTag: string;
                subtitleTag: string;
                titleTag: string;
            }>;
            BCardFooter: import("vue").DefineComponent<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }, {
                BCardHeadFoot: import("vue").DefineComponent<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    bgVariant: {
                        type: null;
                        required: false;
                    };
                    borderVariant: {
                        type: null;
                        required: false;
                    };
                    html: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    textVariant: {
                        type: null;
                        required: false;
                    };
                }, {
                    props: any;
                    classes: import("vue").ComputedRef<{
                        [x: string]: boolean;
                    }>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    text: {
                        type: StringConstructor;
                        required: false;
                    };
                    bgVariant: {
                        type: null;
                        required: false;
                    };
                    borderVariant: {
                        type: null;
                        required: false;
                    };
                    html: {
                        type: StringConstructor;
                        required: false;
                    };
                    tag: {
                        type: StringConstructor;
                        required: false;
                        default: string;
                    };
                    textVariant: {
                        type: null;
                        required: false;
                    };
                }>>, {
                    tag: string;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                text: {
                    type: StringConstructor;
                    required: false;
                };
                bgVariant: {
                    type: null;
                    required: false;
                };
                borderVariant: {
                    type: null;
                    required: false;
                };
                html: {
                    type: StringConstructor;
                    required: false;
                };
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                textVariant: {
                    type: null;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            align: {
                type: null;
                required: false;
            };
            bgVariant: {
                type: null;
                required: false;
            };
            bodyBgVariant: {
                type: null;
                required: false;
            };
            bodyClass: {
                type: null;
                required: false;
            };
            bodyTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            bodyTextVariant: {
                type: null;
                required: false;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            footer: {
                type: StringConstructor;
                required: false;
            };
            footerBgVariant: {
                type: null;
                required: false;
            };
            footerBorderVariant: {
                type: null;
                required: false;
            };
            footerClass: {
                type: null;
                required: false;
            };
            footerHtml: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            footerTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            footerTextVariant: {
                type: null;
                required: false;
            };
            header: {
                type: StringConstructor;
                required: false;
            };
            headerBgVariant: {
                type: null;
                required: false;
            };
            headerBorderVariant: {
                type: null;
                required: false;
            };
            headerClass: {
                type: null;
                required: false;
            };
            headerHtml: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            headerTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            headerTextVariant: {
                type: null;
                required: false;
            };
            imgAlt: {
                type: StringConstructor;
                required: false;
            };
            imgBottom: {
                type: null;
                required: false;
                default: boolean;
            };
            imgEnd: {
                type: null;
                required: false;
                default: boolean;
            };
            imgHeight: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            imgLeft: {
                type: null;
                required: false;
                default: boolean;
            };
            imgRight: {
                type: null;
                required: false;
                default: boolean;
            };
            imgSrc: {
                type: StringConstructor;
                required: false;
            };
            imgStart: {
                type: null;
                required: false;
                default: boolean;
            };
            imgTop: {
                type: null;
                required: false;
                default: boolean;
            };
            imgWidth: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            noBody: {
                type: null;
                required: false;
                default: boolean;
            };
            overlay: {
                type: null;
                required: false;
                default: boolean;
            };
            subtitle: {
                type: StringConstructor;
                required: false;
            };
            subtitleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            subtitleTextVariant: {
                type: null;
                required: false;
                default: string;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            textVariant: {
                type: null;
                required: false;
            };
            title: {
                type: StringConstructor;
                required: false;
            };
            titleTag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            bodyText: {
                type: StringConstructor;
                required: false;
                default: string;
            };
        }>>, {
            tag: string;
            overlay: any;
            bodyTag: string;
            footerHtml: string;
            footerTag: string;
            headerHtml: string;
            headerTag: string;
            imgBottom: any;
            imgEnd: any;
            imgLeft: any;
            imgRight: any;
            imgStart: any;
            imgTop: any;
            noBody: any;
            subtitleTag: string;
            subtitleTextVariant: any;
            titleTag: string;
            bodyText: string;
        }>;
        BCardImg: import("vue").DefineComponent<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
            };
            bottom: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            top: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }, {
            props: any;
            emit: (e: "load", value: Event) => void;
            bottomBoolean: import("vue").ComputedRef<boolean>;
            endBoolean: import("vue").ComputedRef<boolean>;
            leftBoolean: import("vue").ComputedRef<boolean>;
            rightBoolean: import("vue").ComputedRef<boolean>;
            startBoolean: import("vue").ComputedRef<boolean>;
            topBoolean: import("vue").ComputedRef<boolean>;
            baseClass: import("vue").ComputedRef<"card-img-top" | "card-img-right" | "card-img-bottom" | "card-img-left" | "card-img">;
            attrs: import("vue").ComputedRef<{
                alt: string | undefined;
                height: string | number | undefined;
                src: string | undefined;
                lazy: import("../types/Booleanish").default;
                width: string | number | undefined;
                blank: import("../types/Booleanish").default;
                blankColor: string | undefined;
                sizes: string | string[] | undefined;
                srcset: string | string[] | undefined;
            }>;
            classes: import("vue").ComputedRef<string[]>;
            BImg: import("vue").DefineComponent<{
                alt: {
                    type: StringConstructor;
                    required: false;
                };
                blank: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                blankColor: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                block: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                center: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluid: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                lazy: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluidGrow: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                height: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                left: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                start: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                right: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                end: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                rounded: {
                    type: (StringConstructor | BooleanConstructor)[];
                    required: false;
                    default: boolean;
                };
                sizes: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                src: {
                    type: StringConstructor;
                    required: false;
                };
                srcset: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                thumbnail: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
            }, {
                props: any;
                emit: (e: "load", value: Event) => void;
                lazyBoolean: import("vue").ComputedRef<boolean>;
                blankBoolean: import("vue").ComputedRef<boolean>;
                blockBoolean: import("vue").ComputedRef<boolean>;
                centerBoolean: import("vue").ComputedRef<boolean>;
                fluidBoolean: import("vue").ComputedRef<boolean>;
                fluidGrowBoolean: import("vue").ComputedRef<boolean>;
                leftBoolean: import("vue").ComputedRef<boolean>;
                startBoolean: import("vue").ComputedRef<boolean>;
                rightBoolean: import("vue").ComputedRef<boolean>;
                endBoolean: import("vue").ComputedRef<boolean>;
                thumbnailBoolean: import("vue").ComputedRef<boolean>;
                BLANK_TEMPLATE: string;
                makeBlankImgSrc: (width: number | undefined, height: number | undefined, color: string) => string;
                computedSrcset: import("vue").ComputedRef<string | undefined>;
                computedSizes: import("vue").ComputedRef<string | undefined>;
                computedDimentions: import("vue").ComputedRef<{
                    height: number | undefined;
                    width: number | undefined;
                }>;
                computedBlankImgSrc: import("vue").ComputedRef<string>;
                attrs: import("vue").ComputedRef<{
                    src: string | undefined;
                    alt: string | undefined;
                    width: number | undefined;
                    height: number | undefined;
                    srcset: string | undefined;
                    sizes: string | undefined;
                    loading: string;
                }>;
                alignment: import("vue").ComputedRef<"float-start" | "float-end" | "mx-auto" | undefined>;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                    'img-thumbnail': boolean;
                    'img-fluid': boolean;
                    'w-100': boolean;
                    rounded: boolean;
                    'd-block': boolean;
                }>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                alt: {
                    type: StringConstructor;
                    required: false;
                };
                blank: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                blankColor: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                block: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                center: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluid: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                lazy: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                fluidGrow: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                height: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                left: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                start: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                right: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                end: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                rounded: {
                    type: (StringConstructor | BooleanConstructor)[];
                    required: false;
                    default: boolean;
                };
                sizes: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                src: {
                    type: StringConstructor;
                    required: false;
                };
                srcset: {
                    type: (StringConstructor | ArrayConstructor)[];
                    required: false;
                };
                thumbnail: {
                    type: null;
                    required: false;
                    default: boolean;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
            }>> & {
                onLoad?: ((...args: any[]) => any) | undefined;
            }, {
                rounded: string | boolean;
                left: any;
                right: any;
                center: any;
                end: any;
                start: any;
                block: any;
                blank: any;
                blankColor: string;
                lazy: any;
                fluid: any;
                fluidGrow: any;
                thumbnail: any;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "load"[], "load", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            alt: {
                type: StringConstructor;
                required: false;
            };
            blank: {
                type: null;
                required: false;
                default: boolean;
            };
            blankColor: {
                type: StringConstructor;
                required: false;
            };
            bottom: {
                type: null;
                required: false;
                default: boolean;
            };
            lazy: {
                type: null;
                required: false;
                default: boolean;
            };
            height: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            left: {
                type: null;
                required: false;
                default: boolean;
            };
            start: {
                type: null;
                required: false;
                default: boolean;
            };
            right: {
                type: null;
                required: false;
                default: boolean;
            };
            end: {
                type: null;
                required: false;
                default: boolean;
            };
            sizes: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            src: {
                type: StringConstructor;
                required: false;
            };
            srcset: {
                type: (StringConstructor | ArrayConstructor)[];
                required: false;
            };
            top: {
                type: null;
                required: false;
                default: boolean;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
        }>> & {
            onLoad?: ((...args: any[]) => any) | undefined;
        }, {
            top: any;
            bottom: any;
            left: any;
            right: any;
            end: any;
            start: any;
            blank: any;
            lazy: any;
        }>;
        BPlaceholder: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            animation: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            widthString: import("vue").ComputedRef<string | undefined>;
            colsString: import("vue").ComputedRef<string | undefined>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
            }>;
            computedStyle: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            animation: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
        BPlaceholderButton: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
            animation: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            computedClasses: import("vue").ComputedRef<string[]>;
            computedAttrs: import("vue").ComputedRef<{
                animation: import("../types/PlaceholderAnimation").default | undefined;
                width: string | number | undefined;
                cols: string | number | undefined;
                tag: string;
            }>;
            BPlaceholder: import("vue").DefineComponent<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                cols: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                variant: {
                    type: null;
                    required: false;
                };
                size: {
                    type: null;
                    required: false;
                };
                animation: {
                    type: null;
                    required: false;
                };
            }, {
                props: any;
                widthString: import("vue").ComputedRef<string | undefined>;
                colsString: import("vue").ComputedRef<string | undefined>;
                classes: import("vue").ComputedRef<{
                    [x: string]: boolean;
                }>;
                computedStyle: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                tag: {
                    type: StringConstructor;
                    required: false;
                    default: string;
                };
                width: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                cols: {
                    type: (StringConstructor | NumberConstructor)[];
                    required: false;
                };
                variant: {
                    type: null;
                    required: false;
                };
                size: {
                    type: null;
                    required: false;
                };
                animation: {
                    type: null;
                    required: false;
                };
            }>>, {
                tag: string;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
                default: string;
            };
            animation: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
            variant: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        noHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        headerWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        headerVariant: {
            type: null;
            required: false;
        };
        headerAnimation: {
            type: null;
            required: false;
        };
        headerSize: {
            type: null;
            required: false;
        };
        noFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        footerWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        footerVariant: {
            type: null;
            required: false;
        };
        footerAnimation: {
            type: null;
            required: false;
        };
        footerSize: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
        size: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        noButton: {
            type: null;
            required: false;
            default: boolean;
        };
        imgBottom: {
            type: null;
            required: false;
            default: boolean;
        };
        imgSrc: {
            type: StringConstructor;
            required: false;
        };
        imgBlankColor: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        imgHeight: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        noImg: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        imgBottom: any;
        imgHeight: string | number;
        imgBlankColor: string;
        noHeader: any;
        headerWidth: string | number;
        noFooter: any;
        footerWidth: string | number;
        noButton: any;
        noImg: any;
    }>;
    BPlaceholderTable: import("vue").DefineComponent<{
        rows: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        columns: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        cellWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        size: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        headerColumns: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        hideHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        headerCellWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        headerSize: {
            type: null;
            required: false;
        };
        headerAnimation: {
            type: null;
            required: false;
        };
        headerVariant: {
            type: null;
            required: false;
        };
        footerColumns: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        showFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        footerCellWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        footerSize: {
            type: null;
            required: false;
        };
        footerAnimation: {
            type: null;
            required: false;
        };
        footerVariant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        columnsNumber: import("vue").ComputedRef<number>;
        rowsNumber: import("vue").ComputedRef<number>;
        computedHeaderColumnsLength: import("vue").ComputedRef<number>;
        computedFooterColumnsLength: import("vue").ComputedRef<number>;
        placeholderAttrs: import("vue").ComputedRef<{
            size: import("../types/PlaceholderSize").default | undefined;
            variant: import("../types/ColorVariant").default | undefined;
            animation: import("../types/PlaceholderAnimation").default | undefined;
            width: string | number;
        }>;
        headerAttrs: import("vue").ComputedRef<{
            size: import("../types/PlaceholderSize").default | undefined;
            variant: import("../types/ColorVariant").default | undefined;
            animation: import("../types/PlaceholderAnimation").default | undefined;
            width: string | number;
        }>;
        footerAttrs: import("vue").ComputedRef<{
            size: import("../types/PlaceholderSize").default | undefined;
            variant: import("../types/ColorVariant").default | undefined;
            animation: import("../types/PlaceholderAnimation").default | undefined;
            width: string | number;
        }>;
        hideHeaderBoolean: import("vue").ComputedRef<boolean>;
        showFooterBoolean: import("vue").ComputedRef<boolean>;
        BTableSimple: import("vue").DefineComponent<{
            bordered: {
                type: null;
                required: false;
                default: boolean;
            };
            borderless: {
                type: null;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: null;
                required: false;
                default: boolean;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            hover: {
                type: null;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: null;
                required: false;
            };
            tableVariant: {
                type: null;
                required: false;
            };
            stickyHeader: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            captionTopBoolean: import("vue").ComputedRef<boolean>;
            borderlessBoolean: import("vue").ComputedRef<boolean>;
            borderedBoolean: import("vue").ComputedRef<boolean>;
            darkBoolean: import("vue").ComputedRef<boolean>;
            hoverBoolean: import("vue").ComputedRef<boolean>;
            smallBoolean: import("vue").ComputedRef<boolean>;
            stripedBoolean: import("vue").ComputedRef<boolean>;
            stickyHeaderBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<(import("../types/ClassValue").default | undefined)[]>;
            responsiveClasses: import("vue").ComputedRef<{
                [x: string]: boolean;
                'table-responsive': boolean;
                'b-table-sticky-header': boolean;
            }[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            bordered: {
                type: null;
                required: false;
                default: boolean;
            };
            borderless: {
                type: null;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: null;
                required: false;
                default: boolean;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            hover: {
                type: null;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: null;
                required: false;
            };
            tableVariant: {
                type: null;
                required: false;
            };
            stickyHeader: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            small: any;
            dark: any;
            stacked: string | boolean;
            bordered: any;
            borderless: any;
            captionTop: any;
            hover: any;
            responsive: string | boolean;
            striped: any;
            stickyHeader: any;
        }>;
        BPlaceholder: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            animation: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            widthString: import("vue").ComputedRef<string | undefined>;
            colsString: import("vue").ComputedRef<string | undefined>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
            }>;
            computedStyle: import("vue").ComputedRef<import("vue").StyleValue | undefined>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            width: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            cols: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            variant: {
                type: null;
                required: false;
            };
            size: {
                type: null;
                required: false;
            };
            animation: {
                type: null;
                required: false;
            };
        }>>, {
            tag: string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        rows: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        columns: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        cellWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        size: {
            type: null;
            required: false;
        };
        animation: {
            type: null;
            required: false;
        };
        variant: {
            type: null;
            required: false;
        };
        headerColumns: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        hideHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        headerCellWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        headerSize: {
            type: null;
            required: false;
        };
        headerAnimation: {
            type: null;
            required: false;
        };
        headerVariant: {
            type: null;
            required: false;
        };
        footerColumns: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        showFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        footerCellWidth: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        footerSize: {
            type: null;
            required: false;
        };
        footerAnimation: {
            type: null;
            required: false;
        };
        footerVariant: {
            type: null;
            required: false;
        };
    }>>, {
        columns: string | number;
        rows: string | number;
        hideHeader: any;
        cellWidth: string | number;
        headerCellWidth: string | number;
        showFooter: any;
        footerCellWidth: string | number;
    }>;
    BPlaceholderWrapper: import("vue").DefineComponent<{
        loading: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        loadingBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        loading: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        loading: any;
    }>;
    BPopover: import("vue").DefineComponent<{
        container: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
            default: string;
        };
        content: {
            type: StringConstructor;
        };
        id: {
            type: StringConstructor;
        };
        customClass: {
            type: StringConstructor;
            default: string;
        };
        noninteractive: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("bootstrap/js/dist/tooltip").default.PopoverPlacement | (() => import("bootstrap/js/dist/tooltip").default.PopoverPlacement)>;
            default: string;
        };
        target: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
            default: undefined;
        };
        title: {
            type: StringConstructor;
        };
        delay: {
            type: import("vue").PropType<number | import("../BootstrapVue").BPopoverDelayObject>;
            default: number;
        };
        triggers: {
            type: import("vue").PropType<"click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
            default: string;
        };
        show: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: undefined;
        };
        html: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        sanitize: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction>;
            default: string;
        };
    }, {
        element: import("vue").Ref<HTMLElement | undefined>;
        titleRef: import("vue").Ref<HTMLElement | undefined>;
        contentRef: import("vue").Ref<HTMLElement | undefined>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "inserted")[], "show" | "shown" | "hide" | "hidden" | "inserted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        container: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>>;
            default: string;
        };
        content: {
            type: StringConstructor;
        };
        id: {
            type: StringConstructor;
        };
        customClass: {
            type: StringConstructor;
            default: string;
        };
        noninteractive: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        placement: {
            type: import("vue").PropType<import("bootstrap/js/dist/tooltip").default.PopoverPlacement | (() => import("bootstrap/js/dist/tooltip").default.PopoverPlacement)>;
            default: string;
        };
        target: {
            type: import("vue").PropType<string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
            default: undefined;
        };
        title: {
            type: StringConstructor;
        };
        delay: {
            type: import("vue").PropType<number | import("../BootstrapVue").BPopoverDelayObject>;
            default: number;
        };
        triggers: {
            type: import("vue").PropType<"click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus">;
            default: string;
        };
        show: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
            default: undefined;
        };
        html: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        sanitize: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        offset: {
            type: import("vue").PropType<string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction>;
            default: string;
        };
    }>> & {
        onShow?: ((...args: any[]) => any) | undefined;
        onShown?: ((...args: any[]) => any) | undefined;
        onHide?: ((...args: any[]) => any) | undefined;
        onHidden?: ((...args: any[]) => any) | undefined;
        onInserted?: ((...args: any[]) => any) | undefined;
    }, {
        show: import("../types/Booleanish").default;
        variant: import("../types/ColorVariant").default;
        offset: string | import("bootstrap/js/dist/tooltip").default.Offset | import("bootstrap/js/dist/tooltip").default.OffsetFunction;
        target: string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined;
        html: import("../types/Booleanish").default;
        container: string | HTMLElement | import("vue").ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>>;
        placement: import("bootstrap/js/dist/tooltip").default.PopoverPlacement | (() => import("bootstrap/js/dist/tooltip").default.PopoverPlacement);
        delay: number | import("../BootstrapVue").BPopoverDelayObject;
        customClass: string;
        sanitize: import("../types/Booleanish").default;
        noninteractive: import("../types/Booleanish").default;
        triggers: "click" | "manual" | "focus" | "hover" | "click hover" | "click focus" | "hover focus" | "click hover focus";
    }>;
    BProgress: import("vue").DefineComponent<{
        variant: {
            type: null;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        height: {
            type: StringConstructor;
            required: false;
        };
        animated: {
            type: null;
            required: false;
            default: boolean;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: null;
            required: false;
            default: boolean;
        };
        showValue: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BProgressParentData>;
        props: any;
        animatedBoolean: import("vue").ComputedRef<boolean>;
        showProgressBoolean: import("vue").ComputedRef<boolean>;
        showValueBoolean: import("vue").ComputedRef<boolean>;
        stripedBoolean: import("vue").ComputedRef<boolean>;
        computedAttrs: import("vue").ComputedRef<{
            animated: boolean;
            max: string | number | undefined;
            precision: string | number;
            showProgress: boolean;
            showValue: boolean;
            striped: boolean;
            value: string | number;
            variant: import("../types/ColorVariant").default | undefined;
        }>;
        BProgressBar: import("vue").DefineComponent<{
            animated: {
                type: null;
                required: false;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                required: false;
            };
            labelHtml: {
                type: StringConstructor;
                required: false;
            };
            max: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            precision: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            showProgress: {
                type: null;
                required: false;
                default: boolean;
            };
            showValue: {
                type: null;
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            value: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            variant: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            animatedBoolean: import("vue").ComputedRef<boolean>;
            showProgressBoolean: import("vue").ComputedRef<boolean>;
            showValueBoolean: import("vue").ComputedRef<boolean>;
            stripedBoolean: import("vue").ComputedRef<boolean>;
            parent: import("../types/components").BProgressParentData | undefined;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean | undefined;
                'progress-bar-animated': boolean | undefined;
                'progress-bar-striped': boolean | undefined;
            }>;
            numberPrecision: import("vue").ComputedRef<number>;
            numberValue: import("vue").ComputedRef<number>;
            numberMax: import("vue").ComputedRef<number | undefined>;
            computedLabel: import("vue").ComputedRef<string>;
            computedWidth: import("vue").ComputedRef<string>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            animated: {
                type: null;
                required: false;
                default: boolean;
            };
            label: {
                type: StringConstructor;
                required: false;
            };
            labelHtml: {
                type: StringConstructor;
                required: false;
            };
            max: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
            };
            precision: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            showProgress: {
                type: null;
                required: false;
                default: boolean;
            };
            showValue: {
                type: null;
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            value: {
                type: (StringConstructor | NumberConstructor)[];
                required: false;
                default: number;
            };
            variant: {
                type: null;
                required: false;
            };
        }>>, {
            value: string | number;
            striped: any;
            animated: any;
            precision: string | number;
            showProgress: any;
            showValue: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: null;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        height: {
            type: StringConstructor;
            required: false;
        };
        animated: {
            type: null;
            required: false;
            default: boolean;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: null;
            required: false;
            default: boolean;
        };
        showValue: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
    }>>, {
        value: string | number;
        striped: any;
        animated: any;
        precision: string | number;
        showProgress: any;
        showValue: any;
    }>;
    BProgressBar: import("vue").DefineComponent<{
        animated: {
            type: null;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelHtml: {
            type: StringConstructor;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: null;
            required: false;
            default: boolean;
        };
        showValue: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        animatedBoolean: import("vue").ComputedRef<boolean>;
        showProgressBoolean: import("vue").ComputedRef<boolean>;
        showValueBoolean: import("vue").ComputedRef<boolean>;
        stripedBoolean: import("vue").ComputedRef<boolean>;
        parent: import("../types/components").BProgressParentData | undefined;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | undefined;
            'progress-bar-animated': boolean | undefined;
            'progress-bar-striped': boolean | undefined;
        }>;
        numberPrecision: import("vue").ComputedRef<number>;
        numberValue: import("vue").ComputedRef<number>;
        numberMax: import("vue").ComputedRef<number | undefined>;
        computedLabel: import("vue").ComputedRef<string>;
        computedWidth: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animated: {
            type: null;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelHtml: {
            type: StringConstructor;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: null;
            required: false;
            default: boolean;
        };
        showValue: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        value: string | number;
        striped: any;
        animated: any;
        precision: string | number;
        showProgress: any;
        showValue: any;
    }>;
    BRow: import("vue").DefineComponent<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        noGutters: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        alignV: {
            type: import("vue").PropType<import("../types/Alignment").default.Vertical>;
            default: null;
        };
        alignH: {
            type: import("vue").PropType<import("../types/Alignment").default.Horizontal>;
            default: null;
        };
        alignContent: {
            type: import("vue").PropType<import("../types/Alignment").default.Content>;
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'g-0': boolean;
        }>;
        rowColsClasses: string[];
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        tag: {
            type: StringConstructor;
            default: string;
        };
        gutterX: {
            type: StringConstructor;
            default: null;
        };
        gutterY: {
            type: StringConstructor;
            default: null;
        };
        noGutters: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        alignV: {
            type: import("vue").PropType<import("../types/Alignment").default.Vertical>;
            default: null;
        };
        alignH: {
            type: import("vue").PropType<import("../types/Alignment").default.Horizontal>;
            default: null;
        };
        alignContent: {
            type: import("vue").PropType<import("../types/Alignment").default.Content>;
            default: null;
        };
    }>>, {
        tag: string;
        alignContent: import("../types/Alignment").default.Content;
        gutterX: string;
        gutterY: string;
        noGutters: import("../types/Booleanish").default;
        alignV: import("../types/Alignment").default.Vertical;
        alignH: import("../types/Alignment").default.Horizontal;
    }>;
    BSkeleton: import("vue").DefineComponent<{
        height: {
            type: StringConstructor;
            required: false;
        };
        width: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        animation: {
            type: null;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<(string | {
            [x: string]: boolean | "fade" | "wave" | "throb";
        })[]>;
        style: import("vue").ComputedRef<import("vue").StyleValue>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        height: {
            type: StringConstructor;
            required: false;
        };
        width: {
            type: StringConstructor;
            required: false;
        };
        size: {
            type: StringConstructor;
            required: false;
        };
        animation: {
            type: null;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        type: any;
        animation: any;
    }>;
    BSkeletonIcon: import("vue").DefineComponent<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<string[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
    }>>, {
        animation: any;
    }>;
    BSkeletonTable: import("vue").DefineComponent<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
        columns: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        hideHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        rows: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        showFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        tableProps: {
            type: ObjectConstructor;
            required: false;
        };
    }, {
        props: any;
        hideHeaderBoolean: import("vue").ComputedRef<boolean>;
        showFooterBoolean: import("vue").ComputedRef<boolean>;
        BTableSimple: import("vue").DefineComponent<{
            bordered: {
                type: null;
                required: false;
                default: boolean;
            };
            borderless: {
                type: null;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: null;
                required: false;
                default: boolean;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            hover: {
                type: null;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: null;
                required: false;
            };
            tableVariant: {
                type: null;
                required: false;
            };
            stickyHeader: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            captionTopBoolean: import("vue").ComputedRef<boolean>;
            borderlessBoolean: import("vue").ComputedRef<boolean>;
            borderedBoolean: import("vue").ComputedRef<boolean>;
            darkBoolean: import("vue").ComputedRef<boolean>;
            hoverBoolean: import("vue").ComputedRef<boolean>;
            smallBoolean: import("vue").ComputedRef<boolean>;
            stripedBoolean: import("vue").ComputedRef<boolean>;
            stickyHeaderBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<(import("../types/ClassValue").default | undefined)[]>;
            responsiveClasses: import("vue").ComputedRef<{
                [x: string]: boolean;
                'table-responsive': boolean;
                'b-table-sticky-header': boolean;
            }[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            bordered: {
                type: null;
                required: false;
                default: boolean;
            };
            borderless: {
                type: null;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: null;
                required: false;
                default: boolean;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            hover: {
                type: null;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: null;
                required: false;
            };
            tableVariant: {
                type: null;
                required: false;
            };
            stickyHeader: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            small: any;
            dark: any;
            stacked: string | boolean;
            bordered: any;
            borderless: any;
            captionTop: any;
            hover: any;
            responsive: string | boolean;
            striped: any;
            stickyHeader: any;
        }>;
        BSkeleton: import("vue").DefineComponent<{
            height: {
                type: StringConstructor;
                required: false;
            };
            width: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: StringConstructor;
                required: false;
            };
            animation: {
                type: null;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            classes: import("vue").ComputedRef<(string | {
                [x: string]: boolean | "fade" | "wave" | "throb";
            })[]>;
            style: import("vue").ComputedRef<import("vue").StyleValue>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            height: {
                type: StringConstructor;
                required: false;
            };
            width: {
                type: StringConstructor;
                required: false;
            };
            size: {
                type: StringConstructor;
                required: false;
            };
            animation: {
                type: null;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }>>, {
            type: any;
            animation: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animation: {
            type: null;
            required: false;
            default: string;
        };
        columns: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        hideHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        rows: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        showFooter: {
            type: null;
            required: false;
            default: boolean;
        };
        tableProps: {
            type: ObjectConstructor;
            required: false;
        };
    }>>, {
        animation: any;
        columns: number;
        rows: number;
        hideHeader: any;
        showFooter: any;
    }>;
    BSkeletonWrapper: import("vue").DefineComponent<{
        loading: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        loadingBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        loading: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        loading: any;
    }>;
    BSpinner: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        smallBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'spinner-border': boolean;
            'spinner-border-sm': boolean;
            'spinner-grow': boolean;
            'spinner-grow-sm': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        label: {
            type: StringConstructor;
            required: false;
        };
        role: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        small: any;
        type: any;
        tag: string;
        role: string;
    }>;
    BTab: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonId: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: undefined;
        };
        lazyOnce: {
            type: null;
            required: false;
            default: undefined;
        };
        noBody: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        titleItemClass: {
            type: null;
            required: false;
            default: undefined;
        };
        titleLinkAttributes: {
            type: ObjectConstructor;
            required: false;
            default: undefined;
        };
        titleLinkClass: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        props: any;
        lazyRenderCompleted: import("vue").Ref<boolean>;
        activeBoolean: import("vue").ComputedRef<boolean>;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        lazyBoolean: import("vue").ComputedRef<boolean>;
        parentData: import("../types/components").BTabsParentData | null;
        computedLazy: import("vue").ComputedRef<boolean>;
        computedLazyOnce: import("vue").ComputedRef<boolean>;
        computedActive: import("vue").ComputedRef<boolean>;
        showSlot: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            active: boolean;
            show: boolean;
            'card-body': boolean | undefined;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        active: {
            type: null;
            required: false;
            default: boolean;
        };
        buttonId: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: undefined;
        };
        lazyOnce: {
            type: null;
            required: false;
            default: undefined;
        };
        noBody: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        titleItemClass: {
            type: null;
            required: false;
            default: undefined;
        };
        titleLinkAttributes: {
            type: ObjectConstructor;
            required: false;
            default: undefined;
        };
        titleLinkClass: {
            type: null;
            required: false;
            default: undefined;
        };
    }>>, {
        tag: string;
        disabled: any;
        active: any;
        noBody: string | boolean;
        lazy: any;
        buttonId: string;
        lazyOnce: any;
        titleItemClass: any;
        titleLinkAttributes: Record<string, any>;
        titleLinkClass: any;
    }>;
    BTable: import("vue").DefineComponent<{
        align: {
            type: null;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionTop: {
            type: null;
            required: false;
            default: boolean;
        };
        borderless: {
            type: null;
            required: false;
            default: boolean;
        };
        bordered: {
            type: null;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        fields: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        footClone: {
            type: null;
            required: false;
            default: boolean;
        };
        hover: {
            type: null;
            required: false;
            default: boolean;
        };
        items: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        provider: {
            type: null;
            required: false;
        };
        sortCompare: {
            type: null;
            required: false;
        };
        noProvider: {
            type: ArrayConstructor;
            required: false;
        };
        noProviderPaging: {
            type: null;
            required: false;
        };
        noProviderSorting: {
            type: null;
            required: false;
        };
        noProviderFiltering: {
            type: null;
            required: false;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
        sortBy: {
            type: StringConstructor;
            required: false;
        };
        sortDesc: {
            type: null;
            required: false;
            default: boolean;
        };
        sortInternal: {
            type: null;
            required: false;
            default: boolean;
        };
        selectable: {
            type: null;
            required: false;
            default: boolean;
        };
        stickySelect: {
            type: null;
            required: false;
            default: boolean;
        };
        selectHead: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        selectMode: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        selectionVariant: {
            type: null;
            required: false;
            default: string;
        };
        stickyHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        busy: {
            type: null;
            required: false;
            default: boolean;
        };
        showEmpty: {
            type: null;
            required: false;
            default: boolean;
        };
        perPage: {
            type: NumberConstructor;
            required: false;
        };
        currentPage: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        filter: {
            type: StringConstructor;
            required: false;
        };
        filterable: {
            type: ArrayConstructor;
            required: false;
        };
        emptyText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        emptyFilteredText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }, {
        props: any;
        footCloneBoolean: import("vue").ComputedRef<boolean>;
        sortDescBoolean: import("vue").ComputedRef<boolean>;
        sortInternalBoolean: import("vue").ComputedRef<boolean>;
        selectableBoolean: import("vue").ComputedRef<boolean>;
        stickySelectBoolean: import("vue").ComputedRef<boolean>;
        busyBoolean: import("vue").ComputedRef<boolean>;
        showEmptyBoolean: import("vue").ComputedRef<boolean>;
        noProviderPagingBoolean: import("vue").ComputedRef<boolean>;
        noProviderSortingBoolean: import("vue").ComputedRef<boolean>;
        noProviderFilteringBoolean: import("vue").ComputedRef<boolean>;
        internalBusyFlag: import("vue").Ref<boolean>;
        emit: {
            (e: "headClicked", key: import("../types/LiteralUnion").default<string, string>, field: import("../types/TableField").default<Record<string, unknown>>, event: MouseEvent, isFooter: boolean): void;
            (e: "rowClicked", item: import("../types/TableItem").default<Record<string, unknown>>, index: number, event: MouseEvent): void;
            (e: "rowDblClicked", item: import("../types/TableItem").default<Record<string, unknown>>, index: number, event: MouseEvent): void;
            (e: "rowHovered", item: import("../types/TableItem").default<Record<string, unknown>>, index: number, event: MouseEvent): void;
            (e: "rowUnhovered", item: import("../types/TableItem").default<Record<string, unknown>>, index: number, event: MouseEvent): void;
            (e: "rowSelected", value: import("../types/TableItem").default<Record<string, unknown>>): void;
            (e: "rowUnselected", value: import("../types/TableItem").default<Record<string, unknown>>): void;
            (e: "selection", value: import("../types/TableItem").default<Record<string, unknown>>[]): void;
            (e: "update:busy", value: boolean): void;
            (e: "update:sortBy", value: string): void;
            (e: "update:sortDesc", value: boolean): void;
            (e: "sorted", sortBy: string, isDesc: boolean): void;
            (e: "filtered", value: import("../types/TableItem").default<Record<string, unknown>>[]): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        tableClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'b-table-selectable': boolean;
            'b-table-selecting user-select-none': boolean;
            'b-table-busy': boolean;
            'b-table-sortable': boolean;
            'b-table-sort-desc': boolean;
            'b-table-sort-asc': boolean;
        }>;
        containerAttrs: import("vue").ComputedRef<{
            bordered: import("../types/Booleanish").default;
            borderless: import("../types/Booleanish").default;
            borderVariant: import("../types/ColorVariant").default | undefined;
            captionTop: import("../types/Booleanish").default;
            dark: import("../types/Booleanish").default;
            hover: import("../types/Booleanish").default;
            responsive: boolean | "sm" | "lg" | "md" | "xl" | "xxl";
            striped: import("../types/Booleanish").default;
            small: import("../types/Booleanish").default;
            tableClass: {
                [x: string]: boolean;
                'b-table-selectable': boolean;
                'b-table-selecting user-select-none': boolean;
                'b-table-busy': boolean;
                'b-table-sortable': boolean;
                'b-table-sort-desc': boolean;
                'b-table-sort-asc': boolean;
            };
            tableVariant: import("../types/ColorVariant").default | undefined;
            stickyHeader: import("../types/Booleanish").default;
        }>;
        itemHelper: {
            normaliseFields: (origFields: import("../types/TableField").default<Record<string, unknown>>[], items: import("../types/TableItem").default<Record<string, unknown>>[]) => import("../types").TableFieldObject<Record<string, unknown>>[];
            mapItems: (fields: import("../types/TableField").default<Record<string, unknown>>[], items: import("../types/TableItem").default<Record<string, unknown>>[], props: any, flags: Record<string, import("vue").Ref<boolean>>) => import("../types/TableItem").default<Record<string, unknown>>[];
            internalItems: import("vue").Ref<{
                [x: string]: unknown;
                _rowVariant?: import("../types/ColorVariant").default | undefined;
                _cellVariants?: Partial<Record<string, import("../types/ColorVariant").default>> | undefined;
                _showDetails?: boolean | undefined;
            }[]>;
            updateInternalItems: (items: import("../types/TableItem").default<Record<string, any>>[]) => Promise<import("../types/TableItem").default<Record<string, unknown>>[] | undefined>;
            filterEvent: import("vue").Ref<((items: import("../types/TableItem").default<Record<string, unknown>>[]) => void) | undefined>;
        };
        computedFields: import("vue").ComputedRef<import("../types").TableFieldObject<Record<string, unknown>>[]>;
        computedFieldsTotal: import("vue").ComputedRef<number>;
        isFilterableTable: import("vue").ComputedRef<boolean>;
        usesProvider: import("vue").ComputedRef<boolean>;
        requireItemsMapping: import("vue").ComputedRef<boolean>;
        computedItems: import("vue").ComputedRef<import("../types/TableItem").default<Record<string, unknown>>[]>;
        getFieldHeadLabel: (field: import("../types/TableField").default<Record<string, unknown>>) => string;
        headerClicked: (field: import("../types/TableField").default<Record<string, unknown>>, event: MouseEvent, isFooter?: boolean) => void;
        onRowClick: (row: import("../types/TableItem").default<Record<string, unknown>>, index: number, e: MouseEvent) => void;
        onRowDblClick: (row: import("../types/TableItem").default<Record<string, unknown>>, index: number, e: MouseEvent) => void;
        onRowMouseEnter: (row: import("../types/TableItem").default<Record<string, unknown>>, index: number, e: MouseEvent) => void;
        onRowMouseLeave: (row: import("../types/TableItem").default<Record<string, unknown>>, index: number, e: MouseEvent) => void;
        addSelectableCell: import("vue").ComputedRef<boolean>;
        isSortable: import("vue").ComputedRef<boolean>;
        handleFieldSorting: (field: import("../types/TableField").default<Record<string, unknown>>) => void;
        selectedItems: import("vue").Ref<Set<import("../types/TableItem").default<Record<string, unknown>>>>;
        isSelecting: import("vue").ComputedRef<boolean>;
        notifySelectionEvent: () => void;
        handleRowSelection: (row: import("../types/TableItem").default<Record<string, unknown>>, index: number, shiftClicked?: boolean) => void;
        callItemsProvider: () => Promise<import("../types/TableItem").default<Record<string, unknown>>[] | undefined>;
        toggleRowDetails: (tr: import("../types/TableItem").default<Record<string, unknown>>) => void;
        getFieldColumnClasses: (field: import("../types").TableFieldObject<Record<string, unknown>>) => (string | string[] | {
            'b-table-sortable-column': boolean | undefined;
            'b-table-sticky-column': boolean | undefined;
        } | undefined)[];
        getFieldRowClasses: (field: import("../types").TableFieldObject<Record<string, unknown>>, tr: import("../types/TableItem").default<Record<string, unknown>>) => (string | string[] | {
            'b-table-sticky-column': boolean | undefined;
        } | undefined)[];
        getRowClasses: (item: import("../types/TableItem").default<Record<string, unknown>>) => (string | null)[];
        selectAllRows: () => void;
        clearSelected: () => void;
        selectRow: (index: number) => void;
        unselectRow: (index: number) => void;
        providerPropsWatch: (prop: string, val: any, oldVal: any) => Promise<void>;
        BSpinner: import("vue").DefineComponent<{
            label: {
                type: StringConstructor;
                required: false;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }, {
            props: any;
            smallBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                [x: string]: boolean;
                'spinner-border': boolean;
                'spinner-border-sm': boolean;
                'spinner-grow': boolean;
                'spinner-grow-sm': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            label: {
                type: StringConstructor;
                required: false;
            };
            role: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tag: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
            variant: {
                type: null;
                required: false;
            };
        }>>, {
            small: any;
            type: any;
            tag: string;
            role: string;
        }>;
        BTableSimple: import("vue").DefineComponent<{
            bordered: {
                type: null;
                required: false;
                default: boolean;
            };
            borderless: {
                type: null;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: null;
                required: false;
                default: boolean;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            hover: {
                type: null;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: null;
                required: false;
            };
            tableVariant: {
                type: null;
                required: false;
            };
            stickyHeader: {
                type: null;
                required: false;
                default: boolean;
            };
        }, {
            props: any;
            captionTopBoolean: import("vue").ComputedRef<boolean>;
            borderlessBoolean: import("vue").ComputedRef<boolean>;
            borderedBoolean: import("vue").ComputedRef<boolean>;
            darkBoolean: import("vue").ComputedRef<boolean>;
            hoverBoolean: import("vue").ComputedRef<boolean>;
            smallBoolean: import("vue").ComputedRef<boolean>;
            stripedBoolean: import("vue").ComputedRef<boolean>;
            stickyHeaderBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<(import("../types/ClassValue").default | undefined)[]>;
            responsiveClasses: import("vue").ComputedRef<{
                [x: string]: boolean;
                'table-responsive': boolean;
                'b-table-sticky-header': boolean;
            }[]>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            bordered: {
                type: null;
                required: false;
                default: boolean;
            };
            borderless: {
                type: null;
                required: false;
                default: boolean;
            };
            borderVariant: {
                type: null;
                required: false;
            };
            captionTop: {
                type: null;
                required: false;
                default: boolean;
            };
            dark: {
                type: null;
                required: false;
                default: boolean;
            };
            hover: {
                type: null;
                required: false;
                default: boolean;
            };
            responsive: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            stacked: {
                type: (StringConstructor | BooleanConstructor)[];
                required: false;
                default: boolean;
            };
            striped: {
                type: null;
                required: false;
                default: boolean;
            };
            small: {
                type: null;
                required: false;
                default: boolean;
            };
            tableClass: {
                type: null;
                required: false;
            };
            tableVariant: {
                type: null;
                required: false;
            };
            stickyHeader: {
                type: null;
                required: false;
                default: boolean;
            };
        }>>, {
            small: any;
            dark: any;
            stacked: string | boolean;
            bordered: any;
            borderless: any;
            captionTop: any;
            hover: any;
            responsive: string | boolean;
            striped: any;
            stickyHeader: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("headClicked" | "rowClicked" | "rowDblClicked" | "rowHovered" | "rowUnhovered" | "rowSelected" | "rowUnselected" | "selection" | "update:busy" | "update:sortBy" | "update:sortDesc" | "sorted" | "filtered")[], "headClicked" | "rowClicked" | "rowDblClicked" | "rowHovered" | "rowUnhovered" | "rowSelected" | "rowUnselected" | "selection" | "update:busy" | "update:sortBy" | "update:sortDesc" | "sorted" | "filtered", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        align: {
            type: null;
            required: false;
        };
        caption: {
            type: StringConstructor;
            required: false;
        };
        captionTop: {
            type: null;
            required: false;
            default: boolean;
        };
        borderless: {
            type: null;
            required: false;
            default: boolean;
        };
        bordered: {
            type: null;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        fields: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        footClone: {
            type: null;
            required: false;
            default: boolean;
        };
        hover: {
            type: null;
            required: false;
            default: boolean;
        };
        items: {
            type: ArrayConstructor;
            required: false;
            default: () => never[];
        };
        provider: {
            type: null;
            required: false;
        };
        sortCompare: {
            type: null;
            required: false;
        };
        noProvider: {
            type: ArrayConstructor;
            required: false;
        };
        noProviderPaging: {
            type: null;
            required: false;
        };
        noProviderSorting: {
            type: null;
            required: false;
        };
        noProviderFiltering: {
            type: null;
            required: false;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
        sortBy: {
            type: StringConstructor;
            required: false;
        };
        sortDesc: {
            type: null;
            required: false;
            default: boolean;
        };
        sortInternal: {
            type: null;
            required: false;
            default: boolean;
        };
        selectable: {
            type: null;
            required: false;
            default: boolean;
        };
        stickySelect: {
            type: null;
            required: false;
            default: boolean;
        };
        selectHead: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        selectMode: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        selectionVariant: {
            type: null;
            required: false;
            default: string;
        };
        stickyHeader: {
            type: null;
            required: false;
            default: boolean;
        };
        busy: {
            type: null;
            required: false;
            default: boolean;
        };
        showEmpty: {
            type: null;
            required: false;
            default: boolean;
        };
        perPage: {
            type: NumberConstructor;
            required: false;
        };
        currentPage: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        filter: {
            type: StringConstructor;
            required: false;
        };
        filterable: {
            type: ArrayConstructor;
            required: false;
        };
        emptyText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        emptyFilteredText: {
            type: StringConstructor;
            required: false;
            default: string;
        };
    }>> & {
        onHeadClicked?: ((...args: any[]) => any) | undefined;
        onRowClicked?: ((...args: any[]) => any) | undefined;
        onRowDblClicked?: ((...args: any[]) => any) | undefined;
        onRowHovered?: ((...args: any[]) => any) | undefined;
        onRowUnhovered?: ((...args: any[]) => any) | undefined;
        onRowSelected?: ((...args: any[]) => any) | undefined;
        onRowUnselected?: ((...args: any[]) => any) | undefined;
        onSelection?: ((...args: any[]) => any) | undefined;
        "onUpdate:busy"?: ((...args: any[]) => any) | undefined;
        "onUpdate:sortBy"?: ((...args: any[]) => any) | undefined;
        "onUpdate:sortDesc"?: ((...args: any[]) => any) | undefined;
        onSorted?: ((...args: any[]) => any) | undefined;
        onFiltered?: ((...args: any[]) => any) | undefined;
    }, {
        small: any;
        dark: any;
        items: unknown[];
        busy: any;
        bordered: any;
        borderless: any;
        captionTop: any;
        hover: any;
        responsive: string | boolean;
        striped: any;
        stickyHeader: any;
        fields: unknown[];
        footClone: any;
        sortDesc: any;
        sortInternal: any;
        selectable: any;
        stickySelect: any;
        selectHead: string | boolean;
        selectMode: string;
        selectionVariant: any;
        showEmpty: any;
        currentPage: number;
        emptyText: string;
        emptyFilteredText: string;
    }>;
    BTableSimple: import("vue").DefineComponent<{
        bordered: {
            type: null;
            required: false;
            default: boolean;
        };
        borderless: {
            type: null;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        captionTop: {
            type: null;
            required: false;
            default: boolean;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        hover: {
            type: null;
            required: false;
            default: boolean;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        stacked: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tableClass: {
            type: null;
            required: false;
        };
        tableVariant: {
            type: null;
            required: false;
        };
        stickyHeader: {
            type: null;
            required: false;
            default: boolean;
        };
    }, {
        props: any;
        captionTopBoolean: import("vue").ComputedRef<boolean>;
        borderlessBoolean: import("vue").ComputedRef<boolean>;
        borderedBoolean: import("vue").ComputedRef<boolean>;
        darkBoolean: import("vue").ComputedRef<boolean>;
        hoverBoolean: import("vue").ComputedRef<boolean>;
        smallBoolean: import("vue").ComputedRef<boolean>;
        stripedBoolean: import("vue").ComputedRef<boolean>;
        stickyHeaderBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<(import("../types/ClassValue").default | undefined)[]>;
        responsiveClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'table-responsive': boolean;
            'b-table-sticky-header': boolean;
        }[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        bordered: {
            type: null;
            required: false;
            default: boolean;
        };
        borderless: {
            type: null;
            required: false;
            default: boolean;
        };
        borderVariant: {
            type: null;
            required: false;
        };
        captionTop: {
            type: null;
            required: false;
            default: boolean;
        };
        dark: {
            type: null;
            required: false;
            default: boolean;
        };
        hover: {
            type: null;
            required: false;
            default: boolean;
        };
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        stacked: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tableClass: {
            type: null;
            required: false;
        };
        tableVariant: {
            type: null;
            required: false;
        };
        stickyHeader: {
            type: null;
            required: false;
            default: boolean;
        };
    }>>, {
        small: any;
        dark: any;
        stacked: string | boolean;
        bordered: any;
        borderless: any;
        captionTop: any;
        hover: any;
        responsive: string | boolean;
        striped: any;
        stickyHeader: any;
    }>;
    BTbody: import("vue").DefineComponent<{
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: null;
            required: false;
        };
    }>>, {}>;
    BTd: import("vue").DefineComponent<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        stickyColumnBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'b-table-sticky-column': boolean;
            'table-b-table-default': boolean;
        }>;
        scope: import("vue").ComputedRef<"col" | "colspan" | "rowspan">;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        stickyColumn: any;
    }>;
    BTfoot: import("vue").DefineComponent<{
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: null;
            required: false;
        };
    }>>, {}>;
    BTh: import("vue").DefineComponent<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        stickyColumnBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            'b-table-sticky-column': boolean;
            'table-b-table-default': boolean;
        }>;
        scope: import("vue").ComputedRef<"col" | "colspan" | "rowspan">;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        colspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        rowspan: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        stackedHeading: {
            type: StringConstructor;
            required: false;
        };
        stickyColumn: {
            type: null;
            required: false;
            default: boolean;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        stickyColumn: any;
    }>;
    BThead: import("vue").DefineComponent<{
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: null;
            required: false;
        };
    }>>, {}>;
    BTr: import("vue").DefineComponent<{
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        variant: {
            type: null;
            required: false;
        };
    }>>, {}>;
    BToast: import("vue").DefineComponent<{
        delay: {
            type: NumberConstructor;
            default: number;
        };
        bodyClass: {
            type: StringConstructor;
        };
        body: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined>;
        };
        headerClass: {
            type: StringConstructor;
        };
        headerTag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        isStatus: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        autoHide: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        noCloseButton: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        noFade: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        noHoverPause: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        solid: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        static: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        title: {
            type: StringConstructor;
        };
        modelValue: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        toastClass: {
            type: import("vue").PropType<string[]>;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "destroyed")[], "update:modelValue" | "destroyed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        delay: {
            type: NumberConstructor;
            default: number;
        };
        bodyClass: {
            type: StringConstructor;
        };
        body: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined>;
        };
        headerClass: {
            type: StringConstructor;
        };
        headerTag: {
            type: StringConstructor;
            default: string;
        };
        animation: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        id: {
            type: StringConstructor;
        };
        isStatus: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        autoHide: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        noCloseButton: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        noFade: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        noHoverPause: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        solid: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        static: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        title: {
            type: StringConstructor;
        };
        modelValue: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        toastClass: {
            type: import("vue").PropType<string[]>;
        };
        variant: {
            type: import("vue").PropType<import("../types/ColorVariant").default>;
        };
        active: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        href: {
            type: StringConstructor;
        };
        rel: {
            type: StringConstructor;
            default: null;
        };
        replace: {
            type: import("vue").PropType<import("../types/Booleanish").default>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../types/LinkTarget").default>;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onDestroyed?: ((...args: any[]) => any) | undefined;
    }, {
        replace: import("../types/Booleanish").default;
        modelValue: import("../types/Booleanish").default;
        disabled: import("../types/Booleanish").default;
        solid: import("../types/Booleanish").default;
        exact: import("../types/Booleanish").default;
        static: import("../types/Booleanish").default;
        animation: import("../types/Booleanish").default;
        active: import("../types/Booleanish").default;
        activeClass: string;
        append: import("../types/Booleanish").default;
        event: string | unknown[];
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        routerTag: string;
        target: import("../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        headerTag: string;
        noFade: import("../types/Booleanish").default;
        delay: number;
        isStatus: import("../types/Booleanish").default;
        autoHide: import("../types/Booleanish").default;
        noCloseButton: import("../types/Booleanish").default;
        noHoverPause: import("../types/Booleanish").default;
    }>;
    BToaster: import("vue").DefineComponent<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        toastPositions: {
            'top-left': string;
            'top-center': string;
            'top-right': string;
            'middle-left': string;
            'middle-center': string;
            'middle-right': string;
            'bottom-left': string;
            'bottom-center': string;
            'bottom-right': string;
        };
        positionClass: import("vue").ComputedRef<string>;
        handleDestroy: (id: string) => void;
        BToast: import("vue").DefineComponent<{
            delay: {
                type: NumberConstructor;
                default: number;
            };
            bodyClass: {
                type: StringConstructor;
            };
            body: {
                type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }> | undefined>;
            };
            headerClass: {
                type: StringConstructor;
            };
            headerTag: {
                type: StringConstructor;
                default: string;
            };
            animation: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            id: {
                type: StringConstructor;
            };
            isStatus: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            autoHide: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noCloseButton: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noFade: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noHoverPause: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            solid: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            static: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            title: {
                type: StringConstructor;
            };
            modelValue: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            toastClass: {
                type: import("vue").PropType<string[]>;
            };
            variant: {
                type: import("vue").PropType<import("../types/ColorVariant").default>;
            };
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "destroyed")[], "update:modelValue" | "destroyed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            delay: {
                type: NumberConstructor;
                default: number;
            };
            bodyClass: {
                type: StringConstructor;
            };
            body: {
                type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }> | undefined>;
            };
            headerClass: {
                type: StringConstructor;
            };
            headerTag: {
                type: StringConstructor;
                default: string;
            };
            animation: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            id: {
                type: StringConstructor;
            };
            isStatus: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            autoHide: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noCloseButton: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noFade: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noHoverPause: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            solid: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            static: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            title: {
                type: StringConstructor;
            };
            modelValue: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            toastClass: {
                type: import("vue").PropType<string[]>;
            };
            variant: {
                type: import("vue").PropType<import("../types/ColorVariant").default>;
            };
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onDestroyed?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            modelValue: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            solid: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            static: import("../types/Booleanish").default;
            animation: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
            headerTag: string;
            noFade: import("../types/Booleanish").default;
            delay: number;
            isStatus: import("../types/Booleanish").default;
            autoHide: import("../types/Booleanish").default;
            noCloseButton: import("../types/Booleanish").default;
            noHoverPause: import("../types/Booleanish").default;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }>>, {
        position: any;
    }>;
    BToastContainer: import("vue").DefineComponent<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        toastPositions: {
            'top-left': string;
            'top-center': string;
            'top-right': string;
            'middle-left': string;
            'middle-center': string;
            'middle-right': string;
            'bottom-left': string;
            'bottom-center': string;
            'bottom-right': string;
        };
        positionClass: import("vue").ComputedRef<string>;
        handleDestroy: (id: string) => void;
        BToast: import("vue").DefineComponent<{
            delay: {
                type: NumberConstructor;
                default: number;
            };
            bodyClass: {
                type: StringConstructor;
            };
            body: {
                type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }> | undefined>;
            };
            headerClass: {
                type: StringConstructor;
            };
            headerTag: {
                type: StringConstructor;
                default: string;
            };
            animation: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            id: {
                type: StringConstructor;
            };
            isStatus: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            autoHide: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noCloseButton: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noFade: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noHoverPause: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            solid: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            static: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            title: {
                type: StringConstructor;
            };
            modelValue: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            toastClass: {
                type: import("vue").PropType<string[]>;
            };
            variant: {
                type: import("vue").PropType<import("../types/ColorVariant").default>;
            };
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "destroyed")[], "update:modelValue" | "destroyed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            delay: {
                type: NumberConstructor;
                default: number;
            };
            bodyClass: {
                type: StringConstructor;
            };
            body: {
                type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }> | undefined>;
            };
            headerClass: {
                type: StringConstructor;
            };
            headerTag: {
                type: StringConstructor;
                default: string;
            };
            animation: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            id: {
                type: StringConstructor;
            };
            isStatus: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            autoHide: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noCloseButton: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noFade: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            noHoverPause: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            solid: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            static: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            title: {
                type: StringConstructor;
            };
            modelValue: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            toastClass: {
                type: import("vue").PropType<string[]>;
            };
            variant: {
                type: import("vue").PropType<import("../types/ColorVariant").default>;
            };
            active: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<import("../types/Booleanish").default>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            onDestroyed?: ((...args: any[]) => any) | undefined;
        }, {
            replace: import("../types/Booleanish").default;
            modelValue: import("../types/Booleanish").default;
            disabled: import("../types/Booleanish").default;
            solid: import("../types/Booleanish").default;
            exact: import("../types/Booleanish").default;
            static: import("../types/Booleanish").default;
            animation: import("../types/Booleanish").default;
            active: import("../types/Booleanish").default;
            activeClass: string;
            append: import("../types/Booleanish").default;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
            headerTag: string;
            noFade: import("../types/Booleanish").default;
            delay: number;
            isStatus: import("../types/Booleanish").default;
            autoHide: import("../types/Booleanish").default;
            noCloseButton: import("../types/Booleanish").default;
            noHoverPause: import("../types/Booleanish").default;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        position: {
            type: null;
            required: false;
            default: string;
        };
        instance: {
            type: null;
            required: false;
        };
    }>>, {
        position: any;
    }>;
    BTabs: import("vue").DefineComponent<{
        activeNavItemClass: {
            type: null;
            required: false;
        };
        activeTabClass: {
            type: null;
            required: false;
        };
        align: {
            type: null;
            required: false;
        };
        card: {
            type: null;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: null;
            required: false;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        fill: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        justified: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        navClass: {
            type: null;
            required: false;
        };
        navWrapperClass: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        noNavStyle: {
            type: null;
            required: false;
            default: boolean;
        };
        pills: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
    }, {
        injectionKey: import("vue").InjectionKey<import("../types/components").BTabsParentData>;
        props: any;
        cardBoolean: import("vue").ComputedRef<boolean>;
        endBoolean: import("vue").ComputedRef<boolean>;
        fillBoolean: import("vue").ComputedRef<boolean>;
        justifiedBoolean: import("vue").ComputedRef<boolean>;
        lazyBoolean: import("vue").ComputedRef<boolean>;
        noFadeBoolean: import("vue").ComputedRef<boolean>;
        noNavStyleBoolean: import("vue").ComputedRef<boolean>;
        pillsBoolean: import("vue").ComputedRef<boolean>;
        smallBoolean: import("vue").ComputedRef<boolean>;
        verticalBoolean: import("vue").ComputedRef<boolean>;
        emit: {
            (e: "update:modelValue", value: number): void;
            (e: "activate-tab", v1: number, v2: number, v3: import("../utils").BvEvent): void;
            (e: "click"): void;
        };
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        _tabIndex: import("vue").Ref<number>;
        _currentTabButton: import("vue").Ref<string>;
        tabIndex: import("vue").WritableComputedRef<number>;
        tabs: import("vue").ComputedRef<any[]>;
        showEmpty: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'd-flex': boolean;
            'align-items-start': boolean;
        }>;
        navTabsClasses: import("vue").ComputedRef<{
            [x: string]: boolean;
            'nav-pills': boolean;
            'flex-column me-3': boolean;
            'nav-fill': boolean;
            'card-header-tabs': boolean;
            'nav-justified': boolean;
            'nav-tabs': boolean;
            small: boolean;
        }>;
        activateTab: (index: number) => boolean;
        handleClick: (event: MouseEvent, index: number) => void;
        getTabs: (slots: any) => any[];
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "click" | "activate-tab")[], "update:modelValue" | "click" | "activate-tab", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        activeNavItemClass: {
            type: null;
            required: false;
        };
        activeTabClass: {
            type: null;
            required: false;
        };
        align: {
            type: null;
            required: false;
        };
        card: {
            type: null;
            required: false;
            default: boolean;
        };
        contentClass: {
            type: null;
            required: false;
        };
        end: {
            type: null;
            required: false;
            default: boolean;
        };
        fill: {
            type: null;
            required: false;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            required: false;
        };
        justified: {
            type: null;
            required: false;
            default: boolean;
        };
        lazy: {
            type: null;
            required: false;
            default: boolean;
        };
        navClass: {
            type: null;
            required: false;
        };
        navWrapperClass: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        noNavStyle: {
            type: null;
            required: false;
            default: boolean;
        };
        pills: {
            type: null;
            required: false;
            default: boolean;
        };
        small: {
            type: null;
            required: false;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        vertical: {
            type: null;
            required: false;
            default: boolean;
        };
        modelValue: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
        onClick?: ((...args: any[]) => any) | undefined;
        "onActivate-tab"?: ((...args: any[]) => any) | undefined;
    }, {
        small: any;
        fill: any;
        modelValue: number;
        tag: string;
        end: any;
        vertical: any;
        lazy: any;
        noFade: any;
        justified: any;
        pills: any;
        card: any;
        noNavStyle: any;
    }>;
    BTransition: import("vue").DefineComponent<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: ObjectConstructor;
            required: false;
        };
    }, {
        props: any;
        appearBoolean: import("vue").ComputedRef<boolean>;
        noFadeBoolean: import("vue").ComputedRef<boolean>;
        fadeProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
        }>;
        baseProperties: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../types/TransitionMode").default | undefined;
            css: boolean;
        }>;
        computedAttrs: import("vue").ComputedRef<{
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../types/TransitionMode").default | undefined;
            css: boolean;
        } | {
            appear: boolean;
            appearActiveClass: string;
            appearToClass: string;
            name: string;
            enterActiveClass: string;
            enterToClass: string;
            leaveActiveClass: string;
            leaveToClass: string;
            enterFromClass: string;
            leaveFromClass: string;
            mode: import("../types/TransitionMode").default | undefined;
            css: boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        appear: {
            type: null;
            required: false;
            default: boolean;
        };
        mode: {
            type: null;
            required: false;
        };
        noFade: {
            type: null;
            required: false;
            default: boolean;
        };
        transProps: {
            type: ObjectConstructor;
            required: false;
        };
    }>>, {
        noFade: any;
        appear: any;
    }>;
    BToastPlugin: import("@vue/runtime-core").Plugin;
};
export default _default;
