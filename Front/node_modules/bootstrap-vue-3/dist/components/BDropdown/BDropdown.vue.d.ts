import { Dropdown } from 'bootstrap';
import { ComponentPublicInstance } from 'vue';
import type { Booleanish, ButtonType, ButtonVariant } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: false;
    };
    menuClass: {
        type: null;
        required: false;
    };
    size: {
        type: null;
        required: false;
    };
    splitClass: {
        type: null;
        required: false;
    };
    splitVariant: {
        type: null;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    toggleClass: {
        type: null;
        required: false;
    };
    autoClose: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    block: {
        type: null;
        required: false;
        default: boolean;
    };
    boundary: {
        type: null;
        required: false;
        default: string;
    };
    dark: {
        type: null;
        required: false;
        default: boolean;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    isNav: {
        type: null;
        required: false;
        default: boolean;
    };
    dropup: {
        type: null;
        required: false;
        default: boolean;
    };
    dropright: {
        type: null;
        required: false;
        default: boolean;
    };
    dropleft: {
        type: null;
        required: false;
        default: boolean;
    };
    noFlip: {
        type: null;
        required: false;
        default: boolean;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    popperOpts: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    right: {
        type: null;
        required: false;
        default: boolean;
    };
    role: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    split: {
        type: null;
        required: false;
        default: boolean;
    };
    splitButtonType: {
        type: null;
        required: false;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    noCaret: {
        type: null;
        required: false;
        default: boolean;
    };
    toggleText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}, {
    props: any;
    blockBoolean: import("vue").ComputedRef<boolean>;
    darkBoolean: import("vue").ComputedRef<boolean>;
    disabledBoolean: import("vue").ComputedRef<boolean>;
    dropupBoolean: import("vue").ComputedRef<boolean>;
    droprightBoolean: import("vue").ComputedRef<boolean>;
    isNavBoolean: import("vue").ComputedRef<boolean>;
    dropleftBoolean: import("vue").ComputedRef<boolean>;
    rightBoolean: import("vue").ComputedRef<boolean>;
    splitBoolean: import("vue").ComputedRef<boolean>;
    noCaretBoolean: import("vue").ComputedRef<boolean>;
    emit: {
        (e: 'show'): void;
        (e: 'shown'): void;
        (e: 'hide'): void;
        (e: 'hidden'): void;
        (e: 'click', event: MouseEvent): void;
        (e: 'toggle'): void;
    };
    parent: import("vue").Ref<HTMLElement | undefined>;
    dropdown: import("vue").Ref<ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined>;
    instance: import("vue").Ref<Dropdown | undefined>;
    computedId: import("vue").ComputedRef<string>;
    onSplitClick: (event: MouseEvent) => void;
    classes: import("vue").ComputedRef<{
        'd-grid': boolean;
        'd-flex': boolean;
    }>;
    buttonClasses: import("vue").ComputedRef<{
        'nav-link': boolean;
        'dropdown-toggle': boolean;
        'dropdown-toggle-no-caret': boolean;
        'w-100': boolean;
    }>;
    dropdownMenuClasses: import("vue").ComputedRef<{
        'dropdown-menu-dark': boolean;
        'dropdown-menu-end': boolean;
    }>;
    buttonAttr: import("vue").ComputedRef<{
        'data-bs-toggle': string | undefined;
        'aria-expanded': boolean | undefined;
        ref: import("vue").Ref<ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
        href: string | undefined;
    }>;
    splitAttr: import("vue").ComputedRef<{
        ref: import("vue").Ref<ComponentPublicInstance<HTMLElement, {}, {}, {}, {}, {}, HTMLElement, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | undefined> | undefined;
    }>;
    hide: () => void;
    BButton: import("vue").DefineComponent<{
        active: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<import("../../types/InputSize").default>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<ButtonType>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<ButtonVariant>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }, {
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
            active: boolean;
            'rounded-pill': boolean;
            'rounded-0': boolean;
            disabled: boolean;
        }>;
        attrs: import("vue").ComputedRef<{
            'aria-disabled': boolean | null;
            'aria-pressed': boolean | null;
            autocomplete: string | null;
            disabled: boolean | null;
            href: string | undefined;
            rel: string | null | undefined;
            role: string | null;
            target: import("../../types/LinkTarget").default | null;
            type: ButtonType | null;
            to: import("vue-router").RouteLocationRaw | null;
            append: Booleanish | null;
            activeClass: string | null;
            event: string | unknown[] | null;
            exact: Booleanish | null;
            exactActiveClass: string | null;
            replace: Booleanish | null;
            routerComponentName: string | null;
            routerTag: string | null;
        }>;
        computedTag: import("vue").ComputedRef<string | import("vue").DefineComponent<{
            active: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }, {
            tag: import("vue").ComputedRef<string>;
            routerAttr: import("vue").ComputedRef<{
                to: import("vue-router").RouteLocationRaw;
                href: string;
                target: import("../../types/LinkTarget").default;
                rel: string | null;
                tabindex: unknown;
                'aria-disabled': string | null;
            }>;
            link: import("vue").Ref<HTMLElement>;
            clicked: (e: MouseEvent) => void;
            activeBoolean: import("vue").ComputedRef<boolean>;
            appendBoolean: import("vue").ComputedRef<boolean>;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            replaceBoolean: import("vue").ComputedRef<boolean>;
            exactBoolean: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            active: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            append: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            event: {
                type: (StringConstructor | ArrayConstructor)[];
                default: string;
            };
            exact: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
            };
            rel: {
                type: StringConstructor;
                default: null;
            };
            replace: {
                type: import("vue").PropType<Booleanish>;
                default: boolean;
            };
            routerComponentName: {
                type: StringConstructor;
                default: string;
            };
            routerTag: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: import("vue").PropType<import("../../types/LinkTarget").default>;
                default: string;
            };
            to: {
                type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
                default: null;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            replace: Booleanish;
            disabled: Booleanish;
            exact: Booleanish;
            active: Booleanish;
            activeClass: string;
            append: Booleanish;
            event: string | unknown[];
            exactActiveClass: string;
            rel: string;
            routerComponentName: string;
            routerTag: string;
            target: import("../../types/LinkTarget").default;
            to: import("vue-router").RouteLocationRaw;
        }>>;
        clicked: (e: MouseEvent) => void;
        loadingBoolean: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "update:pressed")[], "click" | "update:pressed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        active: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        disabled: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        href: {
            type: StringConstructor;
            required: false;
        };
        pill: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        pressed: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        rel: {
            type: StringConstructor;
            default: undefined;
        };
        size: {
            type: import("vue").PropType<import("../../types/InputSize").default>;
            default: string;
        };
        squared: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        tag: {
            type: StringConstructor;
            default: string;
        };
        target: {
            type: import("vue").PropType<import("../../types/LinkTarget").default>;
            default: string;
        };
        type: {
            type: import("vue").PropType<ButtonType>;
            default: string;
        };
        variant: {
            type: import("vue").PropType<ButtonVariant>;
            default: string;
        };
        loading: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        loadingMode: {
            type: import("vue").PropType<"fill" | "inline">;
            default: string;
        };
        activeClass: {
            type: StringConstructor;
            default: string;
        };
        append: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        event: {
            type: (StringConstructor | ArrayConstructor)[];
            default: string;
        };
        exact: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        exactActiveClass: {
            type: StringConstructor;
            default: string;
        };
        replace: {
            type: import("vue").PropType<Booleanish>;
            default: boolean;
        };
        routerComponentName: {
            type: StringConstructor;
            default: string;
        };
        routerTag: {
            type: StringConstructor;
            default: string;
        };
        to: {
            type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            default: null;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
        "onUpdate:pressed"?: ((...args: any[]) => any) | undefined;
    }, {
        replace: Booleanish;
        type: ButtonType;
        tag: string;
        variant: ButtonVariant;
        disabled: Booleanish;
        size: import("../../types/InputSize").default;
        exact: Booleanish;
        active: Booleanish;
        activeClass: string;
        append: Booleanish;
        event: string | unknown[];
        exactActiveClass: string;
        rel: string;
        routerComponentName: string;
        routerTag: string;
        target: import("../../types/LinkTarget").default;
        to: import("vue-router").RouteLocationRaw;
        pill: Booleanish;
        pressed: Booleanish;
        squared: Booleanish;
        loading: Booleanish;
        loadingMode: "fill" | "inline";
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show" | "shown" | "hide" | "hidden" | "toggle" | "click")[], "show" | "shown" | "hide" | "hidden" | "toggle" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: false;
    };
    menuClass: {
        type: null;
        required: false;
    };
    size: {
        type: null;
        required: false;
    };
    splitClass: {
        type: null;
        required: false;
    };
    splitVariant: {
        type: null;
        required: false;
    };
    text: {
        type: StringConstructor;
        required: false;
    };
    toggleClass: {
        type: null;
        required: false;
    };
    autoClose: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    block: {
        type: null;
        required: false;
        default: boolean;
    };
    boundary: {
        type: null;
        required: false;
        default: string;
    };
    dark: {
        type: null;
        required: false;
        default: boolean;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    isNav: {
        type: null;
        required: false;
        default: boolean;
    };
    dropup: {
        type: null;
        required: false;
        default: boolean;
    };
    dropright: {
        type: null;
        required: false;
        default: boolean;
    };
    dropleft: {
        type: null;
        required: false;
        default: boolean;
    };
    noFlip: {
        type: null;
        required: false;
        default: boolean;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    popperOpts: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    right: {
        type: null;
        required: false;
        default: boolean;
    };
    role: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    split: {
        type: null;
        required: false;
        default: boolean;
    };
    splitButtonType: {
        type: null;
        required: false;
        default: string;
    };
    splitHref: {
        type: StringConstructor;
        required: false;
        default: undefined;
    };
    noCaret: {
        type: null;
        required: false;
        default: boolean;
    };
    toggleText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}>> & {
    onShow?: ((...args: any[]) => any) | undefined;
    onShown?: ((...args: any[]) => any) | undefined;
    onHide?: ((...args: any[]) => any) | undefined;
    onHidden?: ((...args: any[]) => any) | undefined;
    onClick?: ((...args: any[]) => any) | undefined;
    onToggle?: ((...args: any[]) => any) | undefined;
}, {
    split: any;
    isNav: any;
    variant: any;
    dark: any;
    disabled: any;
    right: any;
    block: any;
    offset: string | number;
    role: string;
    autoClose: string | boolean;
    boundary: any;
    dropup: any;
    dropright: any;
    dropleft: any;
    noFlip: any;
    popperOpts: Record<string, any>;
    splitButtonType: any;
    splitHref: string;
    noCaret: any;
    toggleText: string;
}>;
export default _sfc_main;
