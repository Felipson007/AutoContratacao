import type { BProgressParentData } from '../../types/components';
export declare const injectionKey: InjectionKey<BProgressParentData>;
import type { ColorVariant } from '../../types';
import { InjectionKey } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    variant: {
        type: null;
        required: false;
    };
    max: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    height: {
        type: StringConstructor;
        required: false;
    };
    animated: {
        type: null;
        required: false;
        default: boolean;
    };
    precision: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    showProgress: {
        type: null;
        required: false;
        default: boolean;
    };
    showValue: {
        type: null;
        required: false;
        default: boolean;
    };
    striped: {
        type: null;
        required: false;
        default: boolean;
    };
    value: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
}, {
    injectionKey: InjectionKey<BProgressParentData>;
    props: any;
    animatedBoolean: import("vue").ComputedRef<boolean>;
    showProgressBoolean: import("vue").ComputedRef<boolean>;
    showValueBoolean: import("vue").ComputedRef<boolean>;
    stripedBoolean: import("vue").ComputedRef<boolean>;
    computedAttrs: import("vue").ComputedRef<{
        animated: boolean;
        max: string | number | undefined;
        precision: string | number;
        showProgress: boolean;
        showValue: boolean;
        striped: boolean;
        value: string | number;
        variant: ColorVariant | undefined;
    }>;
    BProgressBar: import("vue").DefineComponent<{
        animated: {
            type: null;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelHtml: {
            type: StringConstructor;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: null;
            required: false;
            default: boolean;
        };
        showValue: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        variant: {
            type: null;
            required: false;
        };
    }, {
        props: any;
        animatedBoolean: import("vue").ComputedRef<boolean>;
        showProgressBoolean: import("vue").ComputedRef<boolean>;
        showValueBoolean: import("vue").ComputedRef<boolean>;
        stripedBoolean: import("vue").ComputedRef<boolean>;
        parent: BProgressParentData | undefined;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean | undefined;
            'progress-bar-animated': boolean | undefined;
            'progress-bar-striped': boolean | undefined;
        }>;
        numberPrecision: import("vue").ComputedRef<number>;
        numberValue: import("vue").ComputedRef<number>;
        numberMax: import("vue").ComputedRef<number | undefined>;
        computedLabel: import("vue").ComputedRef<string>;
        computedWidth: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        animated: {
            type: null;
            required: false;
            default: boolean;
        };
        label: {
            type: StringConstructor;
            required: false;
        };
        labelHtml: {
            type: StringConstructor;
            required: false;
        };
        max: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
        };
        precision: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        showProgress: {
            type: null;
            required: false;
            default: boolean;
        };
        showValue: {
            type: null;
            required: false;
            default: boolean;
        };
        striped: {
            type: null;
            required: false;
            default: boolean;
        };
        value: {
            type: (StringConstructor | NumberConstructor)[];
            required: false;
            default: number;
        };
        variant: {
            type: null;
            required: false;
        };
    }>>, {
        value: string | number;
        striped: any;
        animated: any;
        precision: string | number;
        showProgress: any;
        showValue: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    variant: {
        type: null;
        required: false;
    };
    max: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
    };
    height: {
        type: StringConstructor;
        required: false;
    };
    animated: {
        type: null;
        required: false;
        default: boolean;
    };
    precision: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
    showProgress: {
        type: null;
        required: false;
        default: boolean;
    };
    showValue: {
        type: null;
        required: false;
        default: boolean;
    };
    striped: {
        type: null;
        required: false;
        default: boolean;
    };
    value: {
        type: (StringConstructor | NumberConstructor)[];
        required: false;
        default: number;
    };
}>>, {
    value: string | number;
    striped: any;
    animated: any;
    precision: string | number;
    showProgress: any;
    showValue: any;
}>;
export default _sfc_main;
