import { Ref, VNodeNormalizedChildren } from 'vue';
import type { ButtonVariant, ClassValue, ColorVariant, InputSize, InputType } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    addButtonText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    addButtonVariant: {
        type: null;
        required: false;
        default: string;
    };
    addOnChange: {
        type: null;
        required: false;
        default: boolean;
    };
    autofocus: {
        type: null;
        required: false;
        default: boolean;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    duplicateTagText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    inputAttrs: {
        type: ObjectConstructor;
        required: false;
    };
    inputClass: {
        type: null;
        required: false;
    };
    inputId: {
        type: StringConstructor;
        required: false;
    };
    inputType: {
        type: null;
        required: false;
        default: string;
    };
    invalidTagText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    form: {
        type: StringConstructor;
        required: false;
    };
    limit: {
        type: NumberConstructor;
        required: false;
    };
    limitTagsText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    modelValue: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    name: {
        type: StringConstructor;
        required: false;
    };
    noAddOnEnter: {
        type: null;
        required: false;
        default: boolean;
    };
    noOuterFocus: {
        type: null;
        required: false;
        default: boolean;
    };
    noTagRemove: {
        type: null;
        required: false;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    removeOnDelete: {
        type: null;
        required: false;
        default: boolean;
    };
    required: {
        type: null;
        required: false;
        default: boolean;
    };
    separator: {
        type: (StringConstructor | ArrayConstructor)[];
        required: false;
    };
    state: {
        type: null;
        required: false;
        default: undefined;
    };
    size: {
        type: null;
        required: false;
    };
    tagClass: {
        type: null;
        required: false;
    };
    tagPills: {
        type: null;
        required: false;
        default: boolean;
    };
    tagRemoveLabel: {
        type: StringConstructor;
        required: false;
    };
    tagRemovedLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    tagValidator: {
        type: FunctionConstructor;
        required: false;
        default: () => boolean;
    };
    tagVariant: {
        type: null;
        required: false;
        default: string;
    };
}, {
    props: any;
    addOnChangeBoolean: import("vue").ComputedRef<boolean>;
    autofocusBoolean: import("vue").ComputedRef<boolean>;
    disabledBoolean: import("vue").ComputedRef<boolean>;
    noAddOnEnterBoolean: import("vue").ComputedRef<boolean>;
    noOuterFocusBoolean: import("vue").ComputedRef<boolean>;
    noTagRemoveBoolean: import("vue").ComputedRef<boolean>;
    removeOnDeleteBoolean: import("vue").ComputedRef<boolean>;
    requiredBoolean: import("vue").ComputedRef<boolean>;
    stateBoolean: import("vue").ComputedRef<boolean | undefined>;
    tagPillsBoolean: import("vue").ComputedRef<boolean>;
    emit: {
        (e: 'update:modelValue', value: Array<string>): void;
        (e: 'input', value: Array<string>): void;
        (e: 'tag-state', ...args: Array<Array<string>>): void;
        (e: 'focus', value: FocusEvent): void;
        (e: 'focusin', value: FocusEvent): void;
        (e: 'focusout', value: FocusEvent): void;
        (e: 'blur', value: FocusEvent): void;
    };
    input: Ref<HTMLInputElement | null>;
    computedId: import("vue").ComputedRef<string>;
    _inputId: import("vue").ComputedRef<string>;
    tags: Ref<string[]>;
    inputValue: Ref<string>;
    shouldRemoveOnDelete: Ref<boolean>;
    focus: Ref<boolean>;
    lastRemovedTag: Ref<string>;
    validTags: Ref<string[]>;
    invalidTags: Ref<string[]>;
    duplicateTags: Ref<string[]>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
        disabled: boolean;
        focus: boolean;
        'is-invalid': boolean;
        'is-valid': boolean;
    }>;
    isDuplicate: import("vue").ComputedRef<boolean>;
    isInvalid: import("vue").ComputedRef<boolean>;
    isLimitReached: import("vue").ComputedRef<boolean>;
    disableAddButton: import("vue").ComputedRef<boolean>;
    checkAutofocus: () => void;
    onFocusin: (e: FocusEvent) => void;
    onFocus: (e: FocusEvent) => void;
    onBlur: (e: FocusEvent) => void;
    onInput: (e: Event | string) => void;
    onChange: (e: Event) => void;
    onKeydown: (e: KeyboardEvent) => void;
    addTag: (tag?: string) => void;
    removeTag: (tag?: VNodeNormalizedChildren) => void;
    slotAttrs: import("vue").ComputedRef<{
        addButtonText: string;
        addButtonVariant: ButtonVariant;
        addTag: (tag?: string) => void;
        disableAddButton: import("vue").ComputedRef<boolean>;
        disabled: boolean;
        duplicateTagText: string;
        duplicateTags: Ref<string[]>;
        form: string | undefined;
        inputAttrs: {
            disabled: boolean;
            form: string | undefined;
            id: import("vue").ComputedRef<string>;
            value: Ref<string>;
        };
        inputHandlers: {
            input: (e: Event | string) => void;
            keydown: (e: KeyboardEvent) => void;
            change: (e: Event) => void;
        };
        inputId: import("vue").ComputedRef<string>;
        inputType: InputType;
        invalidTagText: string;
        invalidTags: Ref<string[]>;
        isDuplicate: import("vue").ComputedRef<boolean>;
        isInvalid: import("vue").ComputedRef<boolean>;
        isLimitReached: import("vue").ComputedRef<boolean>;
        limitTagsText: string;
        limit: number | undefined;
        noTagRemove: boolean;
        placeholder: string;
        removeTag: (tag?: VNodeNormalizedChildren) => void;
        required: boolean;
        separator: string | unknown[] | undefined;
        size: InputSize | undefined;
        state: boolean | undefined;
        tagClass: ClassValue | undefined;
        tagPills: boolean;
        tagRemoveLabel: string | undefined;
        tagVariant: ColorVariant;
        tags: Ref<string[]>;
    }>;
    BFormTag: import("vue").DefineComponent<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        noRemove: {
            type: null;
            required: false;
            default: boolean;
        };
        pill: {
            type: null;
            required: false;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        noRemoveBoolean: import("vue").ComputedRef<boolean>;
        pillBoolean: import("vue").ComputedRef<boolean>;
        emit: (e: "remove", value?: VNodeNormalizedChildren | undefined) => void;
        slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        tagText: import("vue").ComputedRef<string>;
        computedId: import("vue").ComputedRef<string>;
        taglabelId: import("vue").ComputedRef<string>;
        classes: import("vue").ComputedRef<(string | {
            'text-dark': boolean;
            'rounded-pill': boolean;
            disabled: boolean;
        })[]>;
        BCloseButton: import("vue").DefineComponent<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }, {
            props: any;
            emit: (e: "click", value: MouseEvent) => void;
            disabledBoolean: import("vue").ComputedRef<boolean>;
            whiteBoolean: import("vue").ComputedRef<boolean>;
            classes: import("vue").ComputedRef<{
                'btn-close-white': boolean;
            }>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            ariaLabel: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            disabled: {
                type: null;
                required: false;
                default: boolean;
            };
            white: {
                type: null;
                required: false;
                default: boolean;
            };
            type: {
                type: null;
                required: false;
                default: string;
            };
        }>> & {
            onClick?: ((...args: any[]) => any) | undefined;
        }, {
            type: any;
            ariaLabel: string;
            disabled: any;
            white: any;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: false;
        };
        title: {
            type: StringConstructor;
            required: false;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        noRemove: {
            type: null;
            required: false;
            default: boolean;
        };
        pill: {
            type: null;
            required: false;
            default: boolean;
        };
        removeLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        tag: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        variant: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onRemove?: ((...args: any[]) => any) | undefined;
    }, {
        tag: string;
        variant: any;
        disabled: any;
        pill: any;
        noRemove: any;
        removeLabel: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "input" | "blur" | "tag-state" | "focus" | "focusin" | "focusout")[], "update:modelValue" | "input" | "blur" | "focus" | "tag-state" | "focusin" | "focusout", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    addButtonText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    addButtonVariant: {
        type: null;
        required: false;
        default: string;
    };
    addOnChange: {
        type: null;
        required: false;
        default: boolean;
    };
    autofocus: {
        type: null;
        required: false;
        default: boolean;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    duplicateTagText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    inputAttrs: {
        type: ObjectConstructor;
        required: false;
    };
    inputClass: {
        type: null;
        required: false;
    };
    inputId: {
        type: StringConstructor;
        required: false;
    };
    inputType: {
        type: null;
        required: false;
        default: string;
    };
    invalidTagText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    form: {
        type: StringConstructor;
        required: false;
    };
    limit: {
        type: NumberConstructor;
        required: false;
    };
    limitTagsText: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    modelValue: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    name: {
        type: StringConstructor;
        required: false;
    };
    noAddOnEnter: {
        type: null;
        required: false;
        default: boolean;
    };
    noOuterFocus: {
        type: null;
        required: false;
        default: boolean;
    };
    noTagRemove: {
        type: null;
        required: false;
        default: boolean;
    };
    placeholder: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    removeOnDelete: {
        type: null;
        required: false;
        default: boolean;
    };
    required: {
        type: null;
        required: false;
        default: boolean;
    };
    separator: {
        type: (StringConstructor | ArrayConstructor)[];
        required: false;
    };
    state: {
        type: null;
        required: false;
        default: undefined;
    };
    size: {
        type: null;
        required: false;
    };
    tagClass: {
        type: null;
        required: false;
    };
    tagPills: {
        type: null;
        required: false;
        default: boolean;
    };
    tagRemoveLabel: {
        type: StringConstructor;
        required: false;
    };
    tagRemovedLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    tagValidator: {
        type: FunctionConstructor;
        required: false;
        default: () => boolean;
    };
    tagVariant: {
        type: null;
        required: false;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    "onTag-state"?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onFocusin?: ((...args: any[]) => any) | undefined;
    onFocusout?: ((...args: any[]) => any) | undefined;
}, {
    required: any;
    modelValue: unknown[];
    disabled: any;
    state: any;
    autofocus: any;
    placeholder: string;
    addButtonText: string;
    addButtonVariant: any;
    addOnChange: any;
    duplicateTagText: string;
    inputType: any;
    invalidTagText: string;
    limitTagsText: string;
    noAddOnEnter: any;
    noOuterFocus: any;
    noTagRemove: any;
    removeOnDelete: any;
    tagPills: any;
    tagRemovedLabel: string;
    tagValidator: Function;
    tagVariant: any;
}>;
export default _sfc_main;
