import { VNodeNormalizedChildren } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        required: false;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    noRemove: {
        type: null;
        required: false;
        default: boolean;
    };
    pill: {
        type: null;
        required: false;
        default: boolean;
    };
    removeLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}, {
    props: any;
    disabledBoolean: import("vue").ComputedRef<boolean>;
    noRemoveBoolean: import("vue").ComputedRef<boolean>;
    pillBoolean: import("vue").ComputedRef<boolean>;
    emit: (e: 'remove', value?: VNodeNormalizedChildren) => void;
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    tagText: import("vue").ComputedRef<string>;
    computedId: import("vue").ComputedRef<string>;
    taglabelId: import("vue").ComputedRef<string>;
    classes: import("vue").ComputedRef<(string | {
        'text-dark': boolean;
        'rounded-pill': boolean;
        disabled: boolean;
    })[]>;
    BCloseButton: import("vue").DefineComponent<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }, {
        props: any;
        emit: (e: "click", value: MouseEvent) => void;
        disabledBoolean: import("vue").ComputedRef<boolean>;
        whiteBoolean: import("vue").ComputedRef<boolean>;
        classes: import("vue").ComputedRef<{
            'btn-close-white': boolean;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        ariaLabel: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        disabled: {
            type: null;
            required: false;
            default: boolean;
        };
        white: {
            type: null;
            required: false;
            default: boolean;
        };
        type: {
            type: null;
            required: false;
            default: string;
        };
    }>> & {
        onClick?: ((...args: any[]) => any) | undefined;
    }, {
        type: any;
        ariaLabel: string;
        disabled: any;
        white: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "remove"[], "remove", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: false;
    };
    title: {
        type: StringConstructor;
        required: false;
    };
    disabled: {
        type: null;
        required: false;
        default: boolean;
    };
    noRemove: {
        type: null;
        required: false;
        default: boolean;
    };
    pill: {
        type: null;
        required: false;
        default: boolean;
    };
    removeLabel: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    tag: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    variant: {
        type: null;
        required: false;
        default: string;
    };
}>> & {
    onRemove?: ((...args: any[]) => any) | undefined;
}, {
    tag: string;
    variant: any;
    disabled: any;
    pill: any;
    noRemove: any;
    removeLabel: string;
}>;
export default _sfc_main;
