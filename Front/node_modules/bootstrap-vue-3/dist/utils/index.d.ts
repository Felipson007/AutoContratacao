import BvEvent from './bvEvent';
import cssEscape from './cssEscape';
import { HAS_DOCUMENT_SUPPORT, HAS_NAVIGATOR_SUPPORT, HAS_WINDOW_SUPPORT, IS_BROWSER } from './env';
import { attemptBlur, attemptFocus, contains, getActiveElement, getAttr, getBCR, getStyle, isActiveElement, isElement, isEmptySlot, isTag, isVisible, offset, removeAttr, requestAF, select, selectAll, setAttr } from './dom';
import getBreakpointProps from './getBreakpointProps';
import getClasses from './getClasses';
import getId from './getId';
import resolveAriaInvalid from './resolveAriaInvalid';
import { isNumeric, isObject, isPlainObject } from './inspect';
import mergeDeep from './mergeDeep';
import normalizeSlot from './normalizeSlot';
import { stringToInteger, toFloat, toInteger, toPercison } from './number';
import { cloneDeep, omit, readonlyDescriptor } from './object';
import { pluckProps, suffixPropName } from './props';
import { isBooleanish, resolveBooleanish } from './booleanish';
import isLink from './isLink';
import { startCase, titleCase, toString, upperFirst } from './stringUtils';
export { titleCase, cloneDeep, BvEvent, isBooleanish, cssEscape, attemptBlur, startCase, toString, upperFirst, attemptFocus, resolveAriaInvalid, contains, stringToInteger, toFloat, toInteger, pluckProps, isLink, suffixPropName, resolveBooleanish, toPercison, omit, readonlyDescriptor, mergeDeep, normalizeSlot, getActiveElement, getAttr, getBCR, getStyle, isActiveElement, isElement, isEmptySlot, isTag, isVisible, offset, removeAttr, requestAF, select, selectAll, setAttr, HAS_DOCUMENT_SUPPORT, HAS_NAVIGATOR_SUPPORT, HAS_WINDOW_SUPPORT, IS_BROWSER, getBreakpointProps, getClasses, getId, isNumeric, isObject, isPlainObject, };
declare const _default: {
    BvEvent: typeof BvEvent;
    cssEscape: (value: unknown) => string;
    attemptBlur: (el: HTMLElement) => boolean;
    startCase: (str: string) => string;
    titleCase: (str: string) => string;
    toString: (val: unknown, spaces?: number) => string;
    upperFirst: (str: string) => string;
    attemptFocus: (el: HTMLElement, options?: {}) => boolean;
    contains: (parent: Node, child: Node) => boolean;
    stringToInteger: (value: string, defaultValue?: number) => number;
    toFloat: (value: string | number, defaultValue?: number) => number;
    toInteger: (value: number, defaultValue?: number) => number;
    pluckProps: <A extends Record<PropertyKey, unknown>, B extends Record<PropertyKey, unknown> | readonly PropertyKey[]>(objToPluck: A, keysToPluck: B) => B extends readonly PropertyKey[] ? Pick<A, B[number]> : Pick<A, keyof B>;
    isLink: (props: {
        href?: string | undefined;
        to?: import("vue-router").RouteLocationRaw | undefined;
    }) => boolean;
    suffixPropName: (suffix: string, value: string) => string;
    resolveBooleanish: (input: import("../types/Booleanish").default) => boolean;
    toPercison: (val: number, precision: number) => string;
    cloneDeep: <T>(source: T) => T;
    omit: <A_1 extends Record<PropertyKey, unknown>, B_1 extends readonly PropertyKey[]>(objToPluck: A_1, keysToPluck: B_1) => Omit<A_1, B_1[number]>;
    readonlyDescriptor: () => {
        enumerable: boolean;
        configurable: boolean;
        writable: boolean;
    };
    mergeDeep: (target: any, source: any, extendArray?: boolean) => any;
    normalizeSlot: (name: string, scope?: {}, $slots?: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    getActiveElement: (excludes?: never[]) => Element | null;
    isBooleanish: (input: unknown) => input is import("../types/Booleanish").default;
    resolveAriaInvalid: (ariaInvalid?: import("../types/AriaInvalid").default | undefined, state?: boolean | undefined) => boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    getAttr: (el: HTMLElement, attr: string) => string | null;
    getBCR: (el: HTMLElement) => DOMRect | null;
    getStyle: (el: HTMLElement, prop: string) => string | null;
    isActiveElement: (el: HTMLElement) => boolean;
    isElement: (el: HTMLElement) => boolean;
    isEmptySlot: (slot: import("vue").Slot | undefined, data?: any) => boolean;
    isTag: (tag: any, name: any) => boolean;
    isVisible: (el: HTMLElement) => boolean;
    offset: (el: HTMLElement) => {
        top: number;
        left: number;
    };
    removeAttr: (el: HTMLElement, attr: string) => void;
    requestAF: typeof requestAnimationFrame;
    select: (selector: any, root: any) => any;
    selectAll: (selector: any, root: any) => any[];
    setAttr: (el: HTMLElement, attr: string, value: string) => void;
    HAS_DOCUMENT_SUPPORT: boolean;
    HAS_NAVIGATOR_SUPPORT: boolean;
    HAS_WINDOW_SUPPORT: boolean;
    IS_BROWSER: boolean;
    getBreakpointProps: (prefix: string, breakpoints: string[], definition: {
        type: any[];
        default: any;
    }) => import("./getBreakpointProps").ComponentProps;
    getClasses: (props: Record<PropertyKey, unknown>, els: import("./getClasses").ComponentProps, propPrefix: string, classPrefix?: string) => string[];
    getId: (suffix?: string) => string;
    isNumeric: (value: unknown) => boolean;
    isObject: (obj: unknown) => obj is Record<PropertyKey, unknown>;
    isPlainObject: (obj: unknown) => obj is Record<PropertyKey, unknown>;
};
export default _default;
